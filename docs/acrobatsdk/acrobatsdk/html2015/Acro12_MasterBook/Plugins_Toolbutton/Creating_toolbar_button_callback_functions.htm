<!DOCTYPE HTML>
<html>
<head>

 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
 <title>Creating toolbar button callback functions</title>

 <meta name="generator" content="Adobe FrameMaker 2015" />
 <meta name="Originator" content="ImportMif" />
 <meta name="OriginalFile" content="C:\Users\Perforce\Work\Groups\SDK\main\Documents\Common\docs_fm\PluginAppsDeveloperGuide\Plugins_Toolbutton.fm" />
 <link rel="stylesheet" href="Plugins_Toolbutton.css" type="text/css" />


<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>

<script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
<script type="text/javascript" src="../../template/scripts/common.min.js"></script>
<script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
<script type="text/javascript" src="../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = "../..";
gCommonRootRelPath = "../..";
gTopicId = "2.1.7.2_5";
</script>
 <meta name="brsprev" value="Acro12_MasterBook/Plugins_Toolbutton/Removing_a_button_from_a_toolbar.htm">
 <meta name="brsnext" value="Acro12_MasterBook/Plugins_Annotations/Creating_Annotations.htm">
 <meta name="topic-breadcrumbs" content="Plug-ins and Applications > Overview > Creating Toolbars and Buttons" />
</head>

<body dir="ltr">
<script type="text/javascript" src="../../ehlpdhtm.js"></script>
<div dir="ltr">
  <h2><a name="XREF_31936_Creating_toolbar"></a>Creating toolbar button callback functions</h2>
  <p class="BodyLevel1">You can create a toolbar button callback function which is invoked by <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>&#160;or <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;when a user clicks a button. For the purposes of this discussion, a simplistic user-defined function named <span class="FM_Courier">ShowButtonMessage</span>&#160;is introduced. This method displays a message box by invoking the <span class="FM_Courier">AVAlertNote</span>&#160;method. The following code shows the body of the <span class="FM_Courier">ShowButtonMessage</span>&#160;function. </p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ACCB1 void ACCB2 ShowButtonMessage (void* data)</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>{</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>AVAlertNote (&quot;A button was clicked.&quot;);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p class="BodyLevel1">The data parameter for this and the other callbacks can be used to maintain private data that is used by the callback. Notice that this user-defined function is declared using the <span class="FM_Courier">ACCB1</span>&#160;and <span class="FM_Courier">ACCB2</span>&#160;macros. (See <a href="../Plugins_Pimech/Using_callback_functions.htm#XREF_20671_8_7_Callbacks">Using callback functions</a>.)</p>
  <p class="BodyLevel1">To create a callback for a button, create an <span class="FM_Courier">AVExecuteProc</span> object:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>AVExecuteProc ExecProcPtr = NULL;</p>
  <p class="BodyLevel1"><span class="FM_Courier">AVExecuteProc</span>&#160;is a callback that you can create that is invoked by <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>&#160;when a user clicks a button. After you create an <span class="FM_Courier">AVExecuteProc</span>&#160;object, you can invoke the <span class="FM_Courier">ASCallbackCreateProto</span>&#160;macro that is defined in the <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;core API to convert a user-defined function to an <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;callback. For example, you can invoke <span class="FM_Courier">ASCallbackCreateProto</span>&#160;to convert <span class="FM_Courier">ShowButtonMessage</span>&#160;to a callback function. The <span class="FM_Courier">ASCallbackCreateProto</span>&#160;macro requires the following arguments:</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1">The callback type. For example, you can pass <span class="FM_Courier">AVExecuteProc</span>.</p>
</li>
   <li>
   <p class="FM_Bullet1">The address of the user-defined function to convert to a callback. </p>
</li>
  </ul>
  <p class="BodyLevel1">The <span class="FM_Courier">ASCallbackCreateProto</span>&#160;macro returns a callback of the specified type that invokes the user-defined function whose address was passed as the second argument. The following lines of code shows the <span class="FM_Courier">ASCallbackCreateProto</span>&#160;macro converting the <span class="FM_Courier">ShowButtonMessage</span>&#160;user-defined function to a <span class="FM_Courier">AVExecuteProc</span> callback.</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>AVExecuteProc ExecProcPtr = NULL;</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ExecProcPtr= ASCallbackCreateProto(AVExecuteProc, &amp;ShowButtonMessage);</p>
  <p class="BodyLevel1">After you create an <span class="FM_Courier">AVExecuteProc</span>&#160;callback, you can invoke the <span class="FM_Courier">AVToolButtonSetExecuteProc</span>&#160;method to associate a button with a callback. That is, when a user clicks a button, <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>&#160;will invoke the user-defined function whose address was passed to the <span class="FM_Courier">ASCallbackCreateProto</span>&#160;macro. The <span class="FM_Courier">AVToolButtonSetExecuteProc</span>&#160;method requires the following parameters:</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1">An <span class="FM_Courier">AVToolButton</span> object that represents the button to associate with the callback</p>
</li>
   <li>
   <p class="FM_Bullet1">An <span class="FM_Courier">AVExecuteProc</span>&#160;object that represents the callback function </p>
</li>
   <li>
   <p class="FM_Bullet1">The address of a user-defined data structure that can be passed to the user-defined function</p>
</li>
  </ul>
  <p class="BodyLevel1">When you are done with a button callback, invoke the <span class="FM_Courier">ASCallbackDestroy</span>&#160;method to release the memory that it consumes. </p>
  <p class="BodyLevel1">The following code example creates a callback function for a button.</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_5Head_Example">Creating a toolbar button callback function</p>
</li>
  </ul>
  <p class="FM_CodeComment">//Define a toolbar button callback function</p>
  <p class="FM_CodeReference"><span class="FM_Bold">ACCB1 void ACCB2 ShowButtonMessage (void* data)</span>&#160;</p>
  <p class="FM_CodeReference">{</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>AVAlertNote (&quot;A button was clicked.&quot;);</p>
  <p class="FM_CodeReference">}</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference"><span class="FM_Bold">ACCB1 ASBool ACCB2 PluginInit (void)</span>&#160;</p>
  <p class="FM_CodeReference">{ </p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeComment">//Declare an AVToolButton object</p>
  <p class="FM_CodeReference">AVToolButton MyButton = NULL;</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeComment">//Create a AVIcon object </p>
  <p class="FM_CodeReference">AVIcon myIcon = (AVCursor)LoadBitmap(gHINSTANCE, MAKEINTRESOURCE(IDB_BITMAP1)); </p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeComment">//Create a new button</p>
  <p class="FM_CodeReference">MyButton = AVToolButtonNew (ASAtomFromString(&quot;MyExtn:MyButton&quot;), myIcon, FALSE, FALSE);</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeComment">//Retrieve the File toolbar</p>
  <p class="FM_CodeReference">const char * toolbarName= &quot;File&quot; ; </p>
  <p class="FM_CodeReference">AVToolBar ToolBar = AVAppGetToolBarByName(toolbarName);</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeComment">//Create toolbar button callback</p>
  <p class="FM_CodeReference">AVExecuteProc ExecProcPtr = ASCallbackCreateProto (AVExecuteProc, &amp;ShowButtonMessage); </p>
  <p class="FM_CodeReference">AVToolButtonSetExecuteProc (MyButton, ExecProcPtr, NULL);</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeComment">//Attach the button</p>
  <p class="FM_CodeReference">AVToolBarAddButton(ToolBar, MyButton, FALSE, NULL);</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeComment">//Release the callback function</p>
  <p class="FM_CodeReference">ASCallbackDestroy(ExecProcPtr);</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference">return true; </p>
  <p class="FM_CodeReference">}</p>
  <p class="FM_CodeReference"><span class="FM_Bold">ACCB1 ASBool ACCB2 PluginUnload (void)</span>&#160;</p>
  <p class="FM_CodeReference">{</p>
  <p class="FM_CodeReference">ASCallbackDestroy (ExecProcPtr); </p>
  <p class="FM_CodeReference">ASCallbackDestroy (CompEnabledProcPtr); </p>
  <p class="FM_CodeReference">ASCallbackDestroy (CompMarkedProcPtr); </p>
  <p class="FM_CodeReference">return true;</p>
  <p class="FM_CodeReference">}</p>
  <p class="FM_Note"><span class="FM_Z_NoteCaution">Note:<span style="padding-left: 4pt;" class="FMAutoNumber_1"></span></span>Notice that the application logic that creates a toolbar button is located in the <span class="FM_Courier">PluginInit</span>&#160;procedure. (See <a href="../Plugins_Pimech/About_plug-in_initialization.htm#XREF_58810_About_plug_in">About plug-in initialization</a>.)</p>
 </div>
</body>
</html>