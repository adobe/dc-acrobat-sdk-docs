<!DOCTYPE HTML>
<html>
<head>

 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
 <title>Using register variables</title>

 <meta name="generator" content="Adobe FrameMaker 2015" />
 <meta name="Originator" content="ImportMif" />
 <meta name="OriginalFile" content="C:\Users\Perforce\Work\Groups\SDK\main\Documents\Common\docs_fm\PluginAppsDeveloperGuide\Plugins_Exceptions.fm" />
 <link rel="stylesheet" href="Plugins_Exceptions.css" type="text/css" />


<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>

<script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
<script type="text/javascript" src="../../template/scripts/common.min.js"></script>
<script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
<script type="text/javascript" src="../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = "../..";
gCommonRootRelPath = "../..";
gTopicId = "2.1.20.1.0_3";
</script>
 <meta name="brsprev" value="Acro12_MasterBook/Plugins_Exceptions/Using_nested_exception_handlers.htm">
 <meta name="brsnext" value="Acro12_MasterBook/Plugins_ExtendedAPI/Working_with_Acrobat_Extended_APIs.htm">
 <meta name="topic-breadcrumbs" content="Plug-ins and Applications > Overview > Handling Exceptions > Exception handling scenarios" />
</head>

<body dir="ltr">
<script type="text/javascript" src="../../ehlpdhtm.js"></script>
<div dir="ltr">
  <h3><a name="IX_register_variables"></a>Using register variables</h3>
  <p class="BodyLevel1">The <span class="FM_Courier">DURING</span> and<span class="FM_Courier"> HANDLER</span>&#160;macros use the standard C <span class="FM_Courier">setjmp/longjmp</span>&#160;mechanism. The <span class="FM_Courier">DURING</span>&#160;macro calls <span class="FM_Courier">setjmp</span>. An exception results in a <span class="FM_Courier">longjmp</span>&#160;to the context that was saved by the most recent <span class="FM_Courier">setjmp</span>. When a <span class="FM_Courier">longjmp</span>&#160;occurs, all registers, including those containing variables the compiler optimized into register variables, are restored to the values they held when the <span class="FM_Courier">setjmp</span> occurred.</p>
  <p class="BodyLevel1">As a result, the state of local variables that have been optimized into registers is unpredictable when the exception handler is invoked. To avoid this situation, declare all variables that are set in the main body of the code and used in the exception handler or beyond (if the handler lets execution continue) as volatile. This ensures that they are never optimized into register variables, but are always referenced from memory.</p>
  <p class="BodyLevel1">When using the <span class="FM_Courier">volatile</span> statement, place the keyword in the correct location, such as the following:</p>
  <p class="FM_CodeReference"><span class="FM_Courier"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>volatile myStruct* p = 0;</span></p>
  <p class="BodyLevel1">The previous statement declares the instance of the structure to be volatile. The next statement declares the pointer itself to be volatile:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>myStruct* volatile p = 0;</p>
  <p class="BodyLevel1">In general, the second version is the one to use.</p>
 </div>
</body>
</html>