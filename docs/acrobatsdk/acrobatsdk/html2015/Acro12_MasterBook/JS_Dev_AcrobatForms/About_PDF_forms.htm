<!DOCTYPE HTML>
<html>
<head>

 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
 <title>About PDF forms</title>

 <meta name="generator" content="Adobe FrameMaker 2015" />
 <meta name="Originator" content="ImportMif" />
 <meta name="OriginalFile" content="C:\Users\Perforce\Work\Groups\SDK\main\Documents\Acrobat_SDK\Acrobat_12.0 - Nov 2015\docs_fm\JavaScript\AcroJSGuide\JS_Dev_AcrobatForms.fm" />
 <link rel="stylesheet" href="JS_Dev_AcrobatForms.css" type="text/css" />


<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>

<script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
<script type="text/javascript" src="../../template/scripts/common.min.js"></script>
<script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
<script type="text/javascript" src="../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = "../..";
gCommonRootRelPath = "../..";
gTopicId = "5.1.6.1.1";
</script>
 <meta name="brsprev" value="Acro12_MasterBook/JS_Dev_AcrobatForms/Forms_essentials.htm">
 <meta name="brsnext" value="Acro12_MasterBook/JS_Dev_AcrobatForms/Creating_Acrobat_form_fields.htm">
 <meta name="topic-breadcrumbs" content="JavaScript > Developing Acrobat Applications Using JavaScript > Using JavaScript in Forms > Forms essentials" />
</head>

<body dir="ltr">
<script type="text/javascript" src="../../ehlpdhtm.js"></script>
<div dir="ltr">
  <h3><a name="XREF_93532_About_PDF_Forms"></a>About PDF forms</h3>
  <p class="BodyLevel1"><a name="IX_about_14"></a>There are two types of PDF forms: <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;forms and <uservariable x-value="Adobe" x-showvalue="TRUE" name="AdobeShortName" x-format="AdobeShortName">Adobe</uservariable>&#160;LiveCycle Designer forms (XML form object model).</p>
  <p class="BodyLevel1"><uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;forms present information using form fields. They are useful for providing the user with a structured format within which to view or print information. Forms permit the user to fill in information, select choices, and digitally sign the document. Once the user has entered data, the information within the PDF form can be sent to the next step in the workflow for extraction. If you are creating a new form, the recommended type is LiveCycle Designer forms since its format readily allows for web service interactions and compatibility with document processing needs within enterprise-wide infrastructures. </p>
  <p class="BodyLevel1">The XML form object model uses a document object model (DOM) architecture to manage the components that comprise a form. These include the base template, the form itself, and the data contained within the form fields. In addition, all calculations, validations, and formatting are specified and managed within the DOM and XML processes.</p>
  <p class="BodyLevel1"><a name="IX_dynamic_forms"></a><a name="IX_static_forms"></a><span class="FM_Italic">Static XML forms</span>&#160;were supported in <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;6.0, and <span class="FM_Italic">dynamic XML forms </span>are now supported in <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;7.0. Both types are created using LiveCycle Designer. A static XML form presents a fixed set of text, graphics, and field areas at all times. Dynamic XML forms are created by dividing a form into a series of subforms and repeating subforms. They support dynamically changing fields that can grow or shrink based on content, variable-size rows and tables, and intelligent data import/export features.</p>
  <h4><a name="TOC_Elements_of_Acrobat_forms"></a>Elements of <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable> forms</h4>
  <p class="BodyLevel1">The form fields used in <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;forms are the basis of interaction with the user. They include buttons, check boxes, combo boxes, list boxes, radio buttons, text fields, and digital signature fields. In addition, you can enhance the appearance and value of your forms through the use of tables, templates, watermarks, and other user interface elements such as bookmarks, thumbnails, and dialog boxes. Finally, the JavaScript methods you define in response to events will help customize the utility and behavior of the form within the context of its workflow.</p>
  <p class="BodyLevel1">Text fields can be useful for either presenting information or collecting data entered by the user, such as an address or telephone number.</p>
  <p class="BodyLevel1">Digital signature fields can be used to ensure the security of a document.</p>
  <p class="BodyLevel1">When presenting the user with decisions or choices, you can use check boxes and radio buttons for a relatively small set of choices, or list boxes and combo boxes for a larger set of dynamically changing choices.</p>
  <h4><a name="TOC_Guidelines_for_creating"></a>Guidelines for creating a new form</h4>
  <p class="BodyLevel1"><a name="IX_PDF_forms_see_Acrobat"></a><a name="IX_guidelines_for_creating"></a>When designing a PDF form, consider first its purpose and the data it must manage. It may be that the same page is used in multiple contexts, depending on user interactions and decisions. In this case, there may be multiple sets of form fields. When this occurs, treat each set of form fields as a different problem, as though each set had its own page. This will also require extra logic applied to visibility settings. Your form design may have dynamically changing features such as the current date, as well as convenience options such as automatic generation of email messages. It may even have a dynamically changing appearance and layout which is responsive to user interactions.</p>
  <p class="BodyLevel1">Usability is a major factor in the design of forms since they are essentially graphical user interfaces, so layout and clarity will be a major consideration. Finally, consider the medium in which the form will be presented: screens with limited resolution may affect your decisions, and printing characteristics may also be relevant.</p>
  <p class="BodyLevel1">When creating forms programmatically, consider the form elements that will be needed for a given area. Declare those variables associated with the form elements, and apply logical groupings to those elements that belong to the same collections, such as radio buttons or check boxes. This will simplify the task of assigning properties, formatting options, validation scripts, calculation scripts, and tabbing order to each of the individual form elements.</p>
  <p class="BodyLevel1"><a name="IX_creating_8"></a>The creation of a new form, whether done through the <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;layout tools or LiveCycle Designer, or programmatically through JavaScript, will require that you consider the following:</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1">How the form fields will be positioned.</p>
</li>
   <li>
   <p class="FM_Bullet1">Which form fields will be associated in collections so that their properties can be set with consistency and efficiency.</p>
</li>
   <li>
   <p class="FM_Bullet1">How size, alignment, and distribution of form fields within the document will be determined.</p>
</li>
   <li>
   <p class="FM_Bullet1">When and how to set up duplicate form fields so that when the user types information into one form field, that information automatically appears in the duplicate form fields.</p>
</li>
   <li>
   <p class="FM_Bullet1">When to create multiple form fields for array-based access and algorithms.</p>
</li>
   <li>
   <p class="FM_Bullet1">The tab order of form fields.</p>
</li>
  </ul>
  </div>
</body>
</html>