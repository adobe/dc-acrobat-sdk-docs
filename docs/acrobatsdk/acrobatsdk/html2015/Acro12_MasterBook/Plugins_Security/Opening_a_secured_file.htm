<!DOCTYPE HTML>
<html>
<head>

 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
 <title>Opening a secured file</title>

 <meta name="generator" content="Adobe FrameMaker 2015" />
 <meta name="Originator" content="ImportMif" />
 <meta name="OriginalFile" content="C:\Users\Perforce\Work\Groups\SDK\main\Documents\Common\docs_fm\PluginAppsDeveloperGuide\Plugins_Security.fm" />
 <link rel="stylesheet" href="Plugins_Security.css" type="text/css" />


<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>

<script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
<script type="text/javascript" src="../../template/scripts/common.min.js"></script>
<script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
<script type="text/javascript" src="../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = "../..";
gCommonRootRelPath = "../..";
gTopicId = "2.1.14.1.0_2";
</script>
 <meta name="brsprev" value="Acro12_MasterBook/Plugins_Security/Adding_a_security_handler.htm">
 <meta name="brsnext" value="Acro12_MasterBook/Plugins_Security/Saving_a_secured_file.htm">
 <meta name="topic-breadcrumbs" content="Plug-ins and Applications > Overview > Working with Document Security > About security handlers" />
</head>

<body dir="ltr">
<script type="text/javascript" src="../../ehlpdhtm.js"></script>
<div dir="ltr">
  <h3>Opening a secured file</h3>
  <p class="BodyLevel1">The <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;core API has several methods for opening files. The <span class="FM_Courier">PDDocOpen</span>&#160;(or <span class="FM_Courier">PDDocOpenEx</span>) method is used to open PDF files, even when a plug-in calls AV layer methods such as <span class="FM_Courier">AVDocOpenFromASFileWithParams</span>. As a result, the sequence of operations is largely the same regardless of whether the document is being opened from the PD&nbsp;layer or from the AV layer. The difference is that if you call <span class="FM_Courier">PDDocOpen</span>&#160;directly, you must pass your own authorization procedure (<span class="FM_Courier">PDAuthProc</span>), while AV layer methods always use <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>’s built-in authorization procedure.</p>
  <p class="BodyLevel1">The authorization procedure must implement the authorization strategy, such as giving the user three chances to enter a password. The <span class="FM_Courier">PDAuthProc</span>&#160;is not part of a security handler, but it must call the security handler’s methods to authorize the user (for example, to get the password from the user and to check whether or not the password is valid).</p>
  <p class="BodyLevel1"><uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable> performs the following steps to open a secured PDF file:</p>
  <p class="FM_StepReset"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>1.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Searches for an Encrypt key in the PDF document’s trailer, to determine whether or not the document is encrypted. If there is no Encrypt key, <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable> opens the document immediately.</p>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>2.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>If there is an Encrypt key, its value is an encryption dictionary. <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;gets the value of the Filter key in the dictionary to determine which security handler was used when the file was saved. It looks in the list of registered security handlers (which contains <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>’s built-in handler and any handlers that plug-ins or applications have registered) for one whose name matches the name found in the PDF file. For information about a dictionary, see <a href="../Plugins_Cos/Working_with_Cos_dictionaries.htm#XREF_96656_Working_with_Cos">Working with Cos dictionaries</a>.</p>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>3.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>If <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;finds no match, indicating that the necessary handler could not be found, it does not open the document. If it finds a matching security handler, it invokes that handler’s P<span class="FM_Courier">DCryptNewSecurityDataProc</span>&#160;callback to extract and decrypt information from the PDF file’s encryption dictionary.</p>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>4.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span><uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable> invokes the security handler’s authorize callback (<span class="FM_Courier">PDCryptAuthorizeExProc</span>) with NULL authorization data, and with the requested permissions set to <span class="FM_Courier">PDPermReqOprOpen</span>&#160;or <span class="FM_Courier">pdPermOpen</span>&#160;(requesting that the user be allowed to open the file). This allows support for authorization schemes that do not need authorization data. </p>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>5.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>If authorization succeeds, the handler’s authorization callback must return the <span class="FM_Courier">PDPermReqStatus</span>&#160;(when the callback is <span class="FM_Courier">PDCryptAuthorizeExProc</span>) or <span class="FM_Courier">pdPermOpen</span>&#160;(when the callback is <span class="FM_Courier">PDCryptAuthorizeProc</span>) indicating that the user is permitted to open the file.</p>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>6.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>If authorization fails, the authorization procedure passed in the call to open the <span class="FM_Courier">PDDoc</span> is called.</p>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>7.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>If authorization still fails, the file is not opened.</p>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>8.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>If authorization succeeds, <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;calls the security handler’s <span class="FM_Courier">PDCryptNewCryptDataProc</span>&#160;callback to create the decryption key that is used to decrypt the file. The <span class="FM_Courier">PDCryptNewCryptDataProc</span>&#160;callback can construct the decryption key in any way it chooses, but generally performs some calculation based on the contents of the security data structure filled previously by the handler’s <span class="FM_Courier">PDCryptNewSecurityDataProc</span> callback.</p>
  </div>
</body>
</html>