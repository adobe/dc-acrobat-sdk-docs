<!DOCTYPE HTML>
<html>
<head>

 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
 <title>Understanding the process</title>

 <meta name="generator" content="Adobe FrameMaker 2015" />
 <meta name="Originator" content="ImportMif" />
 <meta name="OriginalFile" content="C:\Users\Perforce\Work\Groups\SDK\main\Documents\Common\docs_fm\PluginAppsDeveloperGuide\Plugins_ExtendedAPI.fm" />
 <link rel="stylesheet" href="Plugins_ExtendedAPI.css" type="text/css" />


<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>

<script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
<script type="text/javascript" src="../../template/scripts/common.min.js"></script>
<script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
<script type="text/javascript" src="../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = "../..";
gCommonRootRelPath = "../..";
gTopicId = "2.1.21.2.0_5";
</script>
 <meta name="brsprev" value="Acro12_MasterBook/Plugins_ExtendedAPI/Initializing_the_digital_signature_plug-in.htm">
 <meta name="brsnext" value="Acro12_MasterBook/Plugins_ExtendedAPI/Forms_extended_API.htm">
 <meta name="topic-breadcrumbs" content="Plug-ins and Applications > Overview > Working with Acrobat Extended APIs > Digital signature extended API" />
</head>

<body dir="ltr">
<script type="text/javascript" src="../../ehlpdhtm.js"></script>
<div dir="ltr">
  <h3>Understanding the process</h3>
  <p class="BodyLevel1">The steps in this section are suggestions that describe the interactions of a digital signature plug-in (the SignDoc sample plug-in provided with this SDK is a more complete example).</p>
  <h5>Dialogs and signature gathering</h5>
  <p class="BodyLevel1">The digital signature plug-in invokes your <span class="FM_Courier">dsNewSigDataProc</span>&#160;callback method, a callback that begins the signature gathering process:</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1">Your plug-in interacts with the user, and allows the user to cancel if they want to do so.</p>
</li>
   <li>
   <p class="FM_Bullet1">Your plug-in acquires the signature itself in a method-specific way. All information is saved in memory, without altering the document itself.</p>
</li>
   <li>
   <p class="FM_Bullet1">If <span class="FM_Courier">dsNewSigData</span>&#160;does not cancel, DigSig prepares the document for saving. First, it calls <span class="FM_Courier">dsUnValidateSig</span>&#160;on every signature in the document to put any overprinting or underprinting in canonical form. It then counts how many pages and fields have changed since any prior signature and records this.</p>
</li>
   <li>
   <p class="FM_Bullet1">For a first signature, the digital signature plug-in displays the Save As dialog box, allowing the user to select file name, optimization, and encryption. The user may cancel. Other than fatal errors, such as out-of-disk-space, this is the last chance to stop the process.</p>
</li>
  </ul>
  <h5>Saving a document</h5>
  <p class="BodyLevel1">The following steps describe how the digital signature plug-in saves a document:</p>
  <p class="FM_StepReset"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>1.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>The digital signature plug-in invokes your <span class="FM_Courier">DSCommitSignProc</span>&#160;callback method to update the document with the actual signature. Your <span class="FM_Courier">DSCommitSignProc</span>&#160;callback must perform the following tasks:</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet2">Create the signature dictionary, possibly using information in the signature field /DV dictionary, perhaps using the <span class="FM_Courier">/ByteRange</span>&#160;and <span class="FM_Courier">/Contents</span> keys.</p>
</li>
   <li>
   <p class="FM_Bullet2">Point /V in the signature field dictionary to this. Then create the /AP /N value in the signature annotation dictionary, using a method-specific visible representation of the signature, including a symbol signifying “unvalidated signature.”</p>
</li>
   <li>
   <p class="FM_Bullet2">Optionally allocate dynamic storage for a marked array, an array of marked COS objects that it cares about.</p>
</li>
   <li>
   <p class="FM_Bullet2">Return a marked array that includes at least the /ByteRange and /Contents value objects.</p>
</li>
  </ul>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>2.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>The digital signature plug-in inserts the /Changes array from step 1.</p>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>3.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>The digital signature plug-in saves the PDF document to a file. For each Cos object in the marked array, DigSig records the object’s byte offset and length in the file as written. The saved file may have objects encrypted by the <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable> standard encryption handler, if the user so chooses.</p>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>4.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>The first time a document is signed, the digital signature plug-in may rename the file and may invoke the Optimizer, Linearizer, and Garbage Collector. Upon return from the save, all Cos objects are invalid, including those in the marked array.</p>
  <p class="FM_Indent1">All PD-level objects except the <span class="FM_Courier">PDDoc</span>&#160;are invalid. Signing methods must not depend on saving any such state between <span class="FM_Courier">dsCommitSign</span>&#160;and <span class="FM_Courier">dsFinishSign</span>. In particular, the byte offsets and lengths in the marked array are valid upon entry to <span class="FM_Courier">doSign</span>, but the Cos objects are not. The order of entries is unchanged, however, these Cos objects will be rewritten as CosNull before invoking <span class="FM_Italic">dsFinishSign</span>.</p>
  <h5>Finishing the process</h5>
  <p class="BodyLevel1">The following describes how the digital signature plug-in finishes the process of a signing a document:</p>
  <p class="FM_StepReset"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>1.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Invokes <span class="FM_Courier">dsFinishSign</span>, passing back in the marked array. Your <span class="FM_Courier">DSFinishSignProc</span>&#160;callback method must perform the following tasks:</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet2">Calculate the <span class="FM_Courier">/ByteRange</span> that it desires, using the byte offsets and lengths in the marked array.</p>
</li>
   <li>
   <p class="FM_Bullet2">Overwrite the marked <span class="FM_Courier">/ByteRange</span>&#160;value in the saved file, using the <span class="FM_Courier">DigSigOverwriteIntArray</span>&#160;or <span class="FM_Courier">DigSigOverwriteBytes</span> callback.</p>
</li>
   <li>
   <p class="FM_Bullet2">Overwrite any other marked Cos objects it wants to.</p>
</li>
   <li>
   <p class="FM_Bullet2">Calculate any document digest that it desires, using the <span class="FM_Courier">DigSigFileGetEOF, DigSigFileSetPos</span>, and <span class="FM_Courier">DigSigFileRead</span>&#160;callbacks; or it may use the <span class="FM_Courier">DigSigMD5ByteRange</span>&#160;callback.</p>
</li>
   <li>
   <p class="FM_Bullet2">Obscure or encrypt this digest in a method-specific way.</p>
</li>
   <li>
   <p class="FM_Bullet2">Overwrite the marked <span class="FM_Courier">/Contents</span>&#160;value in the saved file, using <span class="FM_Courier">DigSigOverwriteHexstring</span>&#160;or <span class="FM_Courier">DigSigOverwriteBytes</span>.</p>
</li>
   <li>
   <p class="FM_Bullet2">Optionally delete dynamic storage for the marked array returned by the plug-in.</p>
</li>
  </ul>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>2.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Invokes <span class="FM_Courier">dsFreeSigData</span>, which may free up any remaining storage.</p>
  <h5>Revalidating signatures</h5>
  <p class="BodyLevel1">If the user reopens the file, the signatures must be validated. If the user asks to validate one or more signature fields, the digital signature plug-in sequences through them one at a time. Your <span class="FM_Courier">DSValidateSignProc</span> callback method must perform the following tasks:</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1">Recalculate any document digest that it desires, using the <span class="FM_Courier">DigSigFileGetEOF</span>, <span class="FM_Courier">DigSigFileSetPos</span>, and <span class="FM_Courier">DigSigFileRead</span>&#160;callbacks; or it may use the <span class="FM_Courier">DigSigMD5ByteRange</span>&#160;callback.</p>
</li>
   <li>
   <p class="FM_Bullet1">Compare this result to the stored one, and do any other method-specific checks it desires.</p>
</li>
   <li>
   <p class="FM_Bullet1">Optionally do a validation against some stored (network) registry.</p>
</li>
   <li>
   <p class="FM_Bullet1">Update the <span class="FM_Courier">/AP</span>&#160;<span class="FM_Courier">/N</span>&#160;value in the signature annotation dictionary to show doublechecked/pass/fail symbol.</p>
</li>
   <li>
   <p class="FM_Bullet1">Return doublechecked/pass/fail.</p>
</li>
  </ul>
  <p class="BodyLevel1">The user may open more than one document at a time, and may switch between open documents.</p>
  <h5>Additional available callbacks</h5>
  <p class="BodyLevel1">The user may ask to show a signature panel containing summary information for each signature in an open document. If multiple documents are open, there may be multiple panels, or a single panel may be repainted as the user switches between documents. DigSig manages updating the panel(s), but may call the respective method plug-in for each signature to get information to display on the panel. For each signature, the signature panel has two levels of detail:[Same comment as on page 15 about the following not being a sequential list.]</p>
  <p class="FM_StepReset"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>1.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>CLOSED displays a doublechecked/pass/fail/unknown/blank icon and a line of text for each signature field in the document. The default text is the name of the person signing and the date and time of signing, displayed in a language-independent way.</p>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>2.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>The digital signature plug-in calls <span class="FM_Courier">dsGetValidState</span> to choose which icon to show.</p>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>3.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>OPEN displays an icon and line of text for each signature, then indented lines of further text, currently consisting of the name of the signer, date and time of signing, location of signing, reason for signing, and signing method.</p>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>4.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>The digital signature calls <span class="FM_Courier">dsGetValidState</span> to choose which icon to show.</p>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>5.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Your plug-in may update the signature panel for a document asynchronously (it may be doing validation as a background or idle-loop task). To do this, use the <span class="FM_Courier">DigSigUpdatePanel</span> callback.</p>
  <h5>Additional plug-in support</h5>
  <p class="BodyLevel1">Whenever a signature is created or verified, the plug-in may optionally alter the appearance of the signature in the document, for the purpose of displaying or printing. For example, it could change an overprinted question mark on an unverified signature to an underprinted logo for a verified signature. To help with this, DigSig provides an HFT callback <span class="FM_Courier">DigSigGetStdXObj</span>&#160;that returns an XObject for a blank appearance, a question mark, or a cross. These are suitable as targets of the Do operator in a signature’s appearance stream.</p>
  <p class="BodyLevel1">To avoid saving a signature to a file with an appearance of valid (rather than unvalidated), just before each file save, DigSig loops through all the signature fields and calls the specific method’s <span class="FM_Courier">dsUnValidateSig</span>&#160;entry. This routine restores the signature’s appearance to the unvalidated state.</p>
  <p class="BodyLevel1">The AcroForms Widget Annot handler calls into DigSig using four entries. These calls all reflect user actions taken in the document view, not the Signatures panel view. </p>
  <p class="BodyLevel1">When the user selects an annotation by tabbing to it or by clicking it with the mouse, and that annotation is for a signature field, AcroForms calls DigSigDraw. If the annotation is selected, then <span class="FM_Courier">bIsSelected</span>&#160;is true. When the user tabs to a signature annotation and activates it by hitting the spacebar or enter key, this is equivalent to a left mouse click.</p>
  <p class="BodyLevel1">AcroForms calls <span class="FM_Courier">DigSigKeyDown</span>. The parameters parallel those of <span class="FM_Courier">AVAnnotHandlerDoKeyDownProc</span>. When the user left-clicks inside a signature annotation, AcroForms calls <span class="FM_Courier">DigSigClick</span>. The parameters parallel those of <span class="FM_Courier">DoClickProcType</span>.</p>
  <p class="BodyLevel1">When the user right-clicks inside a signature annotation, AcroForms calls DigSigRightClick.</p>
  <h5>Rollback support </h5>
  <p class="BodyLevel1">There is a constraint on the values in the /ByteRange array. This constraint allows DigSig to implement rollbacks prior to signatures. </p>
  <p class="BodyLevel1">The largest offset + length value in the /ByteRange array for a given signature must be equal to the length of the PDF file containing that signature; that is, it must equal offset + 1 of the &quot;F&quot; in the %%EOF at the end of the file.</p>
  <p class="BodyLevel1">In addition, the following constraints also apply:</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1">All offsets must be in the range 0..2147483647.</p>
</li>
   <li>
   <p class="FM_Bullet1">All lengths must be in the range 1..2147483647.</p>
</li>
   <li>
   <p class="FM_Bullet1">Offset[n+1] must be strictly greater than offset[n] + length[n].</p>
</li>
  </ul>
  </div>
</body>
</html>