<!DOCTYPE HTML>
<html>
<head>

 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
 <title>PDF Consultant and Accessibility Checker extended API</title>

 <meta name="generator" content="Adobe FrameMaker 2015" />
 <meta name="Originator" content="ImportMif" />
 <meta name="OriginalFile" content="C:\Users\Perforce\Work\Groups\SDK\main\Documents\Common\docs_fm\PluginAppsDeveloperGuide\Plugins_ExtendedAPI.fm" />
 <link rel="stylesheet" href="Plugins_ExtendedAPI.css" type="text/css" />


<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>

<script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
<script type="text/javascript" src="../../template/scripts/common.min.js"></script>
<script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
<script type="text/javascript" src="../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = "../..";
gCommonRootRelPath = "../..";
gTopicId = "2.1.21.1";
</script>
 <meta name="brsprev" value="Acro12_MasterBook/Plugins_ExtendedAPI/Catalog_extended_API.htm">
 <meta name="brsnext" value="Acro12_MasterBook/Plugins_ExtendedAPI/How_the_consultant_works.htm">
 <meta name="topic-breadcrumbs" content="Plug-ins and Applications > Overview > Working with Acrobat Extended APIs" />
</head>

<body dir="ltr">
<script type="text/javascript" src="../../ehlpdhtm.js"></script>
<div dir="ltr">
  <h2><a name="XREF_13986_PDF_Consultant_and"></a>PDF Consultant and Accessibility Checker extended API</h2>
  <p class="BodyLevel1"><uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;comes with a plug-in called the PDF Consultant and Accessibility Checker. This plug-in walks through PDF documents, visiting each object and determining its type and other statistics. It can make certain modifications or repairs to the PDF document. The objects that the consultant visits can range from simple, primitive types such as Cos strings to higher-level objects such as images. Users invoke the consultant to operate on a particular PDF document, choose which tests or repairs to run, then view the results and select repair options.</p>
  <p class="BodyLevel1">The consultant visits the objects in a PDF document according to instructional flags you pass to it. After the consultant visits an object, the object may be different. The consultant reclassifies modified objects before moving on to the next object.</p>
  <p class="BodyLevel1">As the consultant traverses a PDF document, gathering objects of interest, it can perform the following tasks:</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1">Walk a given hierarchy</p>
</li>
   <li>
   <p class="FM_Bullet1">Keep track of cycles</p>
</li>
   <li>
   <p class="FM_Bullet1">Ensure that objects are only visited once, if desired</p>
</li>
   <li>
   <p class="FM_Bullet1">Recognize object types</p>
</li>
   <li>
   <p class="FM_Bullet1">Keep a traversal stack list</p>
</li>
  </ul>
  <h5><a name="IX_Acrobat_agents"></a><uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable> agents</h5>
  <p class="BodyLevel1">The consultant accomplishes its task by using agents, which are pieces of code you design to gather the statistics and recommend to the consultant the necessary repairs of the document. Separate agents handle each area of analysis and repair. The agents inform the consultant of the particular types of objects in which they are interested by registering with the consultant. When the consultant has one or more agents registered, it hands each object of the requested type(s) in the current document to each of the agents that requested that type. The consultant gives objects to each agent in turn, depending on the order in which they registered.</p>
  <p class="BodyLevel1">The consultant must intelligently determine the type of each object it comes across (both direct and indirect), so it can pass appropriate objects to the agents, or replace or remove ones that it has been instructed to handle itself. The consultant communicates directly with agents, keeping lists of which agents are interested in which objects, and obtaining instructions from the agent as to an objectâ€™s visitation status.</p>
  <p class="BodyLevel1">Agents can perform their own repairs and modifications to the PDF document, and can return a corrected object to serve as a replacement for the object the consultant originally passed to it. Agents can also modify the Cos graph themselves (including adding or removing Cos objects or modifying the contents such as keys or array elements).</p>
  <p class="BodyLevel1">The consultant keeps a list of each object (starting with the object which began the traversal) that it visits on its way to any given object. Agents must be careful not to make any modifications that would affect any of the objects in the list, which is referred to as the traversal stack. For this reason, agents can specify a post-processing callback that the consultant invokes once it has finished traversing the entire document.</p>
  <h5>Reclassifying and revisiting</h5>
  <p class="BodyLevel1">If an agent or the consultant modifies an object, the consultant reclassifies that object, possibly changing its type.</p>
  <p class="BodyLevel1">Agents also pass visitation flags to the consultant that determine how object types should be visited. Limiting the traversal is important, as PDF documents are graphs, arbitrarily complex, and often there are many ways to visit a single object. If the consultant reclassifies an object, it may also change the way that object is revisited. You must keep this in mind as you develop your agents.</p>
  <h5>Agent architecture</h5>
  <p class="BodyLevel1">Your agent code will primarily consist of a structure, as defined in the ConsExpt.h header file. <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;provides a C++ wrapper class to facilitate writing agents; you can derive an agent class from this base class. </p>
  </div>
</body>
</html>