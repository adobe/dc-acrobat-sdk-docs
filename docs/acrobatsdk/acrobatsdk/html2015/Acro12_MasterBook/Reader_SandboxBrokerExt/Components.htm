<!DOCTYPE HTML>
<html>
<head>

 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
 <title>Components</title>

 <meta name="generator" content="Adobe FrameMaker 2015" />
 <meta name="Originator" content="ImportMif" />
 <meta name="OriginalFile" content="C:\Users\Perforce\Work\Groups\SDK\main\Documents\Acrobat_SDK\Acrobat_12.0 - Nov 2015\docs_fm\Getting_Started\DevelopingForReader\Reader_SandboxBrokerExt.fm" />
 <link rel="stylesheet" href="Reader_SandboxBrokerExt.css" type="text/css" />


<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>

<script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
<script type="text/javascript" src="../../template/scripts/common.min.js"></script>
<script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
<script type="text/javascript" src="../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = "../..";
gCommonRootRelPath = "../..";
gTopicId = "1.5.5.1";
</script>
 <meta name="brsprev" value="Acro12_MasterBook/Reader_SandboxBrokerExt/Extending_Broker_APIs_at_run_time.htm">
 <meta name="brsnext" value="Acro12_MasterBook/Reader_SandboxBrokerExt/Handshake_between_Plug-in_and_Plug-in_Broker.htm">
 <meta name="topic-breadcrumbs" content="Introduction to SDK > Developing for Acrobat Reader > Sandbox Broker Extensibility" />
</head>

<body dir="ltr">
<script type="text/javascript" src="../../ehlpdhtm.js"></script>
<div dir="ltr">
  <h3>Components</h3>
  <h4><a name="TOC_Plug_in_PI"></a>Plug-in (PI)</h4>
  <p class="BodyLevel1">The plug-in is loaded in the Reader Sandbox Process that runs under restricted rights. Every plug-in that requires some added broker functionality must implement its own plug-in broker process to implement new broker APIs. These new broker APIs can be used only by that plug-in and are not visible to any other code/module loaded inside the Sandbox Process. Plugins can use the Sandbox Plugin SDK for this.</p>
  <h4><a name="TOC_Sandbox_Process_The"></a>Sandbox Process (The Protected Mode Reader process running under restricted rights)</h4>
  <p class="BodyLevel1">This is the Reader Renderer Process running in protected mode under restricted rights. All Reader and plug-in code runs in this process. It has restricted access to files, registry, processes, window handles etc. It communicates with the Reader Broker Process over the Sandbox-Broker IPC channel to service actions outside the sandbox boundary.</p>
  <h4><a name="TOC_Broker_Process_The"></a>Broker Process (The Broker Process running with full rights)</h4>
  <p class="BodyLevel1">This is the Reader Broker process which runs with full user rights and imposes policy white lists. It grants access to files, registry, and processes as per policy white list. It implements the broker APIs to service the functionality requested by the sandbox process outside the sandbox boundary. The Sandbox Process communicates with it over the Sandbox-Broker IPC channel.</p>
  <h4><a name="TOC_Plug_in_Broker_The_Plug"></a>Plug-in Broker (The Plug-in Broker Process that extends the Broker APIs at runtime)</h4>
  <p class="BodyLevel1">This is the Plug-in Broker Process which is private to the associated plug-in. This implements the plug-in specific broker APIs required for the full functionality of the plug-in in sandbox environment. We call them extended broker APIs, as they extend the existing Broker APIs to fulfill the plug-in requirements.</p>
  <p class="BodyLevel1">The plug-in, which runs in Protected Mode context, communicates with this process directly over a separate IPC channel, 1 -&gt; 6 -&gt; 4, to service additional functionality outside the sandbox boundary which is not provided by Reader Broker APIs.</p>
  <p class="BodyLevel1">This process is launched by the Reader Broker Process; it runs with full user rights and independent of the Sandbox context. Also, by default it does not honor any policy restrictions or other security mechanisms. Thus it is the plug-in developer’s responsibility to design and implement it with security in focus; otherwise it can be used to escape the sandbox context.</p>
  <p class="BodyLevel1">Also, this binary along with the description (input and output parameters) of the APIs it exposes have to be submitted to Adobe for code signing. Please note that signature of the plug-in broker executable is verified before launch if the ‘Use only Certified plug-ins’ is checked, so it is the responsibility of the plug-in developer to ensure that this is signed otherwise this would just not work.</p>
  <h4><a name="TOC_SandboxHFT_Public_HFT"></a>SandboxHFT (Public HFT provided by Sandbox Reader for broker extensibility)</h4>
  <p class="BodyLevel1">This HFT contains two APIs which can be called by plug-ins to implement broker extensibility:</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1"><span class="FM_Courier">SbxAppGetIsSandboxed</span>: This public API can be called from any plug-in that imports SandboxHFT to check whether Reader is running with Protected Mode ON or OFF. <br />The prototype for this API is: <br /><span class="FM_Courier">ASBool SbxAppGetIsSandboxed(void);</span></p>
</li>
   <li>
   <p class="FM_Bullet1"><span class="FM_Courier">SbxLaunchPIBrokerExe</span>: This is the public API provided by Sandbox Reader Process to extend broker API at run time. The Plug-in makes a request via the <span class="FM_Courier">SbxLaunchPIBrokerExe</span>&#160;API to start its Plug-in Broker Process and do some initial handshake with it.</p>
</li>
  </ul>
  <p class="BodyLevel1">All the processes placed in <span class="FM_Courier">Reader Install Directory\Reader\plug_ins\pi_brokers</span>&#160;are white listed. Third party plug-in developers must place their Plug-in Broker Processes at this location and can use this HFT. The prototype for this API is:</p>
  <p class="FM_CodeReference">HANDLE SbxLaunchPIBrokerExe(</p>
  <p class="FM_CodeReference">const wchar_t *piBroker // IN:Plug-in Broker Process name</p>
  <p class="FM_CodeReference">);</p>
  <p class="BodyLevel1">It takes the Plug-in Broker Process name in <span style="font-family : 'Courier New'; ">piBroker</span>&#160;as input, looks it up in its process white list, if it succeeds then launches the piBroker Process, and finally establishes IPC channel between the plug-in and piBroker. If everything succeeds, it then returns handle to the underlying IPC mechanism (in this it's the <span class="FM_Courier">NamedPipe</span>) otherwise INVALID_HANDLE_VALUE is returned.</p>
  <p class="BodyLevel1">To aid thrid-party developers in setting up the IPC between Plug-in and Plug-in Broker process (1 -&gt; 6 -&gt; 4), we have provided an API <span style="font-family : 'Courier New'; ">SandboxPISDK::InitSandboxPIBrokerIPCChannel</span>&#160;which launches the PI-Broker (by using above HFT function <span style="font-family : 'Courier New'; ">SbxLaunchPIBrokerExe</span>) and sets up the IPC. See <a href="#XREF_47413_Building_a_plug_in"><span class="FM_HyperText">Building a plug-in</span></a> for more details.</p>
  <p class="BodyLevel1">Please note that there's one more API in this HFT - SbxLaunchPIBrokerExtn which has been deprecated from A11</p>
  <h4><a name="TOC_IPC_channel_between"></a>IPC channel between Plugin and Plugin Broker, 1-&gt;6-&gt;4</h4>
  <p class="BodyLevel1">This is the dedicated IPC channel across which the plug-in and its plug-in broker process communicate. The IPC channel is established at run time, when the Plug-in makes a request via the <span style="font-family : 'Courier New'; ">InitSandboxPIBrokerIPCChannel</span>&#160;API, to start its Plug-in Broker Process. The Reader Broker Process looks up in its process white list and launches the requested Plug-in Broker Process and establishes the IPC channel. This communication channel bypasses the usual 1 -&gt; 2 -&gt; 3 trusted IPC channel between the Plug-in (in Protected Mode Process) and Reader Broker Process and talks directly to the PI Broker Process via 1-&gt;6-&gt;4.</p>
  <h4><a name="TOC_simple_ipc_lib_and"></a>simple-ipc-lib and SandboxPISDK</h4>
  <p class="BodyLevel1"><span class="FM_Courier">simple-ipc-lib</span>: This is a very light weight C++ inter-process communication library. It is used to communicate over the <span class="FM_Courier">NamedPipe</span>. This library needs to be built and linked into both the Plug-in and the Plug-in Broker.</p>
  <p class="BodyLevel1"><span class="FM_Courier">SandboxPISDK</span>: Plug-in developers must use this SDK to implement Broker Extensibility for their Plugin. This SDK abstracts out a lot of internal details and has wrappers and macros to aid developers.</p>
  <h4><a name="TOC_Building_a_plug_in"></a><a name="XREF_47413_Building_a_plug_in"></a>Building a plug-in</h4>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>1.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Add ipc_lib project to the plug-in’s project dependency list and also link to it.</p>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>2.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Add the following headers from the SandboxPISDK into your project:</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet2" style="margin-top  : 4.000pt; margin-bottom : 4.000pt; font-family : 'Courier Std'; font-size  : 10.0pt;"><span class="FM_Courier">SandboxPIIPCDefs.h</span></p>
</li>
   <li>
   <p class="FM_Bullet2" style="margin-top  : 4.000pt; margin-bottom : 4.000pt; font-family : 'Courier Std'; font-size  : 10.0pt;"><span class="FM_Courier">SandboxPIClientDefs.h</span></p>
</li>
   <li>
   <p class="FM_Bullet2" style="margin-top  : 4.000pt; margin-bottom : 4.000pt; font-family : 'Courier Std'; font-size  : 10.0pt;"><span class="FM_Courier">SandboxPISDKClientMacros.h</span></p>
</li>
  </ul>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>3.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Implement <span class="FM_Courier">&lt;plugin&gt;CrossCalls.h</span>&#160;and <span class="FM_Courier">&lt;plugin&gt;IPCClient.cpp</span>&#160;to add the client side of the Plugin specific Broker Extensibility functionality. See <a href="Implement_CrossCalls_make_calls_from_plug-in_to_plug-in’s.htm#XREF_26339_Implement"><span class="FM_HyperText">Implement CrossCalls (make calls from plug-in to plug-in’s broker process)</span></a>.</p>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>4.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Link to the <span class="FM_Courier">sandbox_pisdk_client.lib</span> provided along with SandboxPISDK</p>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>5.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Call the API, <span class="FM_Courier">InitSandboxPIBrokerIPCChannel</span>&#160;provided with SandboxPISDK to setup the IPC channel with your Plugin’s Broker process.</p>
  <h4><a name="TOC_Building_a_Plug_in_s"></a>Building a Plug-in’s Broker Process</h4>
  <p class="FM_StepReset"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>1.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Add <span class="FM_Courier">ipc_lib</span> project to the plug-in’s project dependency list and also link to it.</p>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>2.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Add the following headers from the SandboxPISDK into your project:</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet2" style="margin-top  : 4.000pt; margin-bottom : 4.000pt; font-family : 'Courier Std'; font-size  : 10.0pt;"><span class="FM_Courier">SandboxPIIPCDefs.h</span></p>
</li>
   <li>
   <p class="FM_Bullet2" style="margin-top  : 4.000pt; margin-bottom : 4.000pt; font-family : 'Courier Std'; font-size  : 10.0pt;"><span class="FM_Courier">SandboxPIServerDefs.h</span></p>
</li>
   <li>
   <p class="FM_Bullet2" style="margin-top  : 4.000pt; margin-bottom : 4.000pt; font-family : 'Courier Std'; font-size  : 10.0pt;"><span class="FM_Courier">SandboxPISDKServerMacros.h</span></p>
</li>
  </ul>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>3.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Add the <span class="FM_Courier">SandboxPIServerMain.cpp</span>&#160;to the project </p>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>4.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Implement <span class="FM_Courier">&lt;plugin&gt;IPCServer.cpp</span>&#160;to add the server/broker side of the Plugin Broker Extensibility functionality. See <a href="Implement_CrossCalls_make_calls_from_plug-in_to_plug-in’s.htm#XREF_26339_Implement"><span class="FM_HyperText">Implement CrossCalls (make calls from plug-in to plug-in’s broker process)</span></a>.</p>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>5.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Add<span class="FM_Courier">&#160;ipc_lib </span>project to your &lt;Plugin&gt;Broker project’s dependency list and also link to it.</p>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>6.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Link to the <span class="FM_Courier">sandbox_pisdk_server.lib</span> provided along with SandboxPISDK</p>
  <p class="BodyLevel1">Refer the sample plugin/pluginbroker source code for more details.</p>
  </div>
</body>
</html>