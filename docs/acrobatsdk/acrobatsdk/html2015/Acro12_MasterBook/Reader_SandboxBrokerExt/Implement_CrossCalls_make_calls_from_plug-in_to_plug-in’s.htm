<!DOCTYPE HTML>
<html>
<head>

 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
 <title>Implement CrossCalls (make calls from plug-in to plug-in’s broker process)</title>

 <meta name="generator" content="Adobe FrameMaker 2015" />
 <meta name="Originator" content="ImportMif" />
 <meta name="OriginalFile" content="C:\Users\Perforce\Work\Groups\SDK\main\Documents\Acrobat_SDK\Acrobat_12.0 - Nov 2015\docs_fm\Getting_Started\DevelopingForReader\Reader_SandboxBrokerExt.fm" />
 <link rel="stylesheet" href="Reader_SandboxBrokerExt.css" type="text/css" />


<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>

<script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
<script type="text/javascript" src="../../template/scripts/common.min.js"></script>
<script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
<script type="text/javascript" src="../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = "../..";
gCommonRootRelPath = "../..";
gTopicId = "1.5.5.2";
</script>
 <meta name="brsprev" value="Acro12_MasterBook/Reader_SandboxBrokerExt/Handshake_between_Plug-in_and_Plug-in_Broker.htm">
 <meta name="brsnext" value="Acro12_MasterBook/Reader_SandboxBrokerExt/Getting_Started_with_SampleExtn.htm">
 <meta name="topic-breadcrumbs" content="Introduction to SDK > Developing for Acrobat Reader > Sandbox Broker Extensibility" />
</head>

<body dir="ltr">
<script type="text/javascript" src="../../ehlpdhtm.js"></script>
<div dir="ltr">
  <h3><a name="XREF_26339_Implement"></a>Implement CrossCalls (make calls from plug-in to plug-in’s broker process)</h3>
  <p class="BodyLevel1">The entire purpose of providing Broker Extensibility to Plug-ins is to offer plug-ins a mechanism to make CrossCalls i.e. perform privileged operations that don’t work when called directly from the plug-in, for example, sending messages to HWND, read/write to files/registries, launch any application etc. The plug-in’s broker run under the user rights and doesn’t have any sandbox restrictions as plugin running inside Reader Process has. So when a CrossCall is made, the plugin’s broker performs the same operation on the plugin’s behalf and returns the result to plugin. We are using chrome’s <span class="FM_Courier">simple-ipc-lib</span>&#160;to perform Inter-Process Communication and have written macros to define and make CrossCalls relatively easier.</p>
  <p class="BodyLevel1">Let’s take an example where plugin needs to send <span class="FM_Courier">WM_COPYDATA</span> message to a window.</p>
  <h4><a name="TOC_Changes_required_in_the"></a>Changes required in the plugin (client)</h4>
  <h5>File &lt;plugin&gt;CrossCalls.h</h5>
  <p class="BodyLevel1">Create a unique id for new call and add it in between <span class="FM_Courier">DECLARE_CROSS_CALL_START</span>&#160;and <span class="FM_Courier">DECLARE_CROSS_CALL_END:</span></p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DECLARE_CROSS_CALL_START</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CROSS_CALL_ID(&lt;UniqueId1&gt;)</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CROSS_CALL_ID(&lt;UniqueId2&gt;)</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CROSS_CALL_ID(&lt;UniqueIdN&gt;)</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CROSS_CALL_ID(SbxPISendMessage)</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DECLARE_CROSS_CALL_END</p>
  <p class="BodyLevel1">Now the <span class="FM_Courier">INPUT PARAMETERS</span>&#160;(params that are passed from plugin to broker) and <span class="FM_Courier">OUTPUT PARAMERERS</span>&#160;(params that are returned from broker to plugin) and their order need to be defined.</p>
  <p class="BodyLevel1">Macros <span class="FM_Courier">DEFINE_IPC_MSG_CLIENT(&lt;UniqueId&gt;, &lt;numOfInputParams&gt;)</span>&#160;and <span class="FM_Courier">DEFINE_IPC_MSG_SERVER(&lt;UniqueId&gt;, &lt;numOfOutputParams&gt;)</span>&#160;have been designed exactly for this purpose. For<span class="FM_Courier">&#160;SbxPISendMessage </span>CrossCall, the 4 input parameters are <span class="FM_Courier">HWND</span>&#160;(passed as <span class="FM_Courier">VoidPtr</span>), <span class="FM_Courier">MsgType</span>&#160;(passed as <span class="FM_Courier">UINT</span>), <span class="FM_Courier">WPARAM</span>&#160;(passed as <span class="FM_Courier">UINT</span>), and <span class="FM_Courier">buffer</span>&#160;(passed as <span class="FM_Courier">ByteArray</span>), and 2 output parameters are result – retrun value of <span class="FM_Courier">SendMessage</span>&#160;call (passed as <span class="FM_Courier">UINT</span>) and <span class="FM_Courier">LastError</span>&#160;– <span class="FM_Courier">GetLastError</span>&#160;result after <span class="FM_Courier">SendMessage</span>&#160;(passed as <span class="FM_Courier">UINT</span>). </p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DEFINE_IPC_MSG_CLIENT(SbxPISendMessage, 4) {</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;INPUT_PARAM_VOID_PTR(1)</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;INPUT_PARAM_UINT(2)</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;INPUT_PARAM_UINT(3)</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;INPUT_PARAM_BUFFER(4)</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;};</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DEFINE_IPC_MSG_SERVER(SbxPISendMessage, 2) {</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;OUTPUT_PARAM_UINT(1)</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;OUTPUT_PARAM_UINT(2)</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference">};</p>
  <p class="BodyLevel1">The following IPC data types are supported (as defined in files <span class="FM_Courier">SandboxPISDKClientMacros.h</span>&#160;and <span class="FM_Courier">SandboxPISDKServerMacros.h</span>) :-</p>
  <p class="FM_CodeReference">INPUT_PARAM_VOID_PTR - for void*</p>
  <p class="FM_CodeReference">INPUT_PARAM_INT - int</p>
  <p class="FM_CodeReference">INPUT_PARAM_UINT - unsigned int</p>
  <p class="FM_CodeReference">INPUT_PARAM_LONG - long</p>
  <p class="FM_CodeReference">INPUT_PARAM_ULONG - unsigned long</p>
  <p class="FM_CodeReference">INPUT_PARAM_STRING - std::string</p>
  <p class="FM_CodeReference">INPUT_PARAM_WSTRING - std::wstring</p>
  <p class="FM_CodeReference">INPUT_PARAM_BUFFER - ipc::ByteArray</p>
  <p class="FM_CodeReference">OUTPUT_PARAM_VOID_PTR - for void*</p>
  <p class="FM_CodeReference">OUTPUT_PARAM_INT - int</p>
  <p class="FM_CodeReference">OUTPUT_PARAM_UINT - unsigned int</p>
  <p class="FM_CodeReference">OUTPUT_PARAM_LONG - long</p>
  <p class="FM_CodeReference">OUTPUT_PARAM_ULONG - unsigned long</p>
  <p class="FM_CodeReference">OUTPUT_PARAM_STRING - std::string</p>
  <p class="FM_CodeReference">OUTPUT_PARAM_WSTRING - std::wstring</p>
  <p class="FM_CodeReference">OUTPUT_PARAM_BUFFER - ipc::ByteArray</p>
  <h5>File &lt;plugin&gt;IPCClient.cpp</h5>
  <p class="BodyLevel1">In this file, the entire client side of the CrossCall needs to be defined. Macro <span class="FM_Courier">DEFINE_CLIENT_CROSS_CALL(&lt;UniqueId&gt;, &lt;numOfInputParams&gt;, &lt;numOfOutputParams&gt;)</span>&#160;does all the work of generating the requisite class (client side).</p>
  <p class="FM_CodeReference">DEFINE_CROSS_CALL_CLIENT(SbxPISendMessage, 4, 2)</p>
  <p class="BodyLevel1">So once you have defined the cross call by using above macro, you have to use macro <span class="FM_Courier">MAKE_CROSS_CALL() and MAKE_CROSS_CALL_WITH_RETURN_VAL()</span>&#160;to call the function at the broker end. Whenever any UI is involved at the broker end and window handle from Plug-in is passed to the <span class="FM_Courier">PIBroker</span>, the macro <span class="FM_Courier">MAKE_CROSS_CALL_WITH_MSG_PUMP()</span>&#160;or <span class="FM_Courier">MAKE_CROSS_CALL_WITH_MSG_PUMP_AND_RETURN_VAL()</span>&#160;can be used which ensures that all UI messages from <span class="FM_Courier">PIBroker</span>&#160;to the Plug-in. Remember, the order of input and output parameters have to be exactly same as defined in <span class="FM_Courier">&lt;plugin&gt;CrossCalls.h</span>&#160;header file. Also, note that the input parameters are passed as const reference and output parameters are passed as reference.</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bool return_value = false;</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;MAKE_CROSS_CALL_WITH_RETURN_VAL(SbxPISendMessage, return_value)(static_cast&lt;LPVOID&gt;(hWnd), msgType, wParam, ByteArrayBuffer, outRetVal, outLastErr);</p>
  <h4><a name="TOC_Changes_required_in_the1"></a>Changes required in the plugin’s broker (server)</h4>
  <h5>File &lt;plugin&gt;IPCServer.cpp</h5>
  <p class="BodyLevel1">In this file, the entire server side of the CrossCall needs to be defined. Macro <span class="FM_Courier">DEFINE_SERVER_CROSS_CALL_START(&lt;UniqueId&gt;, &lt;numOfInputParams&gt;, &lt;numOfOutputParams&gt;)</span> does all the work of generating the requisite server side class:</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DEFINE_SERVER_CROSS_CALL_START(SbxPISendMessage, 4, 2)</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;virtual void Proc(const LVOID&amp; input1, const UINT&amp; input2, const UINT&amp; input3, ipc::ByteArray &amp;input4, UINT&amp; out1, UINT&amp; out2)</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;LRESULT result = 0;</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;HWND hWnd = static_cast&lt;HWND&gt;(input1);</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#160;likewise take other parameters and make them ready to be passed to</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// SendMessage</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;result = SendMessage(hWnd, WM_CPYDATA, &lt;other parameters&gt;);</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;out1 = (result == FALSE) ? 0 : 1;</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;out2 = GetLastError();</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DEFINE_CROSS_CALL_SERVER_END</p>
  <p class="BodyLevel1">Please note that if Proc above raises any exception then it will be eaten away by the internal implementation, so you need to use your own try catch block if you want to pass on any exception raised here to the plug-in.</p>
  <p class="BodyLevel1">And finally use the <span class="FM_Courier">MACRO - ADD_MSG_HANDLER</span>&#160;to add above Cross all Proc to list of message handlers so that whenever <span class="FM_Courier">SbxPISendMessage</span>&#160;message arrives at the <span class="FM_Courier">PIBroker</span>&#160;end, it can be appropriately routed to its Proc.</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;DEFINE_CROSS_CALL_HANDLER_START(&lt;Plugin-Name&gt;)</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ADD_MSG_HANDLER(&lt;Cross-Call UniqueId1&gt;)</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ADD_MSG_HANDLER(&lt;Cross-Call UniqueId2&gt;)</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ADD_MSG_HANDLER(SbxPISendMessage)</p>
  <p class="FM_CodeReference"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DEFINE_CROSS_CALL_HANDLER_END</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference">&nbsp;</p>
  </div>
</body>
</html>