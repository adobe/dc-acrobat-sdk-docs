<!DOCTYPE HTML>
<html>
<head>

 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
 <title>Tips for translating JavaScript to JSObject</title>

 <meta name="generator" content="Adobe FrameMaker 2015" />
 <meta name="Originator" content="ImportMif" />
 <meta name="OriginalFile" content="C:\Users\Perforce\Work\Groups\SDK\main\Documents\Acrobat_SDK\Acrobat_12.0 - Nov 2015\docs_fm\InterApplication_Communication\IACOverview\IAC_DevApp_OLE_Support.fm" />
 <link rel="stylesheet" href="IAC_DevApp_OLE_Support.css" type="text/css" />


<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>

<script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
<script type="text/javascript" src="../../template/scripts/common.min.js"></script>
<script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
<script type="text/javascript" src="../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = "../..";
gCommonRootRelPath = "../..";
gTopicId = "6.1.2.4.0_5";
</script>
 <meta name="brsprev" value="Acro12_MasterBook/IAC_DevApp_OLE_Support/Spell-checking_a_document.htm">
 <meta name="brsnext" value="Acro12_MasterBook/IAC_DevApp_OLE_Support/Other_development_topics.htm">
 <meta name="topic-breadcrumbs" content="Acrobat Interapplication Communication > Developing Applications Using Interapplication Communication > Using OLE > Using the JSObject interface" />
</head>

<body dir="ltr">
<script type="text/javascript" src="../../ehlpdhtm.js"></script>
<div dir="ltr">
  <h3><a name="IX_translating_JavaScript"></a><a name="IX_JavaScript_tips"></a><a name="IX_translating_to_JSObject"></a>Tips for translating JavaScript to JSObject</h3>
  <p class="BodyLevel1">Covering every method available to <span class="FM_Courier">JSObject</span>&#160;is beyond the scope of this document. However, the <a href="../JS_API_AcroJSPreface/JS_API_AcroJSPreface.htm#XREF_87228_JavaScript_for"><span class="FM_HyperText">JavaScript for Acrobat API Reference</span></a>&#160;covers the subject in detail, and much can be inferred from the reference by keeping a few basic facts in mind:</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1">Most of the objects and methods in the reference are available in Visual Basic, but not all. In particular, any JavaScript object that requires the <span class="FM_Courier">new</span>&#160;operator for construction cannot be created in Visual Basic. This includes the <span class="FM_Courier">Report</span> object.</p>
</li>
   <li>
   <p class="FM_Bullet1">The <span class="FM_Courier">Annots</span>&#160;object is unusual in that it requires <span class="FM_Courier">JSObject</span>&#160;to set and get its properties as a separate object using the <span class="FM_Courier">getProps</span>&#160;and <span class="FM_Courier">setProps</span> methods.</p>
</li>
   <li>
   <p class="FM_Bullet1">If you are unsure what type to use to declare a variable, declare it as a Variant. This gives Visual Basic more flexibility for type conversion, and helps prevent runtime errors.</p>
</li>
   <li>
   <p class="FM_Bullet1"><span class="FM_Courier">JSObject</span>&#160;cannot add new properties, methods, or objects to JavaScript. Due to this limitation, the <span class="FM_Courier">global.setPersistent</span> property is not meaningful.</p>
</li>
   <li>
   <p class="FM_Bullet1"><a name="IX_case_sensitivity"></a><span class="FM_Courier">JSObject</span> is case-insensitive. Visual Basic often capitalizes leading characters of an identifier and prevents you from changing its case. Don't be concerned about this, since <span class="FM_Courier">JSObject</span>&#160;ignores case when matching the identifier to its JavaScript equivalent.</p>
</li>
   <li>
   <p class="FM_Bullet1"><span class="FM_Courier">JSObject</span>&#160;always returns values as Variants. This includes property gets as well as return values from method calls. An empty Variant is used when a null return value is expected. When <span class="FM_Courier">JSObject</span>&#160;returns an array, each element in the array is a Variant. To determine the actual data type of a Variant, use the utility functions <span class="FM_Courier">IsArray</span>, <span class="FM_Courier">IsNumeric</span>, <span class="FM_Courier">IsEmpty</span>, <span class="FM_Courier">IsObject</span>, and <span class="FM_Courier">VarType</span>&#160;from the Information module of the Visual Basic for Applications (VBA) library.</p>
</li>
   <li>
   <p class="FM_Bullet1"><span class="FM_Courier">JSObject</span>&#160;can process most elemental Visual Basic types for setting properties and for and input parameters for method calls, including Variant, Array, Boolean, String, Date, Double, Long, Integer, and Byte. <span class="FM_Courier">JSObject</span>&#160;can accept Object parameters, but only when the Object is the result of a property get or method call to a <span class="FM_Courier">JSObject</span>. <span class="FM_Courier">JSObject</span>&#160;fails to accept values of type Error and Currency. </p>
</li>
  </ul>
  </div>
</body>
</html>