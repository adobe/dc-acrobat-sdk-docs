<!DOCTYPE HTML>
<html>
<head>

 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
 <title>Windows techniques</title>

 <meta name="generator" content="Adobe FrameMaker 2015" />
 <meta name="Originator" content="ImportMif" />
 <meta name="OriginalFile" content="C:\Users\Perforce\Work\Groups\SDK\main\Documents\Common\docs_fm\PluginAppsDeveloperGuide\Plugins_CreatingSimplePlug.fm" />
 <link rel="stylesheet" href="Plugins_CreatingSimplePlug.css" type="text/css" />


<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>

<script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
<script type="text/javascript" src="../../template/scripts/common.min.js"></script>
<script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
<script type="text/javascript" src="../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = "../..";
gCommonRootRelPath = "../..";
gTopicId = "2.1.3.1.1";
</script>
 <meta name="brsprev" value="Acro12_MasterBook/Plugins_CreatingSimplePlug/Portability_techniques.htm">
 <meta name="brsnext" value="Acro12_MasterBook/Plugins_CreatingSimplePlug/Mac_OS_techniques.htm">
 <meta name="topic-breadcrumbs" content="Plug-ins and Applications > Overview > Creating Plug-in and PDF Library Applications > Working with platform-specific techniques" />
</head>

<body dir="ltr">
<script type="text/javascript" src="../../ehlpdhtm.js"></script>
<div dir="ltr">
  <h3><a name="XREF_75852_Windows_Techniques"></a>Windows techniques</h3>
  <p class="BodyLevel1">This section contains information necessary to implement plug-ins under Windows.</p>
  <h4><a name="TOC_Developing_a_Windows"></a><a name="IX_AcroSDKPIDir"></a>Developing a Windows plug-ins&#160;</h4>
  <p class="BodyLevel1">You can put your plug-ins in the default <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;plug-in location the plug_ins folder (in the same directory as the <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;executable). </p>
  <p class="BodyLevel1">You are encouraged to use the plug-in samples BasicUI and Starter as a basis for developing plug-ins. These samples have all of the appropriate project settings. The Starter sample only builds a loadable plug-in while the BasicUI sample adds menu items.</p>
  <h4><a name="TOC_Locating_and_loading"></a><a name="IX_enabling_for_Adobe_Reader_1"></a><a name="IX_Adobe_certified_plug_ins"></a><a name="IX_PluginUnload_procedure_1"></a><a name="IX_LoadLibrary_method"></a><a name="IX_DLL_PROCESS_ATTACH"></a><a name="IX_DLL_PROCESS_DETACH"></a><a name="IX_PlugInMain_symbol"></a>Locating and loading plug-ins</h4>
  <p class="BodyLevel1">When <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>&#160;starts, it scans the plug_ins folder (in the same directory as the <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;executable) for DLLs with the extension .API. <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>&#160;also searches nested directories, allowing you to group plug-ins in folders. When it locates a file with the extension .API, it looks for the <span class="FM_Courier">PlugInMain</span>&#160;exported symbol, which specifies the entry point for your plug-in. <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>&#160;loads the plug-in by invoking the <span class="FM_Courier">LoadLibrary</span>&#160;function and then calls the function referenced by the <span class="FM_Courier">PlugInMain</span> symbol.</p>
  <p class="BodyLevel1">The <span class="FM_Courier">LoadLibrary</span>&#160;function calls your plug-in’s <span class="FM_Courier">DLLMain</span>&#160;entry point with the parameter <span class="FM_Courier">DLL_PROCESS_ATTACH</span>&#160;passed. Your plug-in can run some initialization code in DLLMain, such as allocating memory, before its <span class="FM_Courier">PluginMain</span>&#160;function is called by <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>. </p>
  <p class="BodyLevel1">If you allocate memory in your plug-in’s <span class="FM_Courier">DLLMain</span>&#160;entry point, it must de-allocate that memory when <span class="FM_Courier">DLLMain</span>&#160;is called with <span class="FM_Courier">DLL_PROCESS_DETACH</span>. If your plug-in relies on its implementation of the <span class="FM_Courier">PluginUnload</span>&#160;function to de-allocate memory, it could fail if <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>&#160;unloads the plug-in immediately without calling the plug-in’s handshaking callbacks. This would happen in the following situations: </p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1">If the plug-in is not Adobe-certified and the user has specified the Certified Plug-ins Only option in the Preferences settings.</p>
</li>
   <li>
   <p class="FM_Bullet1">If the plug-in is running under <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>, but it is not enabled for <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>. This could potentially cause a crash when <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable> closes.</p>
</li>
  </ul>
  <h4><a name="TOC_Why_a_plug_in_might_not"></a>Why a plug-in might not load</h4>
  <p class="BodyLevel1">There are several reasons why a plug-in may not load successfully:</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1">The plug-in’s filename extension was not changed from .dll to .api.</p>
</li>
   <li>
   <p class="FM_Bullet1">Too many plug-ins are being loaded by either <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>. The number of plug-ins that can be loaded at any one time depends on the code generation settings of all loaded plug-ins. </p>
</li>
   <li>
   <p class="FM_Bullet1">The plug-in attempts to register with the same <span class="FM_Courier">extensionName</span>&#160;as another plug-in that has already loaded. In this case, <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable> displays an error message indicating the problem.</p>
</li>
   <li>
   <p class="FM_Bullet1">You cloned your project from an existing plug-in project that uses a .def file and forgot to change the <span class="FM_Courier">LIBRARY</span> entry in the .def file.</p>
</li>
   <li>
   <p class="FM_Bullet1">The DLL is bad. This can occur even if the plug-in compiled and linked without errors. Generally, rebuilding the plug-in completely (doing a Rebuild All) solves the problem.</p>
</li>
  </ul>
  <h4><a name="TOC_Macros_and_project"></a><a name="IX_PlugInMain_symbol_1"></a>Macros and project settings&#160;</h4>
  <p class="BodyLevel1">The following macros must be defined or set in your preprocessor definitions:</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1"><span class="FM_Courier">WIN_ENV</span>&#160;</p>
</li>
   <li>
   <p class="FM_Bullet1" style="margin-top  : 4.000pt; margin-bottom : 4.000pt; font-family : 'Courier Std'; font-size  : 10.0pt;"><span class="FM_Courier">WIN_PLATFORM (preferred)</span></p>
</li>
   <li>
   <p class="FM_Bullet1"><span class="FM_Courier">WIN32</span>&#160;</p>
</li>
   <li>
   <p class="FM_Bullet1"><span class="FM_Courier">WINDOWS</span>&#160;</p>
</li>
  </ul>
  <p class="BodyLevel1">For a plug-in to be loaded, it must export the symbol <span class="FM_Courier">PlugInMain</span>. This task can be accomplished by including a .def file in the project for the plug-in or by including the line <span class="FM_Courier">/EXPORT:PlugInMain</span>&#160;in the project settings for the plug-in. If you are developing an <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>&#160;plug-in, you also must define a macro to access HFTs available to <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>. (See <a href="../Plugins_ReaderPlug/Creating_an_Acrobat_Reader_Plug-In.htm#XREF_11144_Creating_an_Adobe">Creating an Acrobat&amp;nbsp;Reader Plug-In</a>.)</p>
  <h4><a name="TOC_Interapplication3"></a><a name="IX_interapplication_3"></a><a name="IX_ActiveX"></a>Interapplication communication</h4>
  <p class="BodyLevel1">Plug-ins can add their own DDE messages to those supported by <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>&#160;by registering to receive DDE messages directly. The DDEClnt sample in the <uservariable x-value="Acrobat&nbsp;DC&nbsp;SDK" x-showvalue="TRUE" name="AcrobatSDKProd" x-format="AcrobatSDKProd">Acrobat&nbsp;DC&nbsp;SDK</uservariable> shows how to do this.</p>
  <p class="BodyLevel1">A plug-in cannot implement OLE automation or be an ActiveX server through the use of MFC. This is because <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>&#160;uses MFC to implement its OLE automation and there cannot be two MFC-based OLE automation servers in the same process. OLE or ActiveX server plug-ins must be implemented using the ActiveX Template Library. Plug-ins should use the DDEML library to handle DDE messages. Problems may arise if they do not.</p>
  <h4><a name="TOC_Debugging"></a><a name="IX_breakpoints"></a><a name="IX_debugging"></a>Debugging</h4>
  <p class="BodyLevel1">Generally, the debugger built into Visual C++ is adequate to debug plug-ins. Debugging a Windows plug-in compiled with Visual C++ is quite simple if you remember a few things:</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1">Specify the <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable> plug-in directory under the link | output tab in the Project Settings dialog box.</p>
</li>
   <li>
   <p class="FM_Bullet1">Specify the <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>&#160;executable under the executable for debug session in the Project Settings dialog box.</p>
</li>
   <li>
   <p class="FM_Bullet1">The first time you build a plug-in, do a Rebuild All.</p>
</li>
   <li>
   <p class="FM_Bullet1">Set breakpoints in your source code by selecting the line and clicking the hand icon or pressing the F9 key.</p>
</li>
   <li>
   <p class="FM_Bullet1">After setting breakpoints, press the F5 key to have Microsoft Visual Studio start <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>. </p>
</li>
  </ul>
  <p class="BodyLevel1">Two common reasons why breakpoints may not be hit are:</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1">You started <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>&#160;from the File Manager or Program Manager. <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable> must be started from within Microsoft Visual Studio to debug plug-ins.</p>
</li>
   <li>
   <p class="FM_Bullet1">You copied your plug-in into <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>’s plug-in directory, instead of specifying the plug-in directory in the Link | Output dialog box.</p>
</li>
  </ul>
  <h4><a name="TOC_Handling_the_thread"></a><a name="IX_thread_local_storage"></a>Handling the thread local storage (TLS) limit</h4>
  <p class="BodyLevel1">There is a limit to the number of plug-ins that <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>&#160;can load at any given time. This is due to a limitation of the multi-threading model used by the Win32 API and is dependent on the code generation settings of the plug-ins being loaded. </p>
  <p class="BodyLevel1">The following information can help maximize the ability of <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;and <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable> to load plug-ins.</p>
  <p class="BodyLevel1">When a process is created, an array of bit flags is allocated for the management of thread-specific data. In the current Win32 implementation, this array is limited to 64 members or TLS slots. Every DLL/plug-in that uses thread local storage is allocated at least one slot when loaded using LoadLibrary. This includes system DLLs, plug-ins, and all the DLLs they load. When all of the TLS slots have been occupied for a process, LoadLibrary will fail for any DLL requiring a TLS slot.</p>
  <p class="BodyLevel1">The following guidelines will minimize the TLS slots occupied by plug-ins:</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1">Plug-ins that are not multi-threaded should only link with the single-threaded run-time libraries that do not occupy a TLS slot.</p>
</li>
   <li>
   <p class="FM_Bullet1">If your plug-in is multi-threaded, consider linking it with the multi-threaded DLL run-time library. Both the DLL and static versions of the run-time libraries occupy a TLS slot. However, many plug-ins shipped with <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>&#160;use the DLL version so the run-time DLL does not occupy another TLS slot after it is loaded by the process.</p>
</li>
  </ul>
  <p class="FM_Note"><span class="FM_Z_NoteCaution">Note:<span style="padding-left: 4pt;" class="FMAutoNumber_1"></span></span><uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;and <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>&#160;do not currently generate an error when a plug-in fails to load due to the TLS limit.</p>
  <h4><a name="TOC_Using_modal_dialog_boxes"></a><a name="IX_modal_dialog_boxes"></a><a name="IX_dialog_boxes"></a>Using modal dialog boxes</h4>
  <p class="BodyLevel1">If you write plug-ins that contain modal dialog boxes on the Windows platform, you need to perform the following steps:</p>
  <p class="FM_StepReset"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>1.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>When you are creating your dialog box, get the parent <span class="FM_Courier">HWND</span>&#160;of the dialog box using the <span class="FM_Courier">WinAppGetModalParent</span>&#160;method. Then use this <span class="FM_Courier">HWND</span>&#160;when creating the dialog box. </p>
  <p class="FM_Indent1">Ensure that you get the mouse capture before putting up your dialog box so that <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>&#160;does not receive the mouse clicks. After your dialog box returns, set the mouse capture back.</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>HWND CapturehWnd, hParent;</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>CapturehWnd = GetCapture();</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>if ( CapturehWnd != NULL )</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ReleaseCapture();</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>hParent = WinAppGetModalParent(AVAppGetActiveDoc());</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>nRetVal = DialogBox(gHINSTANCE, MAKEINTRESOURCE(IDD_PROPS), hParent,</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>PropsDialogProc);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>if ( CapturehWnd != NULL )</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>SetCapture( CapturehWnd );</p>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>2.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>As soon as you have an <span class="FM_Courier">HWND</span>&#160;for the dialog box itself, usually in response to the <span class="FM_Courier">WM_INITDIALOG</span>&#160;message, you should acquire a new <span class="FM_Courier">AVWindow</span>&#160;using the <span class="FM_Courier">AVWindowNewFromPlatformThing</span>&#160;method. Save this <span class="FM_Courier">AVWindow</span>&#160;in some place where you can access it when the dialog box is destroyed. Then pass the <span class="FM_Courier">AVWindow</span>&#160;to the <span class="FM_Courier">AVAppBeginModal</span> method.</p>
  <p class="FM_Indent1">Here is code that is called in response to a <span class="FM_Courier">WM_INITDIALOG</span> message:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>static AVWindow sAVWin;</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>.....</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>// hWnd is the window handle of the dialog box window</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>sAVWin = AVWindowNewFromPlatformThing(AVWLmodal, 0, NULL,</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>gExtensionID, hWnd);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>AVAppBeginModal(sAVWin);</p>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>3.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>At the time the dialog box is destroyed, usually in response to a <span class="FM_Courier">WM_DESTROY</span>&#160;message, end the modal operations using <span class="FM_Courier">AVAppEndModal</span>. If you are not using MFC, destroy the AVWindow for which you saved the handle with <span class="FM_Courier">AVWindowDestroy</span>. Here is a section of code called in response to a <span class="FM_Courier">WM_DESTROY</span> message:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>AVAppEndModal();</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>AVWindowDestroy(sAVWin);</p>
  <p class="BodyLevel1">If you are using MFC to put up your dialog box, do not call<span class="FM_Courier"> AVWindowDestroy</span>&#160;in the <span class="FM_Courier">WM_DESTROY</span>&#160;message. MFC will cause <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable> to destroy the AVWindow automatically.</p>
  </div>
</body>
</html>