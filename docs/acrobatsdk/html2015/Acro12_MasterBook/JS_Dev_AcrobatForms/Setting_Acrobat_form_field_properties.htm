<!DOCTYPE HTML>
<html>
<head><meta http-equiv="refresh" content="2;url=https://opensource.adobe.com/dc-acrobat-sdk-docs/acrobatsdk/" /><meta name="robots" content="noindex, nofollow">

 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
 <title>Setting Acrobat form field properties</title>

 <meta name="generator" content="Adobe FrameMaker 2015" />
 <meta name="Originator" content="ImportMif" />
 <meta name="OriginalFile" content="C:\Users\Perforce\Work\Groups\SDK\main\Documents\Acrobat_SDK\Acrobat_12.0 - Nov 2015\docs_fm\JavaScript\AcroJSGuide\JS_Dev_AcrobatForms.fm" />
 <link rel="stylesheet" href="JS_Dev_AcrobatForms.css" type="text/css" />


<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>

<script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
<script type="text/javascript" src="../../template/scripts/common.min.js"></script>
<script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
<script type="text/javascript" src="../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = "../..";
gCommonRootRelPath = "../..";
gTopicId = "5.1.6.1.2";
</script>
 <meta name="brsprev" value="Acro12_MasterBook/JS_Dev_AcrobatForms/Creating_Acrobat_form_fields.htm">
 <meta name="brsnext" value="Acro12_MasterBook/JS_Dev_AcrobatForms/Task-based_topics.htm">
 <meta name="topic-breadcrumbs" content="JavaScript > Developing Acrobat Applications Using JavaScript > Using JavaScript in Forms > Forms essentials" />
</head>

<body dir="ltr">
<script type="text/javascript" src="../../ehlpdhtm.js"></script>
<div dir="ltr">
  <h3><a name="XREF_13510_Setting_Form_Field"></a>Setting <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable> form field properties</h3>
  <p class="BodyLevel1">Javascript provides a large number of properties and methods for determining the appearance and associated actions of form fields. In this section you will learn what properties and methods are available, and how to write scripts that control the appearance and behavior of form fields.</p>
  <p class="BodyLevel1">The list of topics in this section is:</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1"><a href="#XREF_37986_Field_Properties"><span class="FM_HyperText">Field properties</span></a>&#160;</p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_28613_Changing_Button"><span class="FM_HyperText">Button fields</span></a>&#160;</p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_85887_Changing_Checkbox"><span class="FM_HyperText">Check box fields</span></a>&#160;</p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_44065_Changing_Combobox"><span class="FM_HyperText">Combo box fields</span></a>&#160;</p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_53749_Changing_Listbox"><span class="FM_HyperText">List box fields</span></a>&#160;</p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_34428_Changing_Radio"><span class="FM_HyperText">Radio button fields</span></a>&#160;</p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_61295_Signature"><span class="FM_HyperText">Signature fields</span></a>&#160;</p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_64180_Changing_Text"><span class="FM_HyperText">Text fields</span></a>&#160;</p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_34131_Validation_Options"><span class="FM_HyperText">Validation scripts</span></a>&#160;</p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_68521_Calculation_Options"><span class="FM_HyperText">Calculation script</span></a>&#160;</p>
</li>
  </ul>
  <p class="FM_TableAnchor">&nbsp;</p>
  <h4><a name="TOC_Field_properties"></a><a name="XREF_37986_Field_Properties"></a>Field properties</h4>
  <p class="BodyLevel1">A form field has certain properties that determines its appearance, printability, orientation, and the actions performed when the user interacts with it. Some properties are common to all form fields, while others are particular to certain types of fields. The properties of a field can be set not only through the UI, but also programmatically with JavaScript. </p>
  <p class="BodyLevel1"><a name="IX_accessing_1"></a><a name="IX_getting_the_Field_object"></a><a name="IX_form_field"></a><a name="IX_getField"></a><a name="IX_name"></a>The most basic property of every form field is its name, which provides the reference necessary for subsequent access and modification. The key to setting the properties of a field is to first acquire the Field object of that field using its name; this is done using the <span class="FM_Courier">getField</span> method of the Doc object:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var f = this.getField(&quot;myField&quot;);</p>
  <p class="BodyLevel1"><a name="IX_add_a_field"></a><a name="IX_addField_1"></a>The <span class="FM_Courier">getField</span>&#160;method takes as its argument the field name of the target field. The Field object can be obtained using other methods as well, for example, the <span class="FM_Courier">addField</span>&#160;method returns the Field object of the field it just created.</p>
  <p class="BodyLevel1">General properties that apply to all form fields include the display rectangle, border style, border line thickness, stroke color, orientation, background color, and tooltip. In addition, you can choose whether it should be read only, have the ability to scroll, and be visible on screen or in print.</p>
  <p class="BodyLevel1">There are also specific settings you can apply to text characteristics, button and icon size and position relationships, button appearance when pushed, check box and radio button glyph appearance, and the number and selection options for combo box and list box items.</p>
  <p class="BodyLevel1">All formatting options are listed and described in the following table.</p>
  <p class="FM_Z_Caption"><a name="IX_properties_2"></a><a name="IX_properties_1"></a>Field properties</p>
<div width="100%" align="left">
  <table dir="ltr" style=" border-spacing:0; padding-left:4.00pt; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:4.00pt; float:alignleft; width:100%; direction:ltr; max-width:460.80pt;" cellspacing="0">
   <tr style=" height : 20.50pt;">
   <th style="width : 95.040pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-left-style: solid; border-left-width: 0px; border-left-color: #999999; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableHead">Property</p>
</th>
   <th style="width : 232.560pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableHead">Description</p>
</th>
   <th style="width : 133.200pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableHead">Field properties</p>
</th>
</tr>
   <tr style=" height : 20.50pt;">
   <td style="width : 95.040pt; border-left-style: solid; border-left-width: 0px; border-left-color: #999999; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">display rectangle</p>
</td>
   <td style="width : 232.560pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Position and size of field on page.</p>
</td>
   <td style="width : 133.200pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">rect</p>
</td>
</tr>
   <tr style=" height : 20.50pt;">
   <td style="width : 95.040pt; border-left-style: solid; border-left-width: 0px; border-left-color: #999999; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">border style</p>
</td>
   <td style="width : 232.560pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Rectangle border appearance.</p>
</td>
   <td style="width : 133.200pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">borderStyle</p>
</td>
</tr>
   <tr style=" height : 20.50pt;">
   <td style="width : 95.040pt; border-left-style: solid; border-left-width: 0px; border-left-color: #999999; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">stroke color</p>
</td>
   <td style="width : 232.560pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Color of bounding rectangle.</p>
</td>
   <td style="width : 133.200pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">strokeColor</p>
</td>
</tr>
   <tr style=" height : 20.50pt;">
   <td style="width : 95.040pt; border-left-style: solid; border-left-width: 0px; border-left-color: #999999; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">border thickness</p>
</td>
   <td style="width : 232.560pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Width of the edge of the surrounding rectangle.</p>
</td>
   <td style="width : 133.200pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">lineWidth</p>
</td>
</tr>
   <tr style=" height : 20.50pt;">
   <td style="width : 95.040pt; border-left-style: solid; border-left-width: 0px; border-left-color: #999999; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">orientation</p>
</td>
   <td style="width : 232.560pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Rotation of field in 90-degree increments.</p>
</td>
   <td style="width : 133.200pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">rotation</p>
</td>
</tr>
   <tr style=" height : 33.00pt;">
   <td style="width : 95.040pt; border-left-style: solid; border-left-width: 0px; border-left-color: #999999; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">background color</p>
</td>
   <td style="width : 232.560pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Background color of field (gray, transparent, RGB, or CMYK).</p>
</td>
   <td style="width : 133.200pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">fillColor</p>
</td>
</tr>
   <tr style=" height : 33.00pt;">
   <td style="width : 95.040pt; border-left-style: solid; border-left-width: 0px; border-left-color: #999999; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">tooltip</p>
</td>
   <td style="width : 232.560pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Short description of field that appears on mouse-over.</p>
</td>
   <td style="width : 133.200pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">userName</p>
</td>
</tr>
   <tr style=" height : 20.50pt;">
   <td style="width : 95.040pt; border-left-style: solid; border-left-width: 0px; border-left-color: #999999; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">read only</p>
</td>
   <td style="width : 232.560pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Whether the user may change the field contents.</p>
</td>
   <td style="width : 133.200pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">readonly</p>
</td>
</tr>
   <tr style=" height : 20.50pt;">
   <td style="width : 95.040pt; border-left-style: solid; border-left-width: 0px; border-left-color: #999999; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">scrolling</p>
</td>
   <td style="width : 232.560pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Whether text fields may scroll.</p>
</td>
   <td style="width : 133.200pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">doNotScroll</p>
</td>
</tr>
   <tr style=" height : 20.50pt;">
   <td style="width : 95.040pt; border-left-style: solid; border-left-width: 0px; border-left-color: #999999; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">display</p>
</td>
   <td style="width : 232.560pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Whether visible or hidden on screen or in print.</p>
</td>
   <td style="width : 133.200pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">display</p>
</td>
</tr>
   <tr style=" height : 80.00pt;">
   <td style="width : 95.040pt; border-left-style: solid; border-left-width: 0px; border-left-color: #999999; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">text</p>
</td>
   <td style="width : 232.560pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Font, color, size, rich text, comb format, multiline, limit to number of characters, file selection format, or password format.</p>
</td>
   <td style="width : 133.200pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">textFont, textColor, textSize, richText,<br />richValue, comb, multiline,<br />charLimit, fileSelect, password</p>
</td>
</tr>
   <tr style=" height : 20.50pt;">
   <td style="width : 95.040pt; border-left-style: solid; border-left-width: 0px; border-left-color: #999999; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">text alignment</p>
</td>
   <td style="width : 232.560pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Text layout in text fields.</p>
</td>
   <td style="width : 133.200pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">alignment</p>
</td>
</tr>
   <tr style=" height : 32.00pt;">
   <td style="width : 95.040pt; border-left-style: solid; border-left-width: 0px; border-left-color: #999999; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">button alignment</p>
</td>
   <td style="width : 232.560pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Alignment of icon on button face.</p>
</td>
   <td style="width : 133.200pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">buttonAlignX, buttonAlignY</p>
</td>
</tr>
   <tr style=" height : 44.00pt;">
   <td style="width : 95.040pt; border-left-style: solid; border-left-width: 0px; border-left-color: #999999; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">button icon scaling</p>
</td>
   <td style="width : 232.560pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Relative scaling of an icon to fit inside a button face.</p>
</td>
   <td style="width : 133.200pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">buttonFitBounds, buttonScaleHow, buttonScaleWhen</p>
</td>
</tr>
   <tr style=" height : 20.50pt;">
   <td style="width : 95.040pt; border-left-style: solid; border-left-width: 0px; border-left-color: #999999; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">highlight mode</p>
</td>
   <td style="width : 232.560pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Appearance of a button when pushed.</p>
</td>
   <td style="width : 133.200pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">highlight</p>
</td>
</tr>
   <tr style=" height : 20.50pt;">
   <td style="width : 95.040pt; border-left-style: solid; border-left-width: 0px; border-left-color: #999999; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">glyph style</p>
</td>
   <td style="width : 232.560pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Glyph style for checkbox and radio buttons.</p>
</td>
   <td style="width : 133.200pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">style</p>
</td>
</tr>
   <tr style=" height : 20.50pt;">
   <td style="width : 95.040pt; border-left-style: solid; border-left-width: 0px; border-left-color: #999999; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">number of items</p>
</td>
   <td style="width : 232.560pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Number of items in a combo box or list box.</p>
</td>
   <td style="width : 133.200pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">numItems</p>
</td>
</tr>
   <tr style=" height : 20.50pt;">
   <td style="width : 95.040pt; border-left-style: solid; border-left-width: 0px; border-left-color: #999999; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">editable</p>
</td>
   <td style="width : 232.560pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Whether the user can type in a combo box.</p>
</td>
   <td style="width : 133.200pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">editable</p>
</td>
</tr>
   <tr style=" height : 20.50pt;">
   <td style="width : 95.040pt; border-left-style: solid; border-left-width: 0px; border-left-color: #999999; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">multiple selection</p>
</td>
   <td style="width : 232.560pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Whether multiple list box items may be selected.</p>
</td>
   <td style="width : 133.200pt; border-right-style: solid; border-right-width: 0px; border-right-color: #999999; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">multipleSelection</p>
</td>
</tr>
  </table>
</div>
  <h4><a name="TOC_Button_fields"></a><a name="XREF_28613_Changing_Button"></a>Button fields</h4>
  <p class="BodyLevel1"><a name="IX_creating_11"></a><a name="IX_buttons_1"></a>We will begin by creating a button named <span class="FM_Courier">myButton</span>:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var f = this.addField(&quot;myButton&quot;, &quot;button&quot;, 0, [200, 250, 250, 400]);</p>
  <p class="BodyLevel1">In most cases, however, a form field, such as this button, is created through the UI.</p>
  <p class="BodyLevel1">If the field already exists, get the Field object as follows:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var f = this.getField(&quot;myButton&quot;);</p>
  <p class="BodyLevel1"><a name="IX_strokeColor"></a>To create a blue border along the edges of its surrounding rectangle, we will set its <span class="FM_Courier">strokeColor</span>&#160;property:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.strokeColor = color.blue;</p>
  <p class="BodyLevel1"><a name="IX_borderStyle"></a><a name="IX_border_style"></a>In addition, you can select from one of the following choices to specify its border style: solid (<span class="FM_Courier">border.s</span>), beveled (<span class="FM_Courier">border.b</span>), dashed (<span class="FM_Courier">border.d</span>), inset (<span class="FM_Courier">border.i</span>), or underline (<span class="FM_Courier">border.u</span>). In this case we will make the border appear beveled by setting its <span class="FM_Courier">borderStyle</span> property:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.borderStyle = border.b;</p>
  <p class="BodyLevel1"><a name="IX_lineWidth"></a>To set the line thickness (in points) of the border, set its <span class="FM_Courier">lineWidth</span> property:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.lineWidth = 1;</p>
  <p class="BodyLevel1"><a name="IX_fillColor"></a>To set its background color to yellow, we will set its <span class="FM_Courier">fillColor</span> property:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.fillColor = color.yellow;</p>
  <p class="BodyLevel1"><a name="IX_setting_a_caption"></a><a name="IX_buttonSetCaption"></a>To specify the text that appears on the button, invoke its <span class="FM_Courier">buttonSetCaption</span> method:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.buttonSetCaption(&quot;Click Here&quot;);</p>
  <p class="BodyLevel1">You can set the text size, color, and font:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.textSize = 16;</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.textColor = color.red;</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.textFont = font.Times;</p>
  <p class="BodyLevel1"><a name="IX_userName"></a>To create a tooltip that appears when the mouse hovers over the button, set its <span class="FM_Courier">userName</span> property:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.userName = &quot;This is a button tooltip for myButton.&quot;;</p>
  <p class="BodyLevel1">In addition to the text, it is also possible to specify the relative positioning of the icon and text on the button’s face. In this case, we will set the layout so that the icon appears to the left of the text:</p>
  <p class="FM_CodeReference"><a name="IX_buttonPosition"></a><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.buttonPosition = position.iconTextH;</p>
  <p class="BodyLevel1"><a name="IX_display"></a>To specify whether the button should be visible either on screen or when printing, set its <span class="FM_Courier">display</span>&#160;property:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.display = display.visible;</p>
  <p class="BodyLevel1"><a name="IX_highlight"></a>To set the button’s appearance in response to user interaction, set its <span class="FM_Courier">highlight</span>&#160;property to one of the following values: none (<span class="FM_Courier">highlight.n</span>), invert (<span class="FM_Courier">highlight.i</span>), push (<span class="FM_Courier">highlight.p</span>), or outline (<span class="FM_Courier">highlight.o</span>). In this example, we will specify that the button appears to be pushed:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.highlight = highlight.p;</p>
  <p class="BodyLevel1"><a name="IX_buttonScaleWhen"></a>It is possible to specify the scaling characteristics of the icon within the button face. You can determine when scaling takes place by setting the button’s <span class="FM_Courier">buttonScaleWhen</span>&#160;property to one of the following values: always (<span class="FM_Courier">scaleWhen.always</span>), never (<span class="FM_Courier">scaleWhen.never</span>), if the icon is too big (<span class="FM_Courier">scaleWhen.tooBig</span>), or if the icon is too<span class="FM_Italic">&#160;</span>small (<span class="FM_Courier">scaleWhen.tooSmall</span>). In this case, we will specify that the button always scales:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.buttonScaleWhen = scaleWhen.always;</p>
  <p class="BodyLevel1"><a name="IX_buttonScaleHow"></a>You can also determine whether the scaling will be proportional by setting the <span class="FM_Courier">buttonScaleHow</span>&#160;property to one of the following values: <span class="FM_Courier">buttonScaleHow.proportional</span>&#160;or <span class="FM_Courier">buttonScaleHow.anamorphic</span>. In this case, we will specify that the button scales proportionally:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.buttonScaleHow = buttonScaleHow.proportional;</p>
  <p class="BodyLevel1">To guarantee that the icon scales within the bounds of the rectangular region for the button, set the <span class="FM_Courier">buttonFitBounds</span> property:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.buttonFitBounds = true;</p>
  <p class="BodyLevel1"><a name="IX_buttonAlignY"></a><a name="IX_buttonAlignX"></a>You can specify the alignment characteristics of the icon by setting its <span class="FM_Courier">buttonAlignX</span>&#160;and <span class="FM_Courier">buttonAlignY</span>&#160;properties. This is done by specifying the percentage of the unused horizontal space from the left or the vertical space from the bottom that is distributed. A value of <span class="FM_Courier">50</span>&#160;would mean that 50 percent of the unused space would be distributed to the left or bottom of the icon (centered). We will center our icon in both dimensions:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.buttonAlignX = 50;</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.buttonAlignY = 50;</p>
  <p class="BodyLevel1">Now that you have prepared the space within the button for the icon, you can import an icon into the document and place it within the button’s area. There are two methods for importing an icon for a button face and associating it with a button</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1">Use the <span class="FM_Courier">buttonImportIcon</span> method of the Field object, this imports and associates in one step:</p>
</li>
  </ul>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var retn = f.buttonImportIcon(&quot;/C/temp/myIcon.pdf&quot;);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>if ( retn != 0 ) app.alert(&quot;Icon not imported&quot;);</p>
  <p class="FM_Indent1">If the argument of <span class="FM_Courier">buttonImportIcon</span>&#160;is empty, the user is prompted to choose an icon. This approach works for <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>.</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1"><a name="IX_setting_icon_appearance"></a><a name="IX_setIcon"></a><a name="IX_importing_icons"></a><a name="IX_importIcon"></a>Import the icon using the <span class="FM_Courier">importIcon</span>&#160;method of the Doc object, then associate the icon with the button using the <span class="FM_Courier">buttonSetIcon</span> method of the Field object.</p>
</li>
  </ul>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>this.importIcon({</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>cName: &quot;myIconName&quot;, cDIPath: &quot;/C/temp/myIcon.pdf&quot;, nPage: 0});</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var myIcon = this.getIcon(&quot;myIconName&quot;);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.buttonSetIcon(myIcon);</p>
  <p class="FM_Indent1">If the <span class="FM_Courier">cDIPath</span>&#160;parameter is specified, which is the case in this example, the importIcon method can only be executed in batch and console events; however, this restrictions can be bypassed using the techniques discussed in <a href="../JS_Dev_Contexts/Executing_privileged_methods_in_a_non-privileged_context.htm#XREF_30303_Executing"><span class="FM_HyperText">Executing privileged methods in a non-privileged context</span></a>. When <span class="FM_Courier">cDIPath</span>&#160;is not specified, the script works for <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>.</p>
  <p class="BodyLevel1"><a name="IX_fields"></a><a name="IX_rotation"></a>To rotate the button counterclockwise, set its <span class="FM_Courier">rotation</span> property:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.rotation = 90;</p>
  <p class="BodyLevel1"><a name="IX_setting_JavaScript"></a><a name="IX_setAction"></a>Finally, you will undoubtedly wish to associate an action to be executed when the button is clicked. You can do this by invoking the <span class="FM_Courier">setAction</span>&#160;method of the Field object, which requires a trigger (an indication of the type of mouse event) and an associated script. The possible triggers are <span class="FM_Courier">MouseUp</span>, <span class="FM_Courier">MouseDown</span>, <span class="FM_Courier">MouseEnter</span>, <span class="FM_Courier">MouseExit</span>, <span class="FM_Courier">OnFocus</span>, and <span class="FM_Courier">OnBlur</span>. The following code displays a greeting when the button is clicked:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.setAction(&quot;MouseUp&quot;, &quot;app.alert('Hello');&quot; );</p>
  <h4><a name="TOC_Check_box_fields"></a><a name="IX_check_boxes"></a><a name="XREF_85887_Changing_Checkbox"></a>Check box fields</h4>
  <p class="BodyLevel1">The check box field supports many of the same properties as the button, and actions are handled in the same manner. The properties common to both form fields are:</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1"><span class="FM_Courier">userName</span>&#160;</p>
</li>
   <li>
   <p class="FM_Bullet1"><span class="FM_Courier">readonly</span>&#160;</p>
</li>
   <li>
   <p class="FM_Bullet1"><span class="FM_Courier">display</span>&#160;</p>
</li>
   <li>
   <p class="FM_Bullet1"><span class="FM_Courier">rotation</span>&#160;</p>
</li>
   <li>
   <p class="FM_Bullet1"><span class="FM_Courier">strokeColor</span>&#160;</p>
</li>
   <li>
   <p class="FM_Bullet1"><span class="FM_Courier">fillColor</span>&#160;</p>
</li>
   <li>
   <p class="FM_Bullet1"><span class="FM_Courier">lineWidth</span>&#160;</p>
</li>
   <li>
   <p class="FM_Bullet1"><span class="FM_Courier">borderStyle</span>&#160;</p>
</li>
   <li>
   <p class="FM_Bullet1"><span class="FM_Courier">textSize</span>&#160;</p>
</li>
   <li>
   <p class="FM_Bullet1"><span class="FM_Courier">textColor</span>&#160;</p>
</li>
  </ul>
  <p class="BodyLevel1">In the case of <span class="FM_Courier">textFont</span>, however, the font is always set to <span class="FM_Courier">Adobe</span>&#160;<span class="FM_Courier">Pi</span>.</p>
  <p class="BodyLevel1">The <span class="FM_Courier">style</span>&#160;property of the Field object is used to set the appearance of the check symbol that appears when the user clicks in the check box. Permissible values of the <span class="FM_Courier">style</span> property are check (<span class="FM_Courier">style.ch</span>), cross (<span class="FM_Courier">style.cr</span>), diamond (<span class="FM_Courier">style.di</span>), circle (<span class="FM_Courier">style.ci</span>), star (<span class="FM_Courier">style.st</span>), and square (<span class="FM_Courier">style.sq</span>). For example, the following code causes a check to appear when the user clicks in the check box:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.style = style.ch;</p>
  <p class="BodyLevel1"><a name="IX_exportValues_1"></a>The export value of the check box can be set using the <span class="FM_Courier">exportValues</span>&#160;property of the Field object. For example, the code below associates the export value &quot;buy&quot; with the check box:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var f = this.getField(&quot;myCheckBox&quot;);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.exportValues=[&quot;buy&quot;];</p>
  <p class="BodyLevel1">If there are several check box fields, you can indicate that one particular form field is always checked by default. To do this, you must do two things:</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1">Invoke the <span class="FM_Courier">defaultIsChecked</span>&#160;method of the Field object. Note that since there may be several check boxes that belong to the same group, the method requires that you specify the zero-based index of the particular check box.</p>
</li>
   <li>
   <p class="FM_Bullet1"><a name="IX_resetForm"></a>Reset the field to ensure that the default is applied by invoking the <span class="FM_Courier">resetForm</span>&#160;method of the Doc object<span class="FM_Courier"></span>.</p>
</li>
  </ul>
  <p class="BodyLevel1">This process is shown in the following code:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var f = this.getField(&quot;myCheckBox&quot;);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.defaultIsChecked(0); // 0 means that check box #0 is checked</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>this.resetForm([f.name]);</p>
  <p class="BodyLevel1">Other useful Field methods are </p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1"><span class="FM_Courier">checkThisBox</span> — used to check a box</p>
</li>
   <li>
   <p class="FM_Bullet1"><span class="FM_Courier">isBoxChecked</span> — used test whether a check box is checked</p>
</li>
   <li>
   <p class="FM_Bullet1"><span class="FM_Courier">isDefaultChecked</span> — use to test whether the default setting is the one selected by user</p>
</li>
  </ul>
  <h4><a name="TOC_Combo_box_fields"></a><a name="XREF_44065_Changing_Combobox"></a>Combo box fields</h4>
  <p class="BodyLevel1"><a name="IX_about_15"></a>The combo box has the same properties as the button and check box fields. Its primary differences lie in its nature. Since the combo box maintains an item list in which the user may be allowed to enter custom text, it offers several properties that support its formatting options.</p>
  <p class="BodyLevel1"><a name="IX_editable"></a>If you would like the user to be permitted to enter custom text, set the <span class="FM_Courier">editable</span>&#160;property of the Field object, as shown in the following code:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var f = this.getField(&quot;myComboBox&quot;);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.editable = true;</p>
  <p class="BodyLevel1"><a name="IX_spell_checking_1"></a>You can specify whether the user’s custom text will be checked for spelling by setting its <span class="FM_Courier">doNotSpellCheck</span> property. The following code indicates that the spelling is not checked:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.doNotSpellCheck = true;</p>
  <p class="BodyLevel1">A combo box can interact with the user in one of two ways: either a selection automatically results in a response, or the user first makes their selection and then takes a subsequent action, such as clicking a <span class="FM_Courier">Submit</span>&#160;button. </p>
  <p class="BodyLevel1">In the first case, as soon as the user clicks on an item in the combo box, an action can automatically be triggered. If you would like to design your combo box this way, then set its <span class="FM_Courier">commitOnSelChange</span>&#160;property to <span class="FM_Courier">true</span>. Otherwise, set the value to <span class="FM_Courier">false</span>. The following code commits the selected value immediately:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.commitOnSelChange = true;</p>
  <p class="BodyLevel1"><a name="IX_setting_items"></a>To set the export values for the combo box items, invoke its <span class="FM_Courier">setItems</span>&#160;method, which can be used to set both the face and export values. In this case, the face (or appearance) value (the value that appears in the combo box) is the first value in every pair, and the export value is the second. The following code results in the full state names appearing in the combo box (as the face or appearance values), and abbreviated state names as their corresponding export values:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.setItems( [&quot;Ohio&quot;, &quot;OH&quot;], [&quot;Oregon&quot;, &quot;OR&quot;], [&quot;Arizona&quot;, &quot;AZ&quot;] );</p>
  <p class="BodyLevel1"><a name="IX_array_sort_and_compare"></a>In many cases, it is desirable to maintain a sorted collection of values in a combo box. In order to do this, you will need to write your own sorting script. Recall that the JavaScript <span class="FM_Courier">Array</span>&#160;object has a <span class="FM_Courier">sort</span>&#160;method that takes an optional argument which may be a comparison function. </p>
  <p class="BodyLevel1">This means that you must first define a <span class="FM_Courier">compare</span>&#160;function that accepts two parameters. The function must return a negative value when the first parameter is less than the second, <span class="FM_Courier">0</span>&#160;if the two parameters are equivalent, and a positive value if the first parameter is greater. </p>
  <p class="BodyLevel1">In the following example, we define a <span class="FM_Courier">compare</span>&#160;function that accepts two parameters, both of which are user/export value pairs, and compares their user values. For example, if the first parameter is <span class="FM_Courier">[&quot;Ohio&quot;, &quot;OH&quot;]</span>&#160;and the second parameter is <span class="FM_Courier">[&quot;Arizona&quot;, &quot;AZ&quot;]</span>, the compare function returns <span class="FM_Courier">1</span>, since <span class="FM_Courier">&quot;Ohio&quot;</span>&#160;is greater than <span class="FM_Courier">&quot;Arizona&quot;</span>:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>function compare (a,b)</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>{</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>if (a[0] &lt; b[0]) return -1; // index 0 means user value</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>if (a[0] &gt; b[0]) return 1;</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>return 0;</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p class="BodyLevel1">Create a temporary array of values and populate it with the user/export value pairs in your combo box field. The following code creates the array, iterates through the combo box items, and copies them into the array:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var arr = new Array();</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var f = this.getField(&quot;myCombobox&quot;);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>for (var i = 0; i &lt; f.numItems; i++)</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>arr[i] = [f.getItemAt(i,false), f.getItemAt(i)];</p>
  <p class="BodyLevel1">At this point you can invoke the <span class="FM_Courier">sort</span>&#160;method of the <span class="FM_Courier">Array</span>&#160;object and replace the items in the combo box field:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>arr.sort(compare); // Sort the array using your compare method</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.setItems(arr);</p>
  <h4><a name="IX_processing_keystrokes"></a>Responding to combo box changes</h4>
  <p class="BodyLevel1">The Format tab of the Combo Box properties lists categories of formats available to combo box text. They are None, Number, Percentage, Date, Time, Special and Custom. For all formatting categories, except None and Custom, the JavaScript interpreter uses special formatting functions to properly process the text of a combo box; these functions are undocumented now, so comments here are focused on the None and Custom category.</p>
  <p class="BodyLevel1">If the formatting category is set to None, then processing the combo box is easy. Whereas the combo box does not process its own change in value, another form element can easily read the current setting of the combo box. For example, if the name of the combo box is <span class="FM_Courier">myComboBox</span>, then the following code gets the current value:</p>
  <p class="FM_CodeReference">var f = this.getField(&quot;<span class="FM_Courier">myComboBox&quot;</span>);</p>
  <p class="FM_CodeReference">var valueCombo = f.value;</p>
  <p class="BodyLevel1">The variable <span class="FM_Courier">valueCombo</span>&#160;contains the export value of the combo box. You cannot, by the way, get the face value, if the export value is different from the face value.</p>
  <p class="BodyLevel1">When the formatting category is set to Custom, <span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>there are two types of formatting scripts, Custom Keystroke Script and Custom Format Script.</p>
  <p class="BodyLevel1">The Custom Keystroke Script has the following general form:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>if (event.willCommit) {</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>// Script that is executed when the choice is committed</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>} else {</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>// Script that is executed when the choice changes, or, if the </p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>// combox box is editable, when text is typed in.</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p class="BodyLevel1"><a name="IX_changeEx"></a><a name="IX_change"></a><a name="IX_value"></a>With regard to the Custom Keystroke Script, there are three event properties that can be read: <span class="FM_Courier">value</span>, <span class="FM_Courier">change</span>&#160;and <span class="FM_Courier">changeEx</span>. To illustrate these event properties, let’s use the state combo box, defined above. Here is the Custom Keystroke Script:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>if (event.willCommit) {</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>console.println(&quot;Keystroke: willCommit&quot;)</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>console.println(&quot;event.value = &quot; + event.value);</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>console.println(&quot;event.change = &quot; + event.change);</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>console.println(&quot;event.changeEx = &quot; + event.changeEx);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>} else {</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>console.println(&quot;Keystroke: not Committed&quot;) </p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>console.println(&quot;event.value = &quot; + event.value);</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>console.println(&quot;event.change = &quot; + event.change);</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>console.println(&quot;event.changeEx = &quot; + event.changeEx);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p class="BodyLevel1">The results of this script are listed below. Assume the combo box is set on a face value of <span class="FM_Courier">&quot;Arizona&quot;</span>&#160;and you change the combo box to read <span class="FM_Courier">&quot;Ohio&quot;</span>. Additional comments are inserted.</p>
  <p class="FM_CodeReference">// Select Ohio, but not committed. Note that the value of event.value is still</p>
  <p class="FM_CodeReference">// set to &quot;Arizona&quot;, but event.change is now set to the face value of the new </p>
  <p class="FM_CodeReference">// choice, and event.changeEx is set to the export value of the new selection.</p>
  <p class="FM_CodeReference">Keystroke: not Committed</p>
  <p class="FM_CodeReference">event.value = Arizona</p>
  <p class="FM_CodeReference">event.change = Ohio</p>
  <p class="FM_CodeReference">event.changeEx = OH</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference">// The choice is committed. Note that the value of event.value is now &quot;Ohio&quot; </p>
  <p class="FM_CodeReference">// and that event.change and event.changeEx are empty.</p>
  <p class="FM_CodeReference">Keystroke: willCommit</p>
  <p class="FM_CodeReference">event.value = Ohio</p>
  <p class="FM_CodeReference">event.change = </p>
  <p class="FM_CodeReference">event.changeEx = </p>
  <p class="BodyLevel1">The only difference between the above sequence of events when <span class="FM_Courier">f.commitOnSelChange=false</span>&#160;versus <span class="FM_Courier">f.commitOnSelChange=true</span>&#160;is that in the first case, after the user makes a (new) choice from the combo box (and the “not committed” script is executed), the user must press the Enter key or click on a white area outside the field to commit the change, at this point, the &quot;willCommit&quot; script will execute. When <span class="FM_Courier">f.commitOnSelChange=true</span>, these two blocks of code will execute one after the other, with the “not committed” code executing first.</p>
  <p class="BodyLevel1"><a name="IX_editable_1"></a>A combo box can also be editable. An editable combo box is one where the user is allowed to type in, or paste in, a selection. A combo box can be made editable by checking Allow User to Enter Custom Text in the Options tab of the Combo Box Properties dialog box. For JavaScript, the <span class="FM_Courier">editable</span>&#160;field property is used, as in the following example.</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var f = this.getField(&quot;myComboBox&quot;);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.editable = true;</p>
  <p class="BodyLevel1">The above output was captured in the console from a combo box that was not editable. The output is the same when the user selects one of the items in the combo box; when the user types in a selection, the output looks like this, assuming the user has already typed in the string &quot;<span class="FM_Courier">Te&quot;</span>and is now typing in <span class="FM_Courier">&quot;x&quot;:</span></p>
  <p class="FM_CodeReference">/* </p>
  <p class="FM_CodeReference">&nbsp;&nbsp;&nbsp;Note that when the selection is not committed, event.changeEx is empty. You</p>
  <p class="FM_CodeReference">&nbsp;&nbsp;&nbsp;can test whether the user is typing in by using the conditional test</p>
  <p class="FM_CodeReference">&nbsp;&nbsp;&nbsp;if ( event.changeEx == &quot;&quot; ) {&lt;type/paste in&gt;} else {&lt;select from list&gt;}</p>
  <p class="FM_CodeReference">&nbsp;&nbsp;&nbsp;Note also that the value of event.value is &quot;Te&quot; and the value of </p>
  <p class="FM_CodeReference">&nbsp;&nbsp;&nbsp;event.change is &quot;x&quot;; the previous keystrokes and the current keystroke,</p>
  <p class="FM_CodeReference">&nbsp;&nbsp;&nbsp;respectively. When the user pastes text into the combo box, the length of</p>
  <p class="FM_CodeReference">&nbsp;&nbsp;&nbsp;event.change will be larger than one, </p>
  <p class="FM_CodeReference">&nbsp;&nbsp;&nbsp;if(event.change.length &gt; 1 ) {&lt;pasted text&gt;} else {&lt;typed text&gt;}</p>
  <p class="FM_CodeReference">*/</p>
  <p class="FM_CodeReference">Keystroke: not Committed</p>
  <p class="FM_CodeReference">event.value = Te</p>
  <p class="FM_CodeReference">event.change = x</p>
  <p class="FM_CodeReference">event.changeEx = </p>
  <p class="FM_CodeReference">// ...Additional keystrokes to spell &quot;Texas&quot;</p>
  <p class="FM_CodeReference">// Once committed, this output is the same as when the combo box is not</p>
  <p class="FM_CodeReference">// editable.</p>
  <p class="FM_CodeReference">Keystroke: willCommit</p>
  <p class="FM_CodeReference">event.value = Texas</p>
  <p class="FM_CodeReference">event.change = </p>
  <p class="FM_CodeReference">event.changeEx = </p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_5Head_Example">Custom script for a combo box</p>
</li>
  </ul>
  <p class="BodyLevel1">Suppose now you want to make the combo box editable, and ask to user to pick a state from the pop-up combo box, or to type in a state. You want to format the state entered by the user so that the first letter is capitalized, and the rest are lower case. </p>
  <p class="BodyLevel1">The following script is used for the Custom Keystroke Script of the combo box:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>if (event.willCommit) {</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>// Test to be sure there something more than white spaces.</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>if ( event.rc = !( event.value.replace(/\s/g,&quot;&quot;) == &quot;&quot; )) {</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>// On commit, split event.value into an array, convert to lower case</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>// and upper case for the first letter.</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var aStr = event.value.split(&quot; &quot;);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>for ( var i=0; i&lt;aStr.length; i++){</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>aStr[i] = aStr[i].charAt(0).toUpperCase()</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>+aStr[i].substring(1,aStr[i].length).toLowerCase();</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>// Join the separate words together, and return as the new value.</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>event.value = aStr.join(&quot; &quot;);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>} else {</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>// User is typing in something, make sure it is a letter or space</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var ch = event.change;</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>if ( ch.length==1 )</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>event.rc = (ch==&quot; &quot;) || (ch&gt;=&quot;a&quot; &amp;&amp; &#160;ch&lt;=&quot;z&quot;) || (ch&gt;=&quot;A&quot; &amp;&amp; ch&lt;=&quot;Z&quot;);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p class="BodyLevel1">Format the combo box so that is reads <span class="FM_Courier">&quot;State</span>&#160;<span class="FM_Courier">of</span>&#160;<span class="FM_Courier">Ohio&quot;</span>, for example.</p>
  <p class="BodyLevel1">Custom format script: </p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>event.value = &#160;&quot;State of &quot; + event.value;</p>
  <p class="BodyLevel1"><a name="IX_regular_expressions"></a>If the user has pasted into the editable combo box, you can catch any non-letters or spaces with the validation script. A regular expression is used to see if there is something different from a letter or space.</p>
  <p class="BodyLevel1"><a name="IX_custom_validation_script"></a>Custom validation script:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>event.rc = !/[^a-zA-Z ]+/.test(event.value);</p>
  <p class="BodyLevel1">These various events, Keystroke, Format and Validate, define the <span class="FM_Courier">rc</span>&#160;property of the event object. In the above code, the <span class="FM_Courier">event.rc</span> is used to signal that the input is acceptable (<span class="FM_Courier">true</span>) or not acceptable (<span class="FM_Courier">false</span>). In this way, the input can be checked, validated, and formatted, or, at some stage, can be canceled by setting <span class="FM_Courier">event.rc = false</span>.</p>
  <p class="BodyLevel1">Full documentation of the objects used in the above sample script can be found in the <a href="../JS_API_AcroJSPreface/JS_API_AcroJSPreface.htm#XREF_87228_JavaScript_for"><span class="FM_HyperText">JavaScript for Acrobat API Reference</span></a>.</p>
  <h4><a name="TOC_List_box_fields"></a><a name="XREF_53749_Changing_Listbox"></a>List box fields</h4>
  <p class="BodyLevel1">A list box has many of the same properties as buttons and combo boxes, except for the fact that the user cannot enter custom text and, consequently, that spellchecking is not available. </p>
  <p class="BodyLevel1">However, the user can select multiple entries. To enable this feature, set its <span class="FM_Courier">multipleSelection</span>&#160;property to <span class="FM_Courier">true</span>, as shown in the code below:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var f = this.getField(&quot;myListBox&quot;);<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.multipleSelection = true;</p>
  <p class="BodyLevel1">The List Box Properties dialog box has a Selection Change tab, this corresponds to the <span class="FM_Courier">&quot;Keystroke&quot;</span>&#160;trigger of the combo box or text field. To enter script to process a change in the status of the list box, you can either use the UI, or you can install your script, like so,</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.setAction( &quot;Keystroke&quot;, &quot;myListboxJavascript();&quot; );</p>
  <p class="BodyLevel1">In the above, the action is to simply call a JavaScript function, defined, perhaps, as document JavaScript.</p>
  <p class="BodyLevel1">The manner in which you process a selection change is the same as the combo box, with one exception. </p>
  <p class="FM_CodeReference">// Note that unlike the combo box, the value of event.value is the export value</p>
  <p class="FM_CodeReference">// of the field, not the face value as it is with the combo box.</p>
  <p class="FM_CodeReference">Keystroke: not committed</p>
  <p class="FM_CodeReference">event.value = FL</p>
  <p class="FM_CodeReference">event.change = Arizona</p>
  <p class="FM_CodeReference">event.changeEx = AZ</p>
  <p class="FM_CodeReference">// When we commit, the value of event.value is the face value, not the export</p>
  <p class="FM_CodeReference">// value.</p>
  <p class="FM_CodeReference">Keystroke: willCommit</p>
  <p class="FM_CodeReference">event.value = Arizona</p>
  <p class="FM_CodeReference">event.change = </p>
  <p class="FM_CodeReference">event.changeEx = </p>
  <p class="BodyLevel1"><a name="IX_multiple_selection_list"></a><a name="IX_making_multiple"></a>You can allow the user to make multiple selections from a list box by checking the Multiple Selection check box<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>&#160;in the Options tab of the List Box Properties dialog box, or you can make this selection using JavaScript:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var f = this.getField(&quot;myListBox&quot;);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.multipleSelection=true;</p>
  <p class="BodyLevel1"><a name="IX_processing_multiple"></a><a name="IX_currentValueIndices"></a>It is not possible to detect multiple selection using a Selection Change script; however, multiple selection can be detected from another form field, such as a button. To get and set multiple values of the list box, use the <span class="FM_Courier">currentValueIndices</span>&#160;property of the Field object. The following example illustrates the techniques.</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_5Head_Example">Accessing a list from another field</p>
</li>
  </ul>
  <p class="BodyLevel1">This example accesses the list box which allows multiple selections. It simply reads the current value and reports to the console. When the current value of the list box is a single selection, <span class="FM_Courier">currentValueIndices</span>&#160;returns a number type (the index of the item selected); when there are multiple selections, <span class="FM_Courier">currentValueIndices</span> returns an array of indices.</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var f = this.getField(&quot;myListBox&quot;);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var a = f.currentValueIndices;</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>if (typeof a == &quot;number&quot;) // A single selection</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>console.println(&quot;Selection: &quot; + f.getItemAt(a, false));</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>else {// Multiple selections</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>console.println(&quot;Selection:&quot;);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>for (var i = 0; i &lt; a.length; i ++)</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>console.println(&quot; &quot; + f.getItemAt(a[i], false));</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p class="BodyLevel1"><a name="IX_getting_setting_and"></a><a name="IX_getItemAt"></a>The field method <span class="FM_Courier">getItemAt</span>&#160;is used to get the face values of the list, using the index value returned by <span class="FM_Courier">currentValueIndices</span>.</p>
  <p class="BodyLevel1"><a name="IX_setItems"></a><a name="IX_deleteItemAt"></a><a name="IX_insertItemAt"></a><a name="IX_getting_the_number_of"></a><a name="IX_numItems"></a>Other relevant field properties and methods not mentioned in this section are <span class="FM_Courier">numItems</span>, <span class="FM_Courier">insertItemAt</span>, <span class="FM_Courier">deleteItemAt</span>&#160;and <span class="FM_Courier">setItems</span>. The <uservariable x-value="JavaScript for Acrobat API Reference" x-showvalue="TRUE" name="Ref_JavaAPI" x-format="Ref_JavaAPI"><span class="FM_Italic">JavaScript for Acrobat API Reference</span></uservariable><span class="FM_Italic"></span>&#160;documents all these methods and supplies many informative examples.</p>
  <h4><a name="TOC_Radio_button_fields"></a><a name="XREF_34428_Changing_Radio"></a>Radio button fields</h4>
  <p class="BodyLevel1"><a name="IX_exporting_values"></a>The unique nature of radio buttons is that they are always created in sets, and represent a collection of mutually exclusive choices. This means that when you create a set of radio buttons, you must give all of them identical names with possibly different export values.</p>
  <p class="BodyLevel1"><a name="IX_radiosInUnison"></a><a name="IX_behavior"></a>The behavior of the radio buttons depends on several factors, whether or not there are two or more members of the same radio set that have the same export value, and whether or not the item Buttons With the Same Name and Value are Selected in Unison is checked in the Options tab of the Radio Button Properties dialog box. (The latter can be set by JavaScript using the <span class="FM_Courier">radiosInUnison</span>&#160;field property.) The differences are illustrated in the discussion below.</p>
  <p class="BodyLevel1">You have four radio buttons all in the same group (all having the same name of <span class="FM_Courier">&quot;myRadio&quot;</span>):</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var f = this.getField(<span class="FM_Courier">&quot;myRadio&quot;</span>);</p>
  <p class="BodyLevel1">Suppose the export values are <span class="FM_Courier">export0</span>, <span class="FM_Courier">export1</span>, <span class="FM_Courier">export2</span>, and <span class="FM_Courier">export3</span>. This is the simplest case, all choices are mutually exclusive; the behavior does not depend on whether Buttons With the Same Name and Value are Selected in Unison is checked.</p>
  <p class="BodyLevel1">Now suppose the export values of the four radio buttons are <span class="FM_Courier">export0</span>, <span class="FM_Courier">export1</span>, <span class="FM_Courier">export2</span>, and <span class="FM_Courier">export2</span>. If <span class="FM_Courier">f.radiosInUnison</span>=<span class="FM_Courier">false</span>, the four buttons behave as in the simplest case above. If <span class="FM_Courier">f.radiosInUnison</span>=<span class="FM_Courier">true,</span>&#160;then there are only three mutually exclusive buttons; clicking either of the two radios with export value <span class="FM_Courier">export2</span>&#160;will select both of them, while clicking the radio button with export value of <span class="FM_Courier">export0</span> will select only that button.</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_5Head_Example"><a name="IX_accessing_individual"></a><a name="IX_widgets"></a>Accessing individual radio button&#160;widgets</p>
</li>
  </ul>
  <p class="BodyLevel1">This example illustrates how you can programmatically access the individual radio buttons in the same radio group (all having the same name). Assume the command name is <span class="FM_Courier">myRadio</span>&#160;and there are four widgets in the field.</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var f = this.getField(&quot;myRadio&quot;);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>// Get the second widget, change its appearance and add an action</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var g = this.getField(f.name+&quot;.1&quot;);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>g.strokeColor = color.red;</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>g.setAction(&quot;MouseUp&quot;, </p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>&quot;app.alert('Export value is ' + this.getField('myRadio').value)&quot;);</p>
  <p class="BodyLevel1"><a name="IX_setting_an_action"></a><a name="IX_setAction_1"></a><a name="IX_strokeColor_1"></a><a name="IX_value_1"></a>Some properties of the Field object, such as <span class="FM_Courier">value</span>, apply to all widgets that are children of that field. Other properties, such as <span class="FM_Courier">strokeColor</span>&#160;and <span class="FM_Courier">setAction</span>, are specific to individual widgets. See the section on the Field object in the <a href="../JS_API_AcroJSPreface/JS_API_AcroJSPreface.htm#XREF_87228_JavaScript_for"><span class="FM_HyperText">JavaScript for Acrobat API Reference</span></a>&#160;for a complete list of Field properties accessible at the widget level.</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_5Head_Example">Counting the number of widgets in a radio button field</p>
</li>
  </ul>
  <p class="BodyLevel1">Sometimes the number of widgets in a radio button field is unknown. The code below counts the number of widgets.</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var f = this.getField(&quot;myRadio&quot;)</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var nWidgets=0;</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>while(true) {</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>if ( this.getField(f.name + &quot;.&quot; + nWidgets) == null ) break;</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>nWidgets++;</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>console.println(&quot;There are &quot; + nWidgets + &quot; widgets in this radio field&quot;);</p>
  <h4><a name="TOC_Signature_fields"></a><a name="XREF_61295_Signature"></a>Signature fields</h4>
  <p class="BodyLevel1">Signature fields have the usual properties, as listed under the General and Appearance tabs of the Digital Signature Properties dialog box. These can be set in the standard way, by the UI or through JavaScript, as in this example: </p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var f = this.getField(&quot;Signature1”);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.strokeColor = color.black;</p>
  <p class="BodyLevel1">When the signature field is signed, you may want to execute some script in response to this event. The script can be entered through the Signed tab of the Digital Signature Properties dialog box, or through the <span class="FM_Courier">setAction</span> method of the Field object.</p>
  <p class="BodyLevel1"><a name="IX_setting_an_action_1"></a>You can set the action of a signature field by invoking its <span class="FM_Courier">setAction</span>&#160;method and passing in the <span class="FM_Courier">Format</span>&#160;trigger name as the first parameter. When the user signs the form, you can reformat other form fields with the script you pass in to the <span class="FM_Courier">setAction</span>&#160;method. </p>
  <p class="BodyLevel1"><a name="IX_locking_after_signing"></a>Once a document is signed, you may wish to lock certain form fields within the document. You can do so by creating a script containing a call to the signature field’s <span class="FM_Courier">setLock</span>&#160;method and passing that script as the second parameter to the signature field’s <span class="FM_Courier">setAction</span>&#160;method. </p>
  <p class="BodyLevel1">The <span class="FM_Courier">setLock</span>&#160;method requires a <span class="FM_Courier">Lock</span>&#160;object, which you will obtain by invoking the form field’s <span class="FM_Courier">getLock</span>&#160;method. Once you obtain the <span class="FM_Courier">Lock</span>&#160;object, set its <span class="FM_Courier">action</span>&#160;and <span class="FM_Courier">fields</span>&#160;properties. The <span class="FM_Courier">action</span>&#160;property can be set to one of 3 values: <span class="FM_Courier">&quot;All&quot;</span>&#160;(lock all fields), <span class="FM_Courier">&quot;Exclude&quot;</span>&#160;(lock all fields except for these), or <span class="FM_Courier">&quot;Include&quot;</span>&#160;(lock only these fields). The <span class="FM_Courier">fields</span> property is an array of fields.</p>
  <p class="BodyLevel1">For example, suppose you created a signature and would like to lock the form field whose name is <span class="FM_Courier">myField</span>&#160;after the user signs the document. The following code would lock <span class="FM_Courier">myField</span>:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var f = this.getField(&quot;Signature1&quot;);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var oLock = f.getLock();</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>oLock.action = &quot;Include&quot;;</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>oLock.fields = new Array(&quot;myField&quot;);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.setLock(oLock);</p>
  <p class="BodyLevel1"><a name="IX_about_16"></a><a name="IX_signature_fields"></a>To actually sign a document, you must do two things: choose a security handler, and then invoke the signature field’s <span class="FM_Courier">signatureSign</span>&#160;method. The following code is an example of how to choose a handler and actually sign the document:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var f = this.getField(&quot;Signature1&quot;);<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var ppklite = security.getHandler(&quot;Adobe.PPKLite&quot;);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var oParams = {</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>cPassword: &quot;myPassword&quot;, </p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>cDIPath: &quot;/C/signatures/myName.pfx&quot; // Digital signature profile</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>};</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ppklite.login(oParams);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.signatureSign(ppklite,</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>{</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>password: &quot;myPassword&quot;,</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>location: &quot;San Jose, CA&quot;,</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>reason: &quot;I am approving this document&quot;,</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>contactInfo: &quot;userName@example.com&quot;,</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>appearance: &quot;Fancy&quot;</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>); //End of signature</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ppklite.logout()</p>
  <h4><a name="TOC_Text_fields"></a><a name="XREF_64180_Changing_Text"></a>Text fields</h4>
  <p class="BodyLevel1">The text field has many of the same properties as buttons and combo boxes. In addition, it offers the following specialized properties shown in the following table. (The table assumes that <span class="FM_Courier">f</span>&#160;is the field object of a text field.)</p>
  <p class="FM_Z_Caption"><a name="IX_properties_3"></a>Text field properties</p>
<div width="100%" align="left">
  <table dir="ltr" style=" border-spacing:0; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:alignleft; width:100%; direction:ltr; max-width:460.80pt;" cellspacing="0">
   <tr style=" height : 22.50pt;">
   <th style="width : 108.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableHead">Property</p>
</th>
   <th style="width : 190.800pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableHead">Description</p>
</th>
   <th style="width : 162.000pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableHead">Example</p>
</th>
</tr>
   <tr style=" height : 22.50pt;">
   <td style="width : 108.000pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">alignment</p>
</td>
   <td style="width : 190.800pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Justify text</p>
</td>
   <td style="width : 162.000pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">f.alignment = &quot;center&quot;;</p>
</td>
</tr>
   <tr style=" height : 22.50pt;">
   <td style="width : 108.000pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">charLimit</p>
</td>
   <td style="width : 190.800pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Limit on number of characters in area</p>
</td>
   <td style="width : 162.000pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">f.charLimit = 40;</p>
</td>
</tr>
   <tr style=" height : 35.00pt;">
   <td style="width : 108.000pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">comb</p>
</td>
   <td style="width : 190.800pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Comb of characters subject to limitation set by <span class="FM_Courier">charLimit</span>&#160;</p>
</td>
   <td style="width : 162.000pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">f.comb = true;</p>
</td>
</tr>
   <tr style=" height : 22.50pt;">
   <td style="width : 108.000pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">defaultValue</p>
</td>
   <td style="width : 190.800pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Set a default text string</p>
</td>
   <td style="width : 162.000pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">f.defaultValue = &quot;Name: &quot;;</p>
</td>
</tr>
   <tr style=" height : 22.50pt;">
   <td style="width : 108.000pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">doNotScroll</p>
</td>
   <td style="width : 190.800pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Permit scrolling of long text</p>
</td>
   <td style="width : 162.000pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">f.doNotScroll = true;</p>
</td>
</tr>
   <tr style=" height : 22.50pt;">
   <td style="width : 108.000pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">doNotSpellCheck</p>
</td>
   <td style="width : 190.800pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Set spell checking</p>
</td>
   <td style="width : 162.000pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">f.doNotSpellCheck = true;</p>
</td>
</tr>
   <tr style=" height : 22.50pt;">
   <td style="width : 108.000pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">fileSelect</p>
</td>
   <td style="width : 190.800pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Format field as a file path</p>
</td>
   <td style="width : 162.000pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">f.fileSelect = true;</p>
</td>
</tr>
   <tr style=" height : 22.50pt;">
   <td style="width : 108.000pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">multiline</p>
</td>
   <td style="width : 190.800pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Allow multiple lines in the area</p>
</td>
   <td style="width : 162.000pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">f.multiline = true;</p>
</td>
</tr>
   <tr style=" height : 35.00pt;">
   <td style="width : 108.000pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">password</p>
</td>
   <td style="width : 190.800pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Use special formatting to protect the user’s password</p>
</td>
   <td style="width : 162.000pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">f.password = true;</p>
</td>
</tr>
   <tr style=" height : 22.50pt;">
   <td style="width : 108.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">richText</p>
</td>
   <td style="width : 190.800pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Set rich text formatting</p>
</td>
   <td style="width : 162.000pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_CodeReference">f.richText = true;</p>
</td>
</tr>
  </table>
</div>
  <p class="BodyLevel1"><a name="IX_processing_keystrokes_1"></a>When the user enters data into a text field, the usual <span class="FM_Courier">event</span>&#160;object can be queried to process the keystrokes, the behavior is similar to the combo box. In the output below, assume the user has already typed in the <span class="FM_Courier">&quot;Te&quot;</span>&#160;and types in the letter <span class="FM_Courier">&quot;x&quot;:</span></p>
  <p class="FM_CodeReference">// The value of event.value is the current text in text field, event.change has</p>
  <p class="FM_CodeReference">// the current keystroke. Note that event.changeEx is always empty, and is not</p>
  <p class="FM_CodeReference">// relevant to the text field.</p>
  <p class="FM_CodeReference">Keystroke: not Committed</p>
  <p class="FM_CodeReference">event.value = Te</p>
  <p class="FM_CodeReference">event.change = x</p>
  <p class="FM_CodeReference">event.changeEx = </p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference">Keystroke: willCommit</p>
  <p class="FM_CodeReference">event.value = Texas</p>
  <p class="FM_CodeReference">event.change = </p>
  <p class="FM_CodeReference">event.changeEx =</p>
  <p class="BodyLevel1"><a name="IX_custom_keystroke_script"></a>Use the Custom Keystroke Script to intercept user keystrokes and process them. For example, the following script changes all input to upper case:</p>
  <p class="BodyLevel1">Custom Keystroke Script:</p>
  <p class="FM_CodeReference">if (!event.willCommit) event.change = event.change.toUpperCase();</p>
  <h4><a name="TOC_Validation_scripts"></a><a name="IX_validation_script"></a><a name="XREF_34131_Validation_Options"></a>Validation scripts</h4>
  <p class="BodyLevel1">You can enforce valid ranges, values, or characters entered in form fields. The main reason to use validation is to ensure that users are only permitted to enter valid data into a form field. Validation is used whenever the user enters text into a form field, for text fields and for editable combo boxes.</p>
  <p class="BodyLevel1"><a name="IX_setting_an_action_2"></a><a name="IX_setAction_2"></a>Enter the validation script through the Validation tab of the Text Field Properties dialog box, or through the <span class="FM_Courier">setAction</span>&#160;method of the Field object. In the latter case, pass <span class="FM_Courier">Validate</span>&#160;as the first parameter, as follows:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var f = this.getField(&quot;myText&quot;);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>f.setAction(&quot;Validate&quot;, &quot;myValidateRange(true, -1, true, 5)&quot;);</p>
  <p class="BodyLevel1">Normally, however, such a script is entered through the UI.</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_5Head_Example">Inputting numbers and checking the range in a text field</p>
</li>
  </ul>
  <p class="BodyLevel1">This is a simple example of a Custom Keystroke Script for inputting a number, and a simple validation script for checking the range of the number.</p>
  <p class="BodyLevel1">Custom Keyboard Script:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>if ( event.willCommit ) {</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var value = &quot;&quot;+event.value.replace(/\s*/g,&quot;&quot;);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>if ( value != &quot;&quot; ) {</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>if (!isFinite(value)) {</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>app.beep(0);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>event.rc = false;</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>} else </p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>if ( event.change == &quot; &quot; ) event.change = &quot;&quot;;</p>
  <p class="BodyLevel1">A representative Custom Validation Script is</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>myValidateRange(true, -1, true, 5);</p>
  <p class="BodyLevel1">which checks whether the value entered is strictly between <span class="FM_Courier">-1</span>&#160;and <span class="FM_Courier">5</span>. The validation script calls the following document JavaScript:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>function myRangeCheck(bGreater, nGreater, bLess, nLess)</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>{</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>value = event.value;</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>if ( bGreater &amp;&amp; ( value &lt;= nGreater ) ) {</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>app.alert(&quot;Value must be greater than &quot; + nGreater);</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>app.beep();</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>event.rc = false;</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>return;</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>if ( bLess &amp;&amp; ( value &gt;= nLess ) ) {</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>app.alert(&quot;Value must be less than &quot; + nLess);</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>app.beep();</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>event.rc = false;</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>return; &#160;&#160;&#160;&#160;&#160;&#160;</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <h4><a name="TOC_Calculation_script"></a><a name="XREF_68521_Calculation_Options"></a><a name="XREF_Calculation_script"></a>Calculation script</h4>
  <p class="BodyLevel1"><a name="IX_calculating"></a>Calculation options make it possible to automate mathematical calculations associated with form fields. To apply a calculation to a form field action, enter the script through the Calculate tab of the Text Field Properties dialog box. On this tab there are three options:</p>
  <p class="FM_StepReset"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>1.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>The value is the sum(+)/product(x), average/minimum/maximum of a specified collection of fields.</p>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>2.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>The value is the result of simplified field notation.</p>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>3.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>The value is the result of a Custom Calculation Script.</p>
  <p class="BodyLevel1">Options (1) and (2) are entered through the UI, option (3) is entered through the UI or through the <span class="FM_Courier">setAction</span>&#160;method of the Field object. If you use the <span class="FM_Courier">setAction</span>&#160;method, pass <span class="FM_Courier">&quot;Calculate&quot;</span>&#160;as the first parameter, and pass a script containing a call to a calculation script as the second parameter.</p>
  <p class="BodyLevel1">The calculation script makes all necessary calculations, perhaps drawing values from other text fields, then reports the calculated value to the field by setting <span class="FM_Courier">event.value</span>.</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_5Head_Example">Calculating the average of several text fields</p>
</li>
  </ul>
  <p class="BodyLevel1">The script presented here calculates the average of several text fields. If one of the fields has no value, it is not figured into the average. The example assumes all fields require a number for their value.</p>
  <p class="BodyLevel1"><a name="IX_custom_calculation_script"></a>The following script is entered as a custom calculation script:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var aNumFields = new Array(&quot;Text1.0&quot;, &quot;Text1.1&quot;, &quot;Text1.2&quot;,&quot;Text1.3&quot;,<br /><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>&quot;Text1.4&quot;);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>myAverageFunction(aNumFields);</p>
  <p class="BodyLevel1">The script above simply calls the <span class="FM_Courier">myAverageFunction</span>, it is this function that calculates the average of the array of fields passed as its argument, and sets <span class="FM_Courier">event.value</span>. The function is placed in the document as document JavaScript.</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>function myAverageFunction(aNumFields)</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>{</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>// n = number of fields that have a numerical value</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var n=0, sum = 0;</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>for ( var i=0; i&lt;aNumFields.length; i++) {</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var v = this.getField(aNumFields[i]).value;</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>if ( v != &quot;&quot; ) {</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>n++;</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>sum += v;</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>if ( n == 0 ) event.value = &quot;&quot;;</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>else event.value = sum/n; &#160;&#160;&#160;</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  </div>
</body>
</html>