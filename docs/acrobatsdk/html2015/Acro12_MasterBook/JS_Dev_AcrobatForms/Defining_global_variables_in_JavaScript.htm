<!DOCTYPE HTML>
<html>
<head><meta http-equiv="refresh" content="2;url=https://opensource.adobe.com/dc-acrobat-sdk-docs/acrobatsdk/" /><meta name="robots" content="noindex, nofollow">

 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
 <title>Defining global variables in JavaScript</title>

 <meta name="generator" content="Adobe FrameMaker 2015" />
 <meta name="Originator" content="ImportMif" />
 <meta name="OriginalFile" content="C:\Users\Perforce\Work\Groups\SDK\main\Documents\Acrobat_SDK\Acrobat_12.0 - Nov 2015\docs_fm\JavaScript\AcroJSGuide\JS_Dev_AcrobatForms.fm" />
 <link rel="stylesheet" href="JS_Dev_AcrobatForms.css" type="text/css" />


<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>

<script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
<script type="text/javascript" src="../../template/scripts/common.min.js"></script>
<script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
<script type="text/javascript" src="../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = "../..";
gCommonRootRelPath = "../..";
gTopicId = "5.1.6.2.3";
</script>
 <meta name="brsprev" value="Acro12_MasterBook/JS_Dev_AcrobatForms/Date_arithmetic.htm">
 <meta name="brsnext" value="Acro12_MasterBook/JS_Dev_AcrobatForms/Intercepting_keystrokes_in_an_Acrobat_form.htm">
 <meta name="topic-breadcrumbs" content="JavaScript > Developing Acrobat Applications Using JavaScript > Using JavaScript in Forms > Task-based topics" />
</head>

<body dir="ltr">
<script type="text/javascript" src="../../ehlpdhtm.js"></script>
<div dir="ltr">
  <h3>Defining global variables in JavaScript</h3>
  <p class="BodyLevel1"><a name="IX_global_variables_1"></a>In this section we discuss how to define, set, get and manage global variables.</p>
  <h4><a name="TOC_Enable_the_global_object"></a><a name="IX_global_object_security"></a><a name="XREF_43014_Enable_global"></a>Enable the global object security policy</h4>
  <p class="BodyLevel1"><a name="IX_Enable_Global_Object"></a>Beginning with version 8, the access to global variables has changed somewhat. The JavaScript category in the Preferences dialog box (Ctrl+K) has a new security check box, Enable Global Object Security Policy. </p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1">When checked, the default, each time a global variable is written to, the origin which set it is remembered. Only origins that match can then access the variable. </p>
</li>
   <li>
   <p class="FM_Bullet2">For files, this means only the file that set it, having the same path it had when the variable was set, can access the variable.</p>
</li>
   <li>
   <p class="FM_Bullet2">For documents from URLs it means only the host which set it can access the variable. </p>
</li>
  </ul>
  <p class="FM_Indent2">There is an important exception to the restrictions described above, global variables can be defined and accessed in a privileged context, in the console, in a batch sequence and in folder JavaScript. A global variable set at the folder level can be accessed at the folder level, or from within the console. </p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1">When not checked, documents from different origins are permitted to access the variable; this is the behavior previous to version 8.0.</p>
</li>
  </ul>
  <p class="BodyLevel1">Additional discussion and examples, see <a href="#XREF_59406_Global_object"><span class="FM_HyperText">Global object security policy</span></a>.</p>
  <h4><a name="TOC_Setting_and_getting_a"></a>Setting and getting a global variable</h4>
  <p class="BodyLevel1">The <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;extensions to JavaScript define a <span class="FM_Courier">global</span>&#160;object to which you can attach global variables as properties. To define a new global variable called <span class="FM_Courier">myVariable</span>&#160;and set it equal to the number 1, you would type:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>global.myVariable = 1;</p>
  <p class="BodyLevel1">A global variable can be read in the usual way,</p>
  <p class="FM_CodeReference">console.println(&quot;The value of global.myVariable is &quot; + global.myVariable);</p>
  <p class="BodyLevel1">The life of this variable ends when the application is closed. </p>
  <p class="BodyLevel1"><a name="IX_Enable_Global_Object_1"></a>In versions of <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;previous to 8.0, any document open in <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;(or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>) had access to any global variable and its value. This same behavior can be maintained in version 8 provided the item Enable Global Object Security Policy, found in the JavaScript section of the Preference, is unchecked. When checked, however, which is the default, a global variable is restricted to only that document that created the global variable in the case of viewing PDF files in <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>, or to only those documents that come from the same web host where the global variable was set. See the <a href="../JS_API_AcroJSPreface/JS_API_AcroJSPreface.htm#XREF_87228_JavaScript_for"><span class="FM_HyperText">JavaScript for Acrobat API Reference</span></a> for a more detailed description of this policy.</p>
  <h4><a name="TOC_Deleting_global_variables"></a>Deleting global variables</h4>
  <p class="BodyLevel1">Once you have finished using a global variable, it can be deleted with the <span class="FM_Courier">delete</span> operator.</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>global.myVariable = 1;</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>delete global.myVariable;</p>
  <h4><a name="TOC_Making_global_variables"></a>Making global variables persistent</h4>
  <p class="BodyLevel1">Global data does not persist across user sessions unless you specifically make your global variables persistent. The predefined <span class="FM_Courier">global</span>&#160;object has a method designed to do this. To make a variable named <span class="FM_Courier">myVariable</span> persist across sessions, use the following syntax:</p>
  <p class="FM_CodeReference"><a name="IX_global_variables_2"></a><a name="IX_global_setPersistent"></a><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>global.setPersistent(&quot;myVariable&quot;,true);</p>
  <p class="BodyLevel1">In future sessions, the variable will still exist with its previous value intact.</p>
  <p class="BodyLevel1">Beginning with <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;version 8, there is a new security policy for global variables that applies to global persistent variables as well. See the description above of this policy for more details. </p>
  <h4><a name="TOC_Querying_an_Acrobat_form"></a>Querying an <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable> form field value in another open form</h4>
  <p class="BodyLevel1"><a name="IX_global_subscribe"></a>Use the <span class="FM_Courier">global</span>&#160;object <span class="FM_Courier">subscribe</span>&#160;method to make the field(s) of interest available to others at runtime. For example, a document (Document A) may contain a document script (invoked when that document is first opened) that defines a global field value of interest:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>global.xyz_value = <span class="FM_CourierItalic">some value</span>;</p>
  <p class="BodyLevel1">Then, when your document (Document B) wants to access the value of interest from the other form (Document A), it can subscribe to the variable in question:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>global.subscribe(&quot;xyz_value&quot;, ValueUpdate);</p>
  <p class="BodyLevel1">In this case, <span class="FM_Courier">ValueUpdate</span>&#160;refers to a user-defined function that is called automatically whenever <span class="FM_Courier">xyz_value</span>&#160;changes. If you were using <span class="FM_Courier">xyz_value</span>&#160;in Document B as part of a field called <span class="FM_Courier">MyField</span>, you might define the callback function this way:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>function ValueUpdate( newValue ) {</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>this.getField(&quot;MyField&quot;).value = newValue;}</p>
  <p class="BodyLevel1"><a name="IX_Enable_Global_Object_2"></a>Beginning with version 8.0 of <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>, there is a new security policy for global variables that applies to global variables. For the above solution to work, the Enable Global Object Security Policy, found in the JavaScript section of the Preferences, is unchecked, or both documents must be served from the same web host. See the previous description of this policy for more details. </p>
  <h4><a name="TOC_Global_object_security"></a><a name="IX_global_object_security_1"></a><a name="XREF_59406_Global_object"></a>Global object security policy</h4>
  <p class="BodyLevel1">The new global security policy places restrictions on document access to global variables. For more information and exceptions, see <a href="#XREF_43014_Enable_global"><span class="FM_HyperText">Enable the global object security policy</span></a>.</p>
  <p class="BodyLevel1">In a document, named <span class="FM_Courier">docA.pdf</span>, execute the following script in a non-privileged context (mouse-up button):</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>global.x = 1</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>global.setPersistent(&quot;x&quot;, true);</p>
  <p class="BodyLevel1">The path for <span class="FM_Courier">docA.pdf</span>&#160;is the origin saved with the <span class="FM_Courier">global.x</span>&#160;variable; consequently, <span class="FM_Courier">docA.pdf</span>&#160;can access this variable:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>console.println(&quot;global.x = &quot; + global.x);</p>
  <p class="BodyLevel1">To set this global from <span class="FM_Courier">docA.pdf</span>, we execute <span class="FM_Courier">global.x = 3</span>, for example, in any context.</p>
  <p class="BodyLevel1">To have a document with a different path get and set this global variable, the getting and setting must occur in a trusted context, with a raised level of privilege. The following scripts are folder JavaScript.</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>myTrustedGetGlobal = app.trustedFunction ( function()</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>{</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>app.beginPriv();</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var y = global.x;</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>return y</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>app.endPriv();</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>});</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>myTrustedSetGlobal = app.trustedFunction ( function(value)</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>{</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>app.beginPriv();</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>global.x=value;</p>
  <p class="FM_CodeReference">&#160;&#160;&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>&#160;<span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>app.endPriv();</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>});</p>
  <p class="BodyLevel1">Another document, <span class="FM_Courier">docB.pdf</span>&#160;can access the <span class="FM_Courier">global.x</span> variable through the above trusted functions:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>// Mouse up button action from doc B</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>console.println(&quot;The value of global.x is &quot; + myTrustedGetGlobal());</p>
  <p class="BodyLevel1">The global can also be set from <span class="FM_Courier">docB.pdf:</span></p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>// Set global.x from docB.pdf</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>myTrustedSetGlobal(2);</p>
  <p class="BodyLevel1">Once <span class="FM_Courier">global.x</span>&#160;has been set from <span class="FM_Courier">docB.pdf,</span>&#160;the origin is changed; <span class="FM_Courier">docA.pdf</span>&#160;cannot access <span class="FM_Courier">global.x</span> directly unless it is through a trusted function:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>// Execute a mouse up button action from docA.pdf</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>console.println(&quot;The value of global.x is &quot; + myTrustedGetGlobal());</p>
  </div>
</body>
</html>