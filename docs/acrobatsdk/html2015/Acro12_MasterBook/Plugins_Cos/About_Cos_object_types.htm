<!DOCTYPE HTML>
<html>
<head><meta http-equiv="refresh" content="2;url=https://opensource.adobe.com/dc-acrobat-sdk-docs/acrobatsdk/" /><meta name="robots" content="noindex, nofollow">

 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
 <title>About Cos object types</title>

 <meta name="generator" content="Adobe FrameMaker 2015" />
 <meta name="Originator" content="ImportMif" />
 <meta name="OriginalFile" content="C:\Users\Perforce\Work\Groups\SDK\main\Documents\Common\docs_fm\PluginAppsDeveloperGuide\Plugins_Cos.fm" />
 <link rel="stylesheet" href="Plugins_Cos.css" type="text/css" />


<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>

<script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
<script type="text/javascript" src="../../template/scripts/common.min.js"></script>
<script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
<script type="text/javascript" src="../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = "../..";
gCommonRootRelPath = "../..";
gTopicId = "2.1.17.1.1";
</script>
 <meta name="brsprev" value="Acro12_MasterBook/Plugins_Cos/About_direct_and_indirect_objects.htm">
 <meta name="brsnext" value="Acro12_MasterBook/Plugins_Cos/Working_with_Cos_strings.htm">
 <meta name="topic-breadcrumbs" content="Plug-ins and Applications > Overview > Working with Cos Objects > About Cos objects" />
</head>

<body dir="ltr">
<script type="text/javascript" src="../../ehlpdhtm.js"></script>
<div dir="ltr">
  <h3><a name="IX_CosDoc_object"></a>About Cos object types</h3>
  <p class="BodyLevel1">Two API objects exist in the Cos layer:</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1"><span class="FM_Courier">CosDoc</span>, which represents an entire PDF file.</p>
</li>
   <li>
   <p class="FM_Bullet1"><a name="IX_CosObj_object"></a><span class="FM_Courier">CosObj</span>, which represents all the individual object types, such as a Cos string, described in this section. There are various methods to create the different types of Cos objects mentioned in this section, as well as getting and setting their values.</p>
</li>
  </ul>
  <h4><a name="TOC_Cos_strings"></a><a name="IX_Cos_string"></a><a name="XREF_36150_Cos_strings"></a>Cos strings</h4>
  <p class="BodyLevel1">A string object consists of a series of bytesâ€”unsigned integer values in the range 0 to 255. The string elements are not integer objects, but are stored in a more compact format. String objects can be written in the following ways:</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1">As a sequence of literal characters enclosed in parentheses</p>
</li>
   <li>
   <p class="FM_Bullet1">As hexadecimal data enclosed in angle brackets</p>
</li>
  </ul>
  <h5><a name="IX_literal_strings"></a>Literal strings</h5>
  <p class="BodyLevel1">A literal string is written as an arbitrary number of characters enclosed in parentheses. Any characters may appear in a string except unbalanced parentheses and the backslashes, which must be treated specially. Balanced pairs of parentheses within a string require no special treatment.</p>
  <p class="BodyLevel1">The following are examples of literal strings:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>(This is a string)</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>(Strings may contain newlines</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>and such)</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>(Strings may contain balanced parentheses ( ) and</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>special characters (*!&amp;}^% and so on).)</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>(The following is an empty string.)</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>()</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>(It has zero (0) length.)</p>
  <p class="BodyLevel1">Within a literal string, the backslash (\) is used as an escape character for various purposes, such as including newline characters, nonprinting ASCII characters, unbalanced parentheses, or the backslash character itself in the string. The character immediately following the backslash determines its precise interpretation. If the character following the backslash is not one of those shown in the following table, the backslash is ignored. The following table shows valid literal string escape sequences.</p>
<div width="100%" align="left">
  <table dir="ltr" style=" border-spacing:0; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:alignleft; width:100%; direction:ltr; max-width:246.26pt;" cellspacing="0">
   <tr style=" height : 22.50pt;">
   <th style="width : 115.200pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableHead">Escape sequence</p>
</th>
   <th style="width : 131.064pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableHead">Description</p>
</th>
</tr>
   <tr style=" height : 22.50pt;">
   <td style="width : 115.200pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">\n</p>
</td>
   <td style="width : 131.064pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Line feed (LF)</p>
</td>
</tr>
   <tr style=" height : 22.50pt;">
   <td style="width : 115.200pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">\r</p>
</td>
   <td style="width : 131.064pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Carriage return (CR)</p>
</td>
</tr>
   <tr style=" height : 22.50pt;">
   <td style="width : 115.200pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">\t</p>
</td>
   <td style="width : 131.064pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Horizontal tab (HT)</p>
</td>
</tr>
   <tr style=" height : 22.50pt;">
   <td style="width : 115.200pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">\b</p>
</td>
   <td style="width : 131.064pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Backspace (BS)</p>
</td>
</tr>
   <tr style=" height : 22.50pt;">
   <td style="width : 115.200pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">\f</p>
</td>
   <td style="width : 131.064pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Form feed (FF)</p>
</td>
</tr>
   <tr style=" height : 22.50pt;">
   <td style="width : 115.200pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">\(</p>
</td>
   <td style="width : 131.064pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Left parenthesis</p>
</td>
</tr>
   <tr style=" height : 22.50pt;">
   <td style="width : 115.200pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">\)</p>
</td>
   <td style="width : 131.064pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Right parenthesis</p>
</td>
</tr>
   <tr style=" height : 22.50pt;">
   <td style="width : 115.200pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">\\</p>
</td>
   <td style="width : 131.064pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Backslash</p>
</td>
</tr>
   <tr style=" height : 22.50pt;">
   <td style="width : 115.200pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">\ddd</p>
</td>
   <td style="width : 131.064pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Character code ddd (octal)</p>
</td>
</tr>
  </table>
</div>
  <p class="BodyLevel1">If a string is too long to be conveniently placed on a single line, it may be split across multiple lines by using the backslash character at the end of a line to indicate that the string continues on the following line. The backslash and the end-of-line marker following it are not considered part of the string. For example, the following strings examples are equivalent:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>(These \</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>two strings \</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>are the same.)</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>(These two strings are the same.)</p>
  <h5><a name="IX_hexadecimal_strings"></a>Hexadecimal strings</h5>
  <p class="BodyLevel1">Strings may also be written in hexadecimal form, which is useful for including arbitrary binary data in a PDF file. A hexadecimal string is written as a sequence of hexadecimal digits (0â€“9 and either Aâ€“F or aâ€“f) enclosed within angle brackets (&lt; and &gt;). Consider the following example:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>&lt;4E6F762073686D6F7A206B6120706F702E &gt;</p>
  <p class="BodyLevel1">Each pair of hexadecimal digits defines one byte of the string. White-space characters (such as space, tab, carriage return, line feed, and form feed) are ignored. If the final digit of a hexadecimal string is missing, that is, if there is an odd number of digits, the final digit is assumed to be 0. Consider the following example:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>&lt;901FA3&gt;</p>
  <p class="BodyLevel1">This is a 3-byte string consisting of the characters whose hexadecimal codes are 90, 1F, and A3, but <span class="FM_Courier">&lt;901FA&gt;</span> is a 3-byte string containing the characters whose hexadecimal codes are 90, 1F, and A0.</p>
  <h4><a name="TOC_Cos_arrays"></a><a name="IX_cos_array"></a>Cos arrays</h4>
  <p class="BodyLevel1">Arrays are one-dimensional collections of objects accessed by a numeric index. Array indexes are zero-based and may be any combination of the Cos data types. The following array has seven elements: three integers, a string, a Boolean value, a dictionary (containing one key-value pair), and an indirect object reference.</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>[ 1 2 3 (This is a string) true &lt;&lt; /Key (The value) &gt;&gt; 6 0 R ]</p>
  <h4><a name="TOC_Cos_names"></a><a name="IX_cos_names"></a><a name="XREF_29290_Cos_names"></a>Cos names</h4>
  <p class="BodyLevel1">A name object is an atomic symbol uniquely defined by a sequence of characters. Uniquely defined means that any two name objects made up of the same sequence of characters are identically the same object. Atomic means that a name has no internal structure; although it is defined by a sequence of characters, those characters are not considered elements of the name.</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>/AName</p>
  <p class="BodyLevel1">A slash character (/) introduces a name. The slash is not part of the name but is a prefix indicating that the following sequence of characters constitutes a name. There can be no white-space characters between the slash and the first character in the name. The name may include any regular characters, but not delimiter or white-space characters. Uppercase and lowercase letters are considered distinct: /A and /a are different names. The following examples are valid literal names:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>/Name1</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>/ASomewhatLongerName</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>/A;Name_With-Various***Characters?</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>/1.2</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>/$$</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>/@pattern</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>/.notdef</p>
  <p class="BodyLevel1">Beginning with PDF 1.2, any character except null (character code 0) may be included in a name by writing its 2-digit hexadecimal code, preceded by the number sign character (#). This syntax is required to represent any of the delimiter or white-space characters or the number sign character itself; it is recommended but not required for characters whose codes are outside the range 33 (!) to 126 (~). The examples shown in the following table are valid literal names in PDF 1.2 and later.</p>
<div width="100%" align="left">
  <table dir="ltr" style=" border-spacing:0; padding-top:6.00pt; padding-right:6.00pt; padding-bottom:6.00pt; float:alignleft; width:100%; direction:ltr; max-width:280.80pt;" cellspacing="0">
   <tr style=" height : 22.50pt;">
   <th style="width : 151.200pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableHead">Literal name</p>
</th>
   <th style="width : 129.600pt; border-top-style: solid; border-top-width: 1px; border-top-color: #000000; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableHead">Result</p>
</th>
</tr>
   <tr style=" height : 22.50pt;">
   <td style="width : 151.200pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">/Adobe#20Green</p>
</td>
   <td style="width : 129.600pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">Adobe Green</p>
</td>
</tr>
   <tr style=" height : 22.50pt;">
   <td style="width : 151.200pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">/PANTONE#205757#20CV</p>
</td>
   <td style="width : 129.600pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">PANTONE 5757 CV</p>
</td>
</tr>
   <tr style=" height : 22.50pt;">
   <td style="width : 151.200pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">/paired#28#29parentheses</p>
</td>
   <td style="width : 129.600pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">paired()parentheses</p>
</td>
</tr>
   <tr style=" height : 22.50pt;">
   <td style="width : 151.200pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">/The_Key_of_F#23_Minor</p>
</td>
   <td style="width : 129.600pt; border-bottom-style: solid; border-bottom-width: 0px; border-bottom-color: #999999; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">The_Key_of_F#_Minor</p>
</td>
</tr>
   <tr style=" height : 22.50pt;">
   <td style="width : 151.200pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">/A#42</p>
</td>
   <td style="width : 129.600pt; border-bottom-style: solid; border-bottom-width: 1px; border-bottom-color: #000000; vertical-align : top;padding-left: 6.00pt; padding-top: 3.00pt; padding-right: 6.00pt; padding-bottom: 3.00pt;">
   <p class="FM_TableBody">AB</p>
</td>
</tr>
  </table>
</div>
  <p class="BodyLevel1">The length of a name is subject to an implementation limit. The limit applies to the number of characters in the nameâ€™s internal representation. For example, the name /A#20B has four characters (/, A, space, B), not six.</p>
  <p class="BodyLevel1">Name objects are treated as atomic symbols within a PDF file. Ordinarily, the bytes making up the name are never treated as text to be presented to a user. However, occasionally the need arises to treat a name object as text, such as one that represents a font name.</p>
  <p class="BodyLevel1">In such situations, it is recommended that the sequence of bytes (after expansion of # sequences, if any) be interpreted according to UTF-8, a variable-length byte-encoded representation of Unicode in which the printable ASCII characters have the same representations as in ASCII. This enables a name object to represent text in any natural language, subject to the implementation limit on the length of a name.</p>
  <h4><a name="TOC_Cos_dictionaries"></a><a name="IX_cos_dictionaries"></a><a name="XREF_50984_Cos_dictionaries"></a>Cos dictionaries</h4>
  <p class="BodyLevel1">A dictionary object is an associative table containing pairs of objects, known as the dictionaryâ€™s entries. The first element of each entry is the key and the second element is the value. The key must be a name. The value can be any kind of object, including other dictionaries and streams. A dictionary entry whose value is null is equivalent to an absent entry.</p>
  <p class="BodyLevel1">A dictionary is a table data structure whose elements are object pairs:</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1">The first element is the key, which is always a name object, a sequence of characters beginning with the forward slash (/) character. No two entries in the same dictionary should have the same key. If a key does appear more than once, its value is undefined.</p>
</li>
   <li>
   <p class="FM_Bullet1">The second element is the Cos object representing the value. You can add new key-value pairs, modify existing key-value pairs, or delete existing key-value pairs in a dictionary.</p>
</li>
  </ul>
  <p class="BodyLevel1">The following is an example of a dictionary:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>&lt;&lt; /Name John /Age 27 /AnArray [1 2 3]&gt;&gt;</p>
  <p class="BodyLevel1">The value associated with the <span class="FM_Courier">Name</span>&#160;key is the value <span class="FM_Courier">John</span>. The value for the <span class="FM_Courier">Age</span>&#160;key is <span class="FM_Courier">27</span>. And the value for the <span class="FM_Courier">AnArray</span>&#160;key is an array with the values <span class="FM_Courier">1</span>, <span class="FM_Courier">2</span>, and <span class="FM_Courier">3</span>. For information about creating a Cos dictionary, see <a href="Creating_Cos_dictionaries.htm#XREF_10844_Creating_a_Cos">Creating Cos dictionaries</a>.</p>
  <h4><a name="TOC_Cos_streams"></a><a name="IX_cos_streams"></a><a name="XREF_63762_Cos_streams"></a>Cos streams</h4>
  <p class="BodyLevel1">A stream is a sequence of bytes that can be read a portion at a time. For this reason, objects with potentially large amounts of data, such as images and page descriptions, are represented as streams. A stream consists of a dictionary followed by zero or more bytes bracketed between the keywords <span class="FM_Courier">stream</span>&#160;and <span class="FM_Courier">endstream</span>. The following example shows the basic syntax of a stream:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>dictionary</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>stream</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>â€¦Zero or more bytesâ€¦</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>endstream</p>
  <p class="BodyLevel1">The <span class="FM_Courier">stream</span>&#160;keyword should be followed by an end-of-line marker consisting of either a carriage return and a line feed or just a line feed, and not by a carriage return alone. The sequence of bytes that make up a stream is located between the <span class="FM_Courier">stream</span>&#160;and <span class="FM_Courier">endstream</span>&#160;keywords. Streams must be indirect objects and the stream dictionary must be a direct object. (See <a href="About_direct_and_indirect_objects.htm#XREF_86862_About_direct_and">About direct and indirect objects</a>.)</p>
  <p class="FM_Note"><span class="FM_Z_NoteCaution">Note:<span style="padding-left: 4pt;" class="FMAutoNumber_1"></span></span>For more information about streams, see the <uservariable x-value="PDF Reference" x-showvalue="TRUE" name="Ref_DocPDF" x-format="Ref_DocPDF"><span class="FM_Italic">PDF Reference</span></uservariable><span class="FM_Italic"></span>. This reference is available within the portfolio called <span class="FM_HyperText"><a href="www.adobe.com/go/acrobatsdk_pdf_reference">PDF Reference and Related Documentation</a></span>, which is located at the <span class="FM_HyperText"><a href="http://www.adobe.com/go/pdf_developer">Adobe PDF Technology Center</a></span>.</p>
  </div>
</body>
</html>