<!DOCTYPE HTML>
<html>
<head><meta http-equiv="refresh" content="2;url=https://opensource.adobe.com/dc-acrobat-sdk-docs/acrobatsdk/" /><meta name="robots" content="noindex, nofollow">

 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
 <title>Properties</title>

 <meta name="generator" content="Adobe FrameMaker 2015" />
 <meta name="Originator" content="ImportMif" />
 <meta name="OriginalFile" content="C:\Users\Perforce\Work\Groups\SDK\main\Documents\Acrobat_SDK\Acrobat_12.0 - Nov 2015\docs_fm\InterApplication_Communication\IACReference\IAC_API_FormsIntro.fm" />
 <link rel="stylesheet" href="IAC_API_FormsIntro.css" type="text/css" />


<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>

<script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
<script type="text/javascript" src="../../template/scripts/common.min.js"></script>
<script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
<script type="text/javascript" src="../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = "../..";
gCommonRootRelPath = "../..";
gTopicId = "6.2.5.1.2";
</script>
 <meta name="brsprev" value="Acro12_MasterBook/IAC_API_FormsIntro/Methods1.htm">
 <meta name="brsnext" value="Acro12_MasterBook/IAC_API_FormsIntro/Fields.htm">
 <meta name="topic-breadcrumbs" content="Acrobat Interapplication Communication > Interapplication Communication API Reference > Acrobat Forms Plug-In > Field" />
</head>

<body dir="ltr">
<script type="text/javascript" src="../../ehlpdhtm.js"></script>
<div dir="ltr">
  <h3>Properties</h3>
  <p class="BodyLevel1">The <span class="FM_Courier">Field</span> object has the following properties.</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1"><a href="#XREF_44698_Alignment"><span class="FM_HyperText_Courier">Alignment</span></a></p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_71368_BorderStyle"><span class="FM_HyperText_Courier">BorderStyle</span></a></p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_34046_BorderWidth"><span class="FM_HyperText_Courier">BorderWidth</span></a></p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_12361_ButtonLayout"><span class="FM_HyperText_Courier">ButtonLayout</span></a></p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_91573_CalcOrderIndex"><span class="FM_HyperText_Courier">CalcOrderIndex</span></a></p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_77672_CharLimit"><span class="FM_HyperText_Courier">CharLimit</span></a></p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_89449_DefaultValue"><span class="FM_HyperText_Courier">DefaultValue</span></a></p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_95788_Editable"><span class="FM_HyperText_Courier">Editable</span></a></p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_59064_Highlight"><span class="FM_HyperText_Courier">Highlight</span></a></p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_60029_IsHidden"><span class="FM_HyperText_Courier">IsHidden</span></a></p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_20163_IsMultiline"><span class="FM_HyperText_Courier">IsMultiline</span></a></p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_44535_IsPassword"><span class="FM_HyperText_Courier">IsPassword</span></a></p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_90143_IsReadOnly"><span class="FM_HyperText_Courier">IsReadOnly</span></a></p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_37697_IsRequired"><span class="FM_HyperText_Courier">IsRequired</span></a></p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_55754_IsTerminal"><span class="FM_HyperText_Courier">IsTerminal</span></a></p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_47912_Name"><span class="FM_HyperText_Courier">Name</span></a></p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_80007_NoViewFlag"><span class="FM_HyperText_Courier">NoViewFlag</span></a></p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_19778_PrintFlag"><span class="FM_HyperText_Courier">PrintFlag</span></a></p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_68974_Style"><span class="FM_HyperText_Courier">Style</span></a></p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_55208_TextFont"><span class="FM_HyperText_Courier">TextFont</span></a></p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_32614_TextSize"><span class="FM_HyperText_Courier">TextSize</span></a></p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_66486_Type"><span class="FM_HyperText_Courier">Type</span></a></p>
</li>
   <li>
   <p class="FM_Bullet1"><a href="#XREF_35523_Value"><span class="FM_HyperText_Courier">Value</span></a></p>
</li>
  </ul>
  <h4><a name="TOC_Alignment3"></a><a name="IX_Alignment_property"></a><a name="XREF_44698_Alignment"></a>Alignment</h4>
  <p class="BodyLevel1">The text alignment of a text field. Valid alignments are:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>left </p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>center</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>right </p>
  <h5>Syntax</h5>
  <p class="FM_CodeReference">[get/set] String </p>
  <h5>Returns</h5>
  <p class="BodyLevel1">If the field is terminal and has multiple child annotations, a get returns the alignment for the first child, whichever annotation that happens to be. </p>
  <p class="BodyLevel1">On a set, the property is propagated to any child annotations underneath, so the field may be non-terminal.</p>
  <h5>Exceptions</h5>
  <p class="BodyLevel1">If the field is not of type <span class="FM_Courier">text</span>, an exception <span class="FM_HyperText_Courier"></span><a href="Exceptions.htm#XREF_95289"><span class="FM_HyperText_Courier">AutErcNotToThisFieldType</span></a><span class="FM_HyperText_Courier"></span>&#160;is returned. </p>
  <p class="BodyLevel1">On a get, if the field is non-terminal, an exception <span class="FM_HyperText_Courier"></span><a href="Exceptions.htm#XREF_63155_AutErcNotTerminal"><span class="FM_HyperText_Courier">AutErcNotTerminal</span></a><span class="FM_HyperText_Courier"></span> is returned.</p>
  <h5>Example</h5>
  <p class="FM_CodeReference">Field.Alignment = left</p>
  <h4><a name="TOC_BorderStyle1"></a><a name="IX_BorderStyle_property"></a><a name="XREF_71368_BorderStyle"></a>BorderStyle</h4>
  <p class="BodyLevel1">The border style for a field. Valid border styles include <span class="FM_Courier">solid</span>, <span class="FM_Courier">dashed</span>, <span class="FM_Courier">beveled</span>, <span class="FM_Courier">inset</span>, and <span class="FM_Courier">underline</span>. </p>
  <h5>Syntax</h5>
  <p class="FM_CodeReference">[get/set] String</p>
  <h5>Returns</h5>
  <p class="BodyLevel1">If it is terminal and has multiple child annotations, a get returns the value of the border style for the first child, whichever annotation that happens to be. </p>
  <p class="BodyLevel1">On a set, the property is propagated to any child annotations underneath, so the field may be non-terminal.</p>
  <h5>Exceptions</h5>
  <p class="BodyLevel1">On a get, raises <span class="FM_HyperText_Courier"></span><a href="Exceptions.htm#XREF_63155_AutErcNotTerminal"><span class="FM_HyperText_Courier">AutErcNotTerminal</span></a><span class="FM_HyperText_Courier"></span>&#160;if the field is non-terminal, an exception is returned. </p>
  <h5>Example</h5>
  <p class="FM_CodeReference">Field.BorderStyle = &quot;beveled&quot;</p>
  <h4><a name="TOC_BorderWidth1"></a><a name="IX_BorderWidth_property"></a><a name="XREF_34046_BorderWidth"></a>BorderWidth</h4>
  <p class="BodyLevel1">The thickness of the border when stroking the perimeter of a fieldâ€™s rectangle. If the border color is transparent, this property has no effect except in the case of a beveled border. The value <span class="FM_Courier">0</span>&#160;represents no border, and the value <span class="FM_Courier">3</span>&#160;represents a thick border. </p>
  <h5>Syntax</h5>
  <p class="FM_CodeReference">[get/set] short</p>
  <h5>Returns</h5>
  <p class="BodyLevel1">If it is terminal and has multiple child annotations, a get returns the value of the border width for the first child, whichever annotation that happens to be.</p>
  <p class="BodyLevel1">On a set, the property is propagated to any child annotations underneath, so the field may be non-terminal.</p>
  <h5>Exceptions</h5>
  <p class="BodyLevel1">On a get, if the field is non-terminal, an exception <span class="FM_HyperText_Courier"></span><a href="Exceptions.htm#XREF_63155_AutErcNotTerminal"><span class="FM_HyperText_Courier">AutErcNotTerminal</span></a><span class="FM_HyperText_Courier"></span> is returned.</p>
  <h5>Example</h5>
  <p class="FM_CodeReference">Field.BorderWidth = 1</p>
  <h4><a name="TOC_ButtonLayout"></a><a name="IX_ButtonLayout_property"></a><a name="XREF_12361_ButtonLayout"></a>ButtonLayout</h4>
  <p class="BodyLevel1">The layout appearance of a button. Valid values include:</p>
  <p class="FM_Indent1"><span class="FM_Courier">0</span> â€” Text only; the button has a caption but no icon.</p>
  <p class="FM_Indent1"><span class="FM_Courier">1</span> â€” Icon only; the button has an icon but no caption.</p>
  <p class="FM_Indent1"><span class="FM_Courier">2</span> â€” Icon over text; the icon should appear on top of the caption.</p>
  <p class="FM_Indent1"><span class="FM_Courier">3</span>&#160;â€” Text over icon; the text should appear on top of the icon. </p>
  <p class="FM_Indent1"><span class="FM_Courier">4</span> â€” Icon then text; the icon should appear to the left of the caption.</p>
  <p class="FM_Indent1"><span class="FM_Courier">5</span> â€” Text then icon; the icon should appear to the right of the caption.</p>
  <p class="FM_Indent1"><span class="FM_Courier">6</span> â€” Text over icon; the text should be overlaid on top of the icon.</p>
  <p class="BodyLevel1">If it is terminal and has multiple child annotations, a get returns the layout for the first child, whichever annotation that happens to be. </p>
  <p class="BodyLevel1">On a set, the property is propagated to any child annotations underneath, therefore the field can be non-terminal.</p>
  <h5>Syntax</h5>
  <p class="FM_CodeReference">[get/set] short </p>
  <h5>Exceptions</h5>
  <p class="BodyLevel1">If the field is not of type <span class="FM_Courier">button</span>, an exception <span class="FM_HyperText_Courier"></span><a href="Exceptions.htm#XREF_95289"><span class="FM_HyperText_Courier">AutErcNotToThisFieldType</span></a><span class="FM_HyperText_Courier"></span>&#160;is returned. </p>
  <p class="BodyLevel1">On a get, if the field is non-terminal, an exception <span class="FM_HyperText_Courier"></span><a href="Exceptions.htm#XREF_63155_AutErcNotTerminal"><span class="FM_HyperText_Courier">AutErcNotTerminal</span></a><span class="FM_HyperText_Courier"></span> is returned.</p>
  <h5>Example</h5>
  <p class="FM_CodeReference">Field.ButtonLayout = 2</p>
  <h4><a name="TOC_CalcOrderIndex1"></a><a name="IX_CalcOrderIndex_property"></a><a name="XREF_91573_CalcOrderIndex"></a>CalcOrderIndex</h4>
  <p class="BodyLevel1">The zero-based calculation order of fields in the document. If you want the calculation for a field <span class="FM_Courier">f2</span>&#160;to be performed after that for field <span class="FM_Courier">f1</span>, you need only set the <span class="FM_Courier">CalcOrderIndex</span>&#160;for <span class="FM_Courier">f2</span>&#160;to <span class="FM_Courier">f1</span>â€™s <span class="FM_Courier">CalcOrderIndex</span>&#160;+ 1. The elements in the calculation order array are shifted to make room for the insertion, but the first calculation is still at index 0. </p>
  <p class="BodyLevel1">For more information, see the <a href="../JS_API_AcroJSPreface/JS_API_AcroJSPreface.htm#XREF_87228_JavaScript_for"><span class="FM_HyperText">JavaScript for Acrobat API Reference</span></a>.</p>
  <h5>Syntax</h5>
  <p class="FM_CodeReference">[get/set] short </p>
  <h5>Example</h5>
  <p class="FM_CodeReference">Set F1 = Fields(&quot;SubTotal&quot;)</p>
  <p class="FM_CodeReference">Set F2 = Fields(&quot;Total&quot;)</p>
  <p class="FM_CodeReference">F2.CalcOrderIndex = F1.CalcOrderIndex + 1</p>
  <h4><a name="TOC_CharLimit1"></a><a name="IX_CharLimit_property"></a><a name="XREF_77672_CharLimit"></a>CharLimit</h4>
  <p class="BodyLevel1">The limit on the number of characters that a user can type into a text field.</p>
  <p class="BodyLevel1">On a set, the property is propagated to any child annotations underneath, if any.</p>
  <h5>Syntax</h5>
  <p class="FM_CodeReference">[get/set] short </p>
  <h5>Exceptions</h5>
  <p class="BodyLevel1">&#160;If the field is not of type <span class="FM_Courier">text</span>, an exception <span class="FM_HyperText_Courier"></span><a href="Exceptions.htm#XREF_95289"><span class="FM_HyperText_Courier">AutErcNotToThisFieldType</span></a><span class="FM_HyperText_Courier"></span>&#160;is returned. </p>
  <h4><a name="TOC_DefaultValue1"></a><a name="IX_DefaultValue_property"></a><a name="XREF_89449_DefaultValue"></a>DefaultValue</h4>
  <p class="BodyLevel1">The default value of the field. It returns the empty string if the field has no default value. If the field is non-terminal, an exception <span class="FM_HyperText_Courier"></span><a href="Exceptions.htm#XREF_63155_AutErcNotTerminal"><span class="FM_HyperText_Courier">AutErcNotTerminal</span></a><span class="FM_HyperText_Courier"></span>&#160;is returned. </p>
  <h5>Syntax</h5>
  <p class="FM_CodeReference">[get/set] String </p>
  <h5>See also</h5>
  <p class="BodyLevel1"><a href="#XREF_35523_Value"><span class="FM_HyperText_Courier">Value</span></a>&#160;</p>
  <h4><a name="TOC_Editable1"></a><a name="IX_Editable_property"></a><a name="XREF_95788_Editable"></a>Editable</h4>
  <p class="BodyLevel1">Determines whether the user can type in a selection or must choose one of the provided selections. Comboboxes can be editable; that is, the user can type in a selection.</p>
  <p class="BodyLevel1">On a set, the property is propagated to any child annotations underneath, if any.</p>
  <h5>Syntax</h5>
  <p class="FM_CodeReference">[get/set] Boolean</p>
  <h5>Exceptions</h5>
  <p class="BodyLevel1">Returns an exception of <span class="FM_HyperText_Courier"></span><a href="Exceptions.htm#XREF_95289"><span class="FM_HyperText_Courier">AutErcNotToThisFieldType</span></a><span class="FM_HyperText_Courier"></span> if the field is not of type combobox.</p>
  <h5>Example</h5>
  <p class="FM_CodeReference">Field.Editable = False</p>
  <h4><a name="TOC_Highlight1"></a><a name="IX_Highlight_property"></a><a name="XREF_59064_Highlight"></a>Highlight</h4>
  <p class="BodyLevel1">Defines how a button reacts when a user clicks it. The four highlight modes supported are:</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1">none</p>
</li>
   <li>
   <p class="FM_Bullet1">invert</p>
</li>
   <li>
   <p class="FM_Bullet1">push</p>
</li>
   <li>
   <p class="FM_Bullet1">outline </p>
</li>
  </ul>
  <p class="BodyLevel1">If it is terminal and has multiple child annotations, a get returns the highlight for the first child, whichever annotation that happens to be.</p>
  <p class="BodyLevel1">On a set, the property is propagated to any child annotations underneath, so the field may be non-terminal.</p>
  <h5>Syntax</h5>
  <p class="FM_CodeReference">[get/set] String </p>
  <h5>Exceptions</h5>
  <p class="BodyLevel1">If the field is not of type button, an exception <span class="FM_HyperText_Courier"></span><a href="Exceptions.htm#XREF_95289"><span class="FM_HyperText_Courier">AutErcNotToThisFieldType</span></a><span class="FM_HyperText_Courier"></span> is returned.</p>
  <p class="BodyLevel1">On a get, if the field is non-terminal, an exception <span class="FM_HyperText_Courier"></span><a href="Exceptions.htm#XREF_63155_AutErcNotTerminal"><span class="FM_HyperText_Courier">AutErcNotTerminal</span></a><span class="FM_HyperText_Courier"></span> is returned.</p>
  <h5>Example</h5>
  <p class="FM_CodeReference">Field.Highlight = &quot;invert&quot;</p>
  <h4><a name="TOC_IsHidden"></a><a name="IX_IsHidden_property"></a><a name="XREF_60029_IsHidden"></a>IsHidden</h4>
  <p class="BodyLevel1">Determines whether the field is hidden or visible to the user. If the value is <span class="FM_Courier">true</span>&#160;the field is invisible, and <span class="FM_Courier">false</span>&#160;indicates that the field is visible. </p>
  <p class="BodyLevel1">During get operations, if the field is non-terminal, an exception <span class="FM_HyperText_Courier"></span><a href="Exceptions.htm#XREF_63155_AutErcNotTerminal"><span class="FM_HyperText_Courier">AutErcNotTerminal</span></a><span class="FM_HyperText_Courier"></span>&#160;is returned. If it is terminal, and has multiple child annotations, a get returns the value of the hidden flag for the first child, whichever annotation that happens to be.</p>
  <p class="BodyLevel1">During set operations, the property is propagated to any child annotations underneath, therefore a field can be non-terminal.</p>
  <h5>Syntax</h5>
  <p class="FM_CodeReference">[get/set] Boolean</p>
  <h5>Example</h5>
  <p class="FM_CodeReference">'Hide &quot;name.last&quot; </p>
  <p class="FM_CodeReference">Set Field = Fields(&quot;name.last&quot;)</p>
  <p class="FM_CodeReference">Field.IsHidden = True </p>
  <h4><a name="TOC_IsMultiline"></a><a name="IX_IsMultiline_property"></a><a name="XREF_20163_IsMultiline"></a>IsMultiline</h4>
  <p class="BodyLevel1">Determines whether the text field is multi-line or single-line. On a set, the property is propagated to any child annotations underneath, if any.</p>
  <h5>Syntax</h5>
  <p class="FM_CodeReference">[get/set] Boolean </p>
  <h5>Exceptions</h5>
  <p class="BodyLevel1">If the field is not of type <span class="FM_Courier">text</span>, an exception <a href="Exceptions.htm#XREF_95289"><span class="FM_HyperText_Courier">AutErcNotToThisFieldType</span></a>&#160;is returned. </p>
  <h5>Example</h5>
  <p class="FM_CodeReference">Field.IsMultiline = True</p>
  <h4><a name="TOC_IsPassword"></a><a name="IX_IsPassword_property"></a><a name="XREF_44535_IsPassword"></a>IsPassword</h4>
  <p class="BodyLevel1">Determines whether the field will display asterisks for the data entered. Upon submission, the actual data entered is sent. Fields that have the password attribute set will not have the data in the field saved when the document is saved to disk. </p>
  <p class="BodyLevel1">On a set, the property is propagated to any child annotations underneath, if any.</p>
  <h5>Syntax</h5>
  <p class="FM_CodeReference">[get/set] Boolean </p>
  <h5>Exceptions</h5>
  <p class="BodyLevel1">If the field is not of type <span class="FM_Courier">text</span>, an exception <a href="Exceptions.htm#XREF_95289"><span class="FM_HyperText_Courier">AutErcNotToThisFieldType</span></a>&#160;is returned. </p>
  <h5>Example</h5>
  <p class="FM_CodeReference">Field.IsPassword = True</p>
  <h4><a name="TOC_IsReadOnly"></a><a name="IX_IsReadOnly_property"></a><a name="XREF_90143_IsReadOnly"></a>IsReadOnly</h4>
  <p class="BodyLevel1">The read-only characteristic of a field. When a field is read-only, the user can see the field but cannot change it. If a button is read-only, the user cannot click it to execute an action. </p>
  <p class="BodyLevel1">Because this is a field flag and not an annotation flag, both a get and a set of this property are allowed regardless of whether the field is terminal or non-terminal. </p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1">A get on a non-terminal field retrieves that fieldâ€™s flag. </p>
</li>
   <li>
   <p class="FM_Bullet1">A set changes the flag on all its terminal children.</p>
</li>
  </ul>
  <h5>Syntax</h5>
  <p class="FM_CodeReference">[get/set] Boolean </p>
  <h4><a name="TOC_IsRequired"></a><a name="IX_IsRequired_property"></a><a name="XREF_37697_IsRequired"></a>IsRequired</h4>
  <p class="BodyLevel1">The required characteristic of a field. When a field is required, its value must be non-<span class="FM_Courier">NULL</span>&#160;when the user clicks a submit button that causes the value of the field to be sent to the web. If the field value is <span class="FM_Courier">NULL</span>, the user receives a warning message and the submit does not occur.</p>
  <p class="BodyLevel1">Since this is a field flag and not an annotation flag, both a get and a set of this property are allowed, regardless of whether the field is terminal or non-terminal.</p>
  <p class="BodyLevel1">A get on a non-terminal field retrieves that fieldâ€™s flag. A set changes the flag on all its terminal children.</p>
  <h5>Syntax</h5>
  <p class="FM_CodeReference">[get/set] Boolean</p>
  <h4><a name="TOC_IsTerminal"></a><a name="IX_IsTerminal_property"></a><a name="XREF_55754_IsTerminal"></a>IsTerminal</h4>
  <p class="BodyLevel1"><span class="FM_Courier">true</span>&#160;if the field is terminal, otherwise <span class="FM_Courier">false</span>.</p>
  <h5>Syntax</h5>
  <p class="FM_CodeReference">[read-only] Boolean</p>
  <h5>Example</h5>
  <p class="FM_CodeReference">Dim Field As AFORMAUTLib.Field</p>
  <p class="FM_CodeReference">Dim bTerminal As Boolean</p>
  <p class="FM_CodeReference">&nbsp;</p>
  <p class="FM_CodeReference">'bTerminal should be True</p>
  <p class="FM_CodeReference">bTerminal = Field.IsTerminal</p>
  <h4><a name="TOC_Name21"></a><a name="IX_Name_property_2"></a><a name="XREF_47912_Name"></a>Name</h4>
  <p class="BodyLevel1">The fully qualified name of the field. It is the default member of the <span class="FM_Courier">Field</span> interface.</p>
  <h5>Syntax</h5>
  <p class="FM_CodeReference">[read-only] String</p>
  <h4><a name="TOC_NoViewFlag"></a><a name="IX_NoViewFlag_property"></a><a name="XREF_80007_NoViewFlag"></a>NoViewFlag</h4>
  <p class="BodyLevel1">Determines whether a given field prints but does not display on the screen. </p>
  <p class="BodyLevel1">Set the <span class="FM_Courier">NoViewFlag</span>&#160;property to <span class="FM_Courier">true</span>&#160;to allow the field to appear when the user prints the document but not when it displays on the screen; set it to <span class="FM_Courier">false</span>&#160;to allow both printing and displaying. </p>
  <p class="BodyLevel1">On a get, if the field is non-terminal, an exception <span class="FM_HyperText_Courier"></span><a href="Exceptions.htm#XREF_63155_AutErcNotTerminal"><span class="FM_HyperText_Courier">AutErcNotTerminal</span></a><span class="FM_HyperText_Courier"></span>&#160;is returned. If it is terminal, and has multiple child annotations, a get returns the value of the no-view flag for the first child, whichever annotation that happens to be. </p>
  <p class="BodyLevel1">On a set, the property is propagated to any child annotations underneath, so the field may be non-terminal.</p>
  <h5>Syntax</h5>
  <p class="FM_CodeReference">[get/set] Boolean</p>
  <h4><a name="TOC_PrintFlag"></a><a name="IX_PrintFlag_property"></a><a name="XREF_19778_PrintFlag"></a>PrintFlag</h4>
  <p class="BodyLevel1">Determines whether a field prints. Set the <span class="FM_Courier">PrintFlag</span>&#160;property to <span class="FM_Courier">true</span>&#160;to allow the field to appear when the user prints the document, set it to <span class="FM_Courier">false</span>&#160;to prevent printing. </p>
  <p class="BodyLevel1">On a get, if the field is non-terminal, an exception <span class="FM_HyperText_Courier"></span><a href="Exceptions.htm#XREF_63155_AutErcNotTerminal"><span class="FM_HyperText_Courier">AutErcNotTerminal</span></a><span class="FM_HyperText_Courier"></span>&#160;is returned. If it is terminal, and has multiple child annotations, a get returns the value of the print flag for the first child, whichever annotation that happens to be. </p>
  <p class="BodyLevel1">On a set, the property is propagated to any child annotations underneath, so the field may be non-terminal.</p>
  <h5>Syntax</h5>
  <p class="FM_CodeReference">[get/set] Boolean</p>
  <h4><a name="TOC_Style4"></a><a name="IX_Style_property"></a><a name="XREF_68974_Style"></a>Style</h4>
  <p class="BodyLevel1">The style of a checkbox or a radio button (the glyph used to indicate that the check box or radio button has been selected). </p>
  <p class="BodyLevel1">Valid styles include:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>check</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>cross</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>diamond</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>circle</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>star </p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>square </p>
  <p class="BodyLevel1">If it is terminal and has multiple child annotations, a get returns the style for the first child, whichever annotation that happens to be.</p>
  <p class="BodyLevel1">On a set, the property is propagated to any child annotations underneath, therefore a field can be non-terminal.</p>
  <h5>Syntax</h5>
  <p class="FM_CodeReference">[get/set] String </p>
  <h5>Exceptions</h5>
  <p class="BodyLevel1">During set, if the field is not of type checkbox or radio button, an exception <a href="Exceptions.htm#XREF_95289"><span class="FM_HyperText_Courier">AutErcNotToThisFieldType</span></a> is returned.</p>
  <p class="BodyLevel1">On a get, if the field is non-terminal, an exception <span class="FM_HyperText_Courier"></span><a href="Exceptions.htm#XREF_63155_AutErcNotTerminal"><span class="FM_HyperText_Courier">AutErcNotTerminal</span></a><span class="FM_HyperText_Courier"></span> is returned.</p>
  <h5>Example</h5>
  <p class="FM_CodeReference">Field.Style = &quot;star&quot; </p>
  <h4><a name="TOC_TextFont2"></a><a name="IX_TextFont_property"></a><a name="XREF_55208_TextFont"></a>TextFont</h4>
  <p class="BodyLevel1">The text font used when laying out the field. Valid fonts include:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>Courier</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>Courier-Bold</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>Courier-Oblique</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>Courier-BoldOblique</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>Helvetica</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>Helvetica-Bold</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>Helvetica-Oblique</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>Helvetica-BoldOblique</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>Symbol</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>Times-Roman</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>Times-Bold</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>Times-Italic</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>Times-BoldItalic</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ZapfDingbats </p>
  <p class="BodyLevel1">On a set, the property is propagated to any child annotations underneath, if any.</p>
  <h5>Syntax</h5>
  <p class="FM_CodeReference">[get/set] String</p>
  <h5>Example</h5>
  <p class="FM_CodeReference">Field.TextFont = &quot;Times-BoldItalic&quot;</p>
  <h4><a name="TOC_TextSize3"></a><a name="IX_TextSize_property"></a><a name="XREF_32614_TextSize"></a>TextSize</h4>
  <p class="BodyLevel1">The text points size used in the field. In combobox and radio button fields, the text size determines the size of the check. Valid text sizes include zero and the range from 4 to 144 inclusive. </p>
  <p class="BodyLevel1">A text size of zero means that the largest point size that can still fit in the fieldâ€™s rectangle should be used. In multi-line text fields and buttons this is always 12 points.</p>
  <p class="BodyLevel1">On a set, the property is propagated to any child annotations underneath, if any.</p>
  <h5>Syntax</h5>
  <p class="FM_CodeReference">[get/set] short </p>
  <h5>Example</h5>
  <p class="FM_CodeReference">Field.TextSize = 18</p>
  <h4><a name="TOC_Type7"></a><a name="IX_Type_property_8"></a><a name="XREF_66486_Type"></a>Type</h4>
  <p class="BodyLevel1">The type of the field as a string. Valid types that are returned:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>text</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>button</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>combobox</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>listbox</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>checkbox</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>radiobutton</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>signature</p>
  <h5>Syntax</h5>
  <p class="FM_CodeReference">[read-only] String</p>
  <h5>Example</h5>
  <p class="FM_CodeReference">Set Field = Fields(&quot;name.last&quot;)</p>
  <p class="FM_CodeReference">'Should print &quot;name.last&quot;</p>
  <p class="FM_CodeReference">print Field </p>
  <p class="FM_CodeReference">' Should print the type of field. Example,</p>
  <p class="FM_CodeReference">' &quot;text&quot;</p>
  <p class="FM_CodeReference">print Field.Type </p>
  <h4><a name="TOC_Value3"></a><a name="IX_Value_property_2"></a><a name="XREF_35523_Value"></a>Value</h4>
  <p class="BodyLevel1">A string that represents the value of the field. Returns the empty string if the field has no value. If the field is non-terminal, an exception <span class="FM_HyperText_Courier"></span><a href="Exceptions.htm#XREF_63155_AutErcNotTerminal"><span class="FM_HyperText_Courier">AutErcNotTerminal</span></a><span class="FM_HyperText_Courier"></span>&#160;is returned. </p>
  <p class="BodyLevel1">For fields of type checkbox, the value <span class="FM_Courier">Off</span>&#160;represents the unchecked state. The checked state is represented using the export value. This is also true for radio buttons (where each individual button in a group should have a different export value; see <a href="Methods1.htm#XREF_27660_SetExportValues"><span class="FM_HyperText_Courier">SetExportValues</span></a>). For fields of type listbox or combobox, if an export value is defined, then that represents the value, otherwise the item name is used.</p>
  <p class="BodyLevel1">These remarks apply also to <a href="#XREF_89449_DefaultValue"><span class="FM_HyperText_Courier">DefaultValue</span></a>. </p>
  <h5>Syntax</h5>
  <p class="FM_CodeReference">[get/set] String</p>
  <h5>Example</h5>
  <p class="FM_CodeReference">Dim arrExp(1) As String</p>
  <p class="FM_CodeReference">arrExp(0) = &quot;CreditCardV&quot;</p>
  <p class="FM_CodeReference">arrExp(1) = &quot;CreditCardM&quot;</p>
  <p class="FM_CodeReference">Field.SetExportValues arrExp</p>
  <p class="FM_CodeReference">Field.Value = arrExp(0)</p>
  </div>
</body>
</html>