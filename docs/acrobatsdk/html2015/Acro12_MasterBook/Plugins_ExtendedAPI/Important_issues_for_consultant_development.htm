<!DOCTYPE HTML>
<html>
<head><meta http-equiv="refresh" content="2;url=https://opensource.adobe.com/dc-acrobat-sdk-docs/acrobatsdk/" /><meta name="robots" content="noindex, nofollow">

 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
 <title>Important issues for consultant development</title>

 <meta name="generator" content="Adobe FrameMaker 2015" />
 <meta name="Originator" content="ImportMif" />
 <meta name="OriginalFile" content="C:\Users\Perforce\Work\Groups\SDK\main\Documents\Common\docs_fm\PluginAppsDeveloperGuide\Plugins_ExtendedAPI.fm" />
 <link rel="stylesheet" href="Plugins_ExtendedAPI.css" type="text/css" />


<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>

<script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
<script type="text/javascript" src="../../template/scripts/common.min.js"></script>
<script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
<script type="text/javascript" src="../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = "../..";
gCommonRootRelPath = "../..";
gTopicId = "2.1.21.1.0_2";
</script>
 <meta name="brsprev" value="Acro12_MasterBook/Plugins_ExtendedAPI/How_the_consultant_works.htm">
 <meta name="brsnext" value="Acro12_MasterBook/Plugins_ExtendedAPI/Importing_the_consultant_HFTs_into_a_plug-in.htm">
 <meta name="topic-breadcrumbs" content="Plug-ins and Applications > Overview > Working with Acrobat Extended APIs > PDF Consultant and Accessibility Checker extended API" />
</head>

<body dir="ltr">
<script type="text/javascript" src="../../ehlpdhtm.js"></script>
<div dir="ltr">
  <h3>Important issues for consultant development</h3>
  <p class="BodyLevel1">First, you must decide if you actually do want to use a consultant. A consultant walks through an entire PDF document. If you only need to modify a small number of objects, and you know how to locate those objects, it makes more sense to write the object-finding code yourself.</p>
  <p class="BodyLevel1">If you decide to use the consultant, here are some planning considerations:</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1">Avoid implementing an agent that modifies objects on the traversal stack while the consultant is still walking through the document, otherwise infinite loops and other problems can occur (see <a href="#XREF_93514_Maintaining_the"><span class="FM_HyperText">Maintaining the traversal stack</span></a>).</p>
</li>
   <li>
   <p class="FM_Bullet1">Decide whether the consultant or the agent does the work (see <a href="#XREF_78898_Deciding_who_does"><span class="FM_HyperText">Deciding consultant or the agent does the work</span></a>).</p>
</li>
   <li>
   <p class="FM_Bullet1">Determine order in which agents interact with the consultant. This order is important because agents can modify objects that other agents want to see (see <a href="#XREF_53252_Avoiding_agent"><span class="FM_HyperText">Avoiding agent collisions</span></a>).</p>
</li>
   <li>
   <p class="FM_Bullet1">Decide whether to allow the consultant to revisit objects that have multiple classifications and what conditions must exist to allow such repeat visits (see <a href="#XREF_42237_Avoiding"><span class="FM_HyperText">Avoiding visitation collisions</span></a>). </p>
</li>
  </ul>
  <p class="BodyLevel1">You should make your decisions about all of these issues before you write your code. Some of these issues lead to errors that are difficult to debug, so it is best to understand them all while creating your plug-in.</p>
  <h5><a name="IX_traversal_stack"></a><a name="XREF_93514_Maintaining_the"></a>Maintaining the traversal stack</h5>
  <p class="BodyLevel1">The consultant keeps track of the objects it has visited in the PDF document in the traversal stack. If an agent modifies an object such that it affected the traversal stack, the entire process is derailed. The consultant may no longer know if it had visited an object, which could cause infinite loops, multiple, unnecessary visitations, or objects that remain unvisited.</p>
  <p class="BodyLevel1">It is extremely important that the integrity of the traversal stack remain undamaged. You must design your agent carefully so as to avoid this problem. You can use the postprocessing step of your agent to handle many repair tasks, thereby avoiding dealing with objects still on the traversal stack.</p>
  <h5><a name="XREF_78898_Deciding_who_does"></a>Deciding consultant or the agent does the work</h5>
  <p class="BodyLevel1">If the consultant performs object modifications, it does so as it goes through its traversal. Modifications that affect an objectâ€™s type or properties alter the traversal stack and corrupt the traversal process. For these kinds of modifications, set up an agent to perform the tasks in the postprocessing step.</p>
  <p class="BodyLevel1">For example, suppose an agent wants to remove annotations while there are form widgets present in the document. There are a few ways the agent can remove the annotations while the consultant is working, but they all have problems:</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1">Invoking the agent for all annotations and removing them at the Cos level does not clean up the forms tree if there are Widget Annots in the document.</p>
</li>
   <li>
   <p class="FM_Bullet1">Invoking the agent for all annotations and using the <span class="FM_Courier">PDPageAnnotRemove</span>&#160;method modifies the page object, which may still be in the traversal stack.</p>
</li>
  </ul>
  <p class="BodyLevel1">The best solution in this case is to enumerate all of the <span class="FM_Courier">Annot</span>&#160;objects by having the consultant look for <span class="FM_Courier">Annot</span>&#160;objects and keep a list of them, then let the agent invoke <span class="FM_Courier">PDPageAnnotRemove</span>&#160;on them in the postprocessing step.</p>
  <h5><a name="XREF_53252_Avoiding_agent"></a>Avoiding agent collisions</h5>
  <p class="BodyLevel1">When running multiple agents on a document, the order in which you register your agents is the order in which the consultant will hand them objects. If your earlier agents modify objects, they may change the objects in such a way that they are missing important information or are of a different type than they were originally. For example, one agent may consider it correct to remove a given field of an object, while another would complain that the field was not present and would want to add it. If the first agent modified the object type, subsequent agents would no longer think they were interested in it, and their processing would not take place. You must group your agents so that you do not run multiple agents with conflicting goals at the same time.</p>
  <p class="BodyLevel1">A rarer problem could occur with self-referential objects. For example, if <span class="FM_Courier">DictA</span>&#160;contains a reference to itself and the first agent replaces <span class="FM_Courier">DictA</span>&#160;with <span class="FM_Courier">DictB</span>&#160;(which would still contain a reference to <span class="FM_Courier">DictA</span>), another agent cannot work with <span class="FM_Courier">DictB</span>&#160;until the internal reference is changed. But if you are running the agents concurrently, there will be a collision. This would be a case best handled by the consultant.</p>
  <h5><a name="XREF_42237_Avoiding"></a>Avoiding visitation collisions</h5>
  <p class="BodyLevel1">Objects that have multiple classifications can be reached from multiple paths. In such cases you may allow the consultant to revisit such objects if, and only if, they were reclassified on a new path. However, you must take care not to allow revisitation under other circumstances, or the consultant could miss objects, which would defeat the reason for using a mode that considers object classification.</p>
  </div>
</body>
</html>