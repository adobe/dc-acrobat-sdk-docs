<!DOCTYPE HTML>
<html>
<head><meta http-equiv="refresh" content="2;url=https://opensource.adobe.com/dc-acrobat-sdk-docs/acrobatsdk/" /><meta name="robots" content="noindex, nofollow">

 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
 <title>Inspect details window</title>

 <meta name="generator" content="Adobe FrameMaker 2015" />
 <meta name="Originator" content="ImportMif" />
 <meta name="OriginalFile" content="C:\Users\Perforce\Work\Groups\SDK\main\Documents\Acrobat_SDK\Acrobat_12.0 - Nov 2015\docs_fm\JavaScript\AcroJSGuide\JS_Dev_Tools.fm" />
 <link rel="stylesheet" href="JS_Dev_Tools.css" type="text/css" />


<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>

<script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
<script type="text/javascript" src="../../template/scripts/common.min.js"></script>
<script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
<script type="text/javascript" src="../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = "../..";
gCommonRootRelPath = "../..";
gTopicId = "5.1.2.3.1";
</script>
 <meta name="brsprev" value="Acro12_MasterBook/JS_Dev_Tools/Call_Stack_list.htm">
 <meta name="brsnext" value="Acro12_MasterBook/JS_Dev_Tools/Starting_the_Debugger.htm">
 <meta name="topic-breadcrumbs" content="JavaScript > Developing Acrobat Applications Using JavaScript > Tools > JavaScript Debugger" />
</head>

<body dir="ltr">
<script type="text/javascript" src="../../ehlpdhtm.js"></script>
<div dir="ltr">
  <h3><a name="XREF_33091_Details_Window"></a>Inspect details window</h3>
  <p class="BodyLevel1"><a name="IX_inspect_details_window_1"></a>The Inspect details window is located to the right of the Scripts window and below the Call Stack. Its purpose is to help you inspect the values of variables, customize the way in which variables are inspected (setting watches), and obtain detailed information about breakpoints.</p>
  <h4>Inspect details window controls</h4>
  <p class="BodyLevel1">The three buttons at the bottom right of the Inspect details window, shown in the following graphic, can be used to edit, create, or delete items. The Edit, New, and Delete buttons become active when items in the Inspect drop-down list are selected.</p>
  <p class="FM_Z_Caption"><a name="XREF_69235_Inspect_details"></a>Inspect details window button controls</p>
  <p class="FM_GraphicBody"><img alt="NewWatchButton.jpg" style=" width:100%; margin-bottom:0.000pt; max-width:295.780pt;" id="image6" src="NewWatchButton.jpg" />&nbsp;</p>
  <h4>Inspecting variables</h4>
  <p class="BodyLevel1"><a name="IX_inspect_details_window_2"></a>The Inspect details window is a powerful tool that you can use to examine the current state of JavaScript objects and variables. It enables you to inspect any objects and properties in a recursive manner within the current stack frame in the debugging session.</p>
  <p class="BodyLevel1">To inspect a variable, select Local Variables from the Inspect drop-down list, which displays a list of variable and value pairs in the Inspect details window. To place a value in a variable, highlight the variable in the details window (this activates the Edit button). Click the Edit button. An Edit Variable dialog box appears, allowing you to enter a new value for the variable as shown in the following graphic. </p>
  <p class="BodyLevel1">A triangle next to a name indicates that an object is available for inspection. If you would like to view its properties, click the triangle to expand the object.</p>
  <p class="FM_Z_Caption"><a name="XREF_20107_Figure3_7_Local"></a>Local variable details</p>
  <p class="FM_GraphicBody"><img alt="LocalVariables.jpg" style=" width:100%; margin-bottom:0.000pt; max-width:310.000pt;" id="image7" src="LocalVariables.jpg" />&nbsp;</p>
  <h4>Watches</h4>
  <p class="BodyLevel1"><a name="IX_watches_list_1"></a><a name="IX_watches_list"></a>The Watches list enables you to customize how variables are inspected. Watches are JavaScript expressions evaluated when the debugger encounters a breakpoint or a step in execution. The Watches list provides you with the ability to edit, add, or delete watches using the three buttons just below the Inspect details window. All results are displayed in the Inspect details window in the order in which they were created.</p>
  <h6>To set a watch: </h6>
  <p class="FM_StepReset"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>1.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Select <span class="FM_Bold">Watches</span>&#160;from the <span class="FM_Bold">Inspect</span> drop-down list.</p>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>2.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Click the <span class="FM_Bold">New</span>&#160;button. A dialog box prompts you for the JavaScript variable or expression to be evaluated. </p>
  <h6>To change the value of a watch: </h6>
  <p class="FM_StepReset"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>1.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Select the watch from the list.</p>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>2.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Click the <span class="FM_Bold">Edit</span>&#160;button, which displays a dialog box prompting you to specify a new expression for evaluation. </p>
  <h6>To delete a watch: </h6>
  <p class="FM_StepReset"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>1.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Select the watch from the <span class="FM_Bold">Inspect</span>&#160;drop-down list. </p>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>2.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Click the <span class="FM_Bold">Delete</span> button.</p>
  <h4><a name="XREF_89729_Breakpoints"></a>Breakpoints</h4>
  <p class="BodyLevel1"><a name="IX_breakpoints_1"></a>The Breakpoints option in the Inspect drop-down list enables you to manage program breakpoints, which in turn make it possible to inspect the values of local variables once execution is halted. A breakpoint may be defined so that execution halts at a given line of code, and conditions may be associated with them (see <a href="#XREF_69050_Using_Conditional">Using conditional breakpoints</a>).</p>
  <p class="BodyLevel1">When a breakpoint is reached, JavaScript execution halts and the debugger displays the current line of code. </p>
  <p class="BodyLevel1">To add a breakpoint, click on the gray strip to the left of the code in the script view, which causes a red dot to appear. The lines at which breakpoints are permitted have small horizontal lines immediately to their left in the gray strip. </p>
  <p class="BodyLevel1">To remove the breakpoint, click on the red dot, which subsequently disappears. </p>
  <h4><a name="TOC_Coding_styles_and"></a>Coding styles and breakpoints</h4>
  <p class="BodyLevel1">Placement of the left curly brace (<span class="FM_Courier">{</span>) in a function definition is a matter of style. </p>
  <p class="BodyLevel1">Style 1: Place the left curly brace on the same line as the function name, for example,</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>function callMe() { // curly brace on same line as function name</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var a = 0;</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p class="BodyLevel1">Style 2: Place the left curly brace on a separate line, for example</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>function callMe()</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>{ // curly brace is on a separate line</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>var a = 0;</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p class="BodyLevel1">If you would like to set a breakpoint at the function heading, use Style 1. Note that the JavaScript Debugger does not set a breakpoint at the function heading for Style 2. It is only possible to set a breakpoint from the line of code containing the left curly brace. This is illustrated in the graphic below. It is possible to set the breakpoint on the line below the function heading for <span class="FM_Courier">callMe</span>&#160;and on the line containing the function heading for <span class="FM_Courier">testLoop</span>. Setting a breakpoint at a function heading causes execution to stop at the first statement within the function. </p>
  <p class="FM_Z_Caption"><a name="XREF_31319_Figure3_9_Setting"></a>Setting a breakpoint at a function heading</p>
  <p class="FM_GraphicBody"><img alt="EvalFunc.jpg" style=" width:100%; margin-bottom:0.000pt; max-width:145.000pt;" id="image8" src="EvalFunc.jpg" />&nbsp;</p>
  <h4><a name="TOC_Listing_breakpoints"></a>Listing breakpoints</h4>
  <p class="BodyLevel1">To view the list of all breakpoints set for the debugging session, select the Breakpoints option from the Inspect drop-down list. You can edit and delete breakpoints using the button controls just beneath the Inspect details window, as shown in the graphic <a href="#XREF_69235_Inspect_details">Inspect details window button controls</a>.</p>
  <h4><a name="TOC_Using_conditional"></a><a name="XREF_69050_Using_Conditional"></a>Using conditional breakpoints</h4>
  <p class="BodyLevel1"><a name="IX_conditional_breakpoints"></a><a name="IX_conditional"></a>A conditional breakpoint causes the interpreter to stop the program and activate the Debugger only when a specified condition is true. Conditional breakpoints are useful for stopping execution when conditions warrant doing so, and streamline the debugging process by eliminating needless stepwise execution. For example, if you are only interested in debugging after 100 iterations in a loop, you can set a breakpoint that only becomes active when the looping index reaches the value of 100.</p>
  <p class="BodyLevel1">The condition is a JavaScript expression. If the expression evaluates to <span class="FM_Courier">true</span>, the interpreter stops the program at the breakpoint. Otherwise, the interpreter does not stop the program. An unconditional breakpoint, the default, always causes the interpreter to stop the program and to activate the Debugger when it reaches the breakpoint, because its condition is always set to <span class="FM_Courier">true</span>. </p>
  <h6>To change a breakpoint condition:</h6>
  <p class="FM_StepReset"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>1.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Select <span class="FM_Bold">Breakpoint</span>&#160;from the <span class="FM_Bold">Inspect</span> drop-down list</p>
  <p class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>2.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Click <span class="FM_Bold">Edit</span>. A dialog box appears, prompting you to change the breakpoint condition</p>
  </div>
</body>
</html>