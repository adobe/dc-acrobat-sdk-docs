<!DOCTYPE HTML>
<html>
<head>

 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
 <title>Working with platform-specific techniques</title>

 

 <link rel="stylesheet" href="Plug-in_and_PDF_Library.css" />
 <link rel="stylesheet" href="../../HTMLStyling.css" />


 <script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>
 <meta name="generator" content="Adobe FrameMaker 2017" />
<script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
<script type="text/javascript" src="../../template/scripts/common.min.js"></script>
<script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
<script type="text/javascript" src="../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = "../..";
gCommonRootRelPath = "../..";
gTopicId = "3.3.1";
</script>
 <meta name="brsprev" value="PDFL_MasterBook/Plug-in_and_PDF_Library/Supported_environments1.htm">
 <meta name="brsnext" value="PDFL_MasterBook/Plug-in_and_PDF_Library/Creating_a_sample_plug-in.htm">
 <meta name="topic-breadcrumbs" content="Developing Plug-ins and Applications > Creating Plug-in and PDF Library Applications" />
</head>

<body dir="ltr">
<script type="text/javascript" src="../../ehlpdhtm.js"></script>

   
	<!-- Body place holder starts here-->
    <div dir="ltr">
  <p dir="ltr" class="FM_3Head"><a name="XREF_56990_Working_with"></a>Working with platform-specific techniques</p>
  <p dir="ltr" class="FM_Body">The <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;API is almost completely platform-independent. By using the memory allocation and file system APIs provided by <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;or <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span>, many parts of a plug-in can be highly portable across platforms.</p>
  <p dir="ltr" class="FM_Body">This chapter contains platform-specific development information for the Windows and Mac OS platforms and provides guidelines that can help make plug-ins more portable among the various supported platforms.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_About_platform_dependent"></a><a name="XREF_31805_About_platform"></a>About platform-dependent data</p>
  <p dir="ltr" class="FM_Body">The following are platform-specific data types that appear explicitly in the <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span> core API:</p>
  <p dir="ltr" class="FM_Indent1"><span class="FM_Bold">platform data structures</span>: Data structures such as the Win32 data structure that represents a window.</p>
  <p dir="ltr" class="FM_Indent1"><span class="FM_Bold">platform path values</span>: The data structure that represents the path to a file.</p>
  <p dir="ltr" class="FM_Indent1"><span class="FM_Bold">platform event</span>: The data structure that represents mouse clicks, key presses, window activation, and so on.</p>
  <p dir="ltr" class="FM_Indent1"><span class="FM_Bold">Return value</span>: Constants that indicate, for example, that a file could not be opened because it was not found.</p>
  <p dir="ltr" class="FM_Body">The following are platform-specific data types that do not appear explicitly in the API, but are used by <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>, <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span>, or plug-ins:</p>
  <p dir="ltr" class="FM_Indent1"><span class="FM_Bold">Cursors</span>: Data structures representing a cursor.</p>
  <p dir="ltr" class="FM_Indent1"><span class="FM_Bold">Toolbar button icons</span>: Pixmaps that appear in the <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;or <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span> toolbar.</p>
  <p dir="ltr" class="FM_Indent1"><span class="FM_Bold">Menu item icons</span>: Icons that some platforms let you display adjacent to a menu item.</p>
  <p dir="ltr" class="FM_Indent1"><span class="FM_Bold">Menu items</span>: Remember that not all <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;or <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span>&#160;implementations have the same menu items. For example, on the UNIX platform, <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;and <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span>&#160;do not have a Window/Tile menu item.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Portability_techniques"></a><a name="XREF_69045_Portability"></a>Portability techniques</p>
  <p dir="ltr" class="FM_Body">The following techniques can improve your plug-in’s portability:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Use predefined types instead of short and long.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Use <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span> API methods wherever possible instead of platform-specific APIs.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Use <span class="FM_Courier">#if</span>&#160;around platform-specific code such as dialog boxes and use the predefined platform constants (<span class="FM_Courier">MAC_PLATFORM</span>,<span class="FM_Courier"> UNIX PLATFORM</span>, <span class="FM_Courier">WIN_PLATFORM</span>, and so forth) to test what platform you are compiling for.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Place platform-specific code in separate files from the main portion of the plug-in, so that you can easily recognize and rewrite platform-dependent sections.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Windows_techniques"></a><a name="XREF_75852_Windows_Techniques"></a>Windows techniques</p>
  <p dir="ltr" class="FM_Body">This section contains information necessary to implement plug-ins under Windows.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Developing_a_Windows"></a><a name="IX_AcroSDKPIDir"></a>Developing a Windows plug-ins&#160;</p>
  <p dir="ltr" class="FM_Body">You can put your plug-ins in the default <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;plug-in location the plug_ins folder (in the same directory as the <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;executable). </p>
  <p dir="ltr" class="FM_Body">You are encouraged to use the plug-in samples BasicUI and Starter as a basis for developing plug-ins. These samples have all of the appropriate project settings. The Starter sample only builds a loadable plug-in while the BasicUI sample adds menu items.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Locating_and_loading"></a><a name="IX_enabling_for_Adobe_Reader_1"></a><a name="IX_Adobe_certified_plug_ins"></a><a name="IX_PluginUnload_procedure_1"></a><a name="IX_LoadLibrary_method"></a><a name="IX_DLL_PROCESS_ATTACH"></a><a name="IX_DLL_PROCESS_DETACH"></a><a name="IX_PlugInMain_symbol"></a>Locating and loading plug-ins</p>
  <p dir="ltr" class="FM_Body">When <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;or <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span>&#160;starts, it scans the plug_ins folder (in the same directory as the <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;executable) for DLLs with the extension .API. <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;or <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span>&#160;also searches nested directories, allowing you to group plug-ins in folders. When it locates a file with the extension .API, it looks for the <span class="FM_Courier">PlugInMain</span>&#160;exported symbol, which specifies the entry point for your plug-in. <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;or <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span>&#160;loads the plug-in by invoking the <span class="FM_Courier">LoadLibrary</span>&#160;function and then calls the function referenced by the <span class="FM_Courier">PlugInMain</span> symbol.</p>
  <p dir="ltr" class="FM_Body">The <span class="FM_Courier">LoadLibrary</span>&#160;function calls your plug-in’s <span class="FM_Courier">DLLMain</span>&#160;entry point with the parameter <span class="FM_Courier">DLL_PROCESS_ATTACH</span>&#160;passed. Your plug-in can run some initialization code in DLLMain, such as allocating memory, before its <span class="FM_Courier">PluginMain</span>&#160;function is called by <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;or <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span>. </p>
  <p dir="ltr" class="FM_Body">If you allocate memory in your plug-in’s <span class="FM_Courier">DLLMain</span>&#160;entry point, it must de-allocate that memory when <span class="FM_Courier">DLLMain</span>&#160;is called with <span class="FM_Courier">DLL_PROCESS_DETACH</span>. If your plug-in relies on its implementation of the <span class="FM_Courier">PluginUnload</span>&#160;function to de-allocate memory, it could fail if <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;or <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span>&#160;unloads the plug-in immediately without calling the plug-in’s handshaking callbacks. This would happen in the following situations: </p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>If the plug-in is not Adobe-certified and the user has specified the Certified Plug-ins Only option in the Preferences settings.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>If the plug-in is running under <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span>, but it is not enabled for <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span>. This could potentially cause a crash when <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;or <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span> closes.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Why_a_plug_in_might_not"></a>Why a plug-in might not load</p>
  <p dir="ltr" class="FM_Body">There are several reasons why a plug-in may not load successfully:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>The plug-in’s filename extension was not changed from .dll to .api.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Too many plug-ins are being loaded by either <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;or <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span>. The number of plug-ins that can be loaded at any one time depends on the code generation settings of all loaded plug-ins. </p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>The plug-in attempts to register with the same <span class="FM_Courier">extensionName</span>&#160;as another plug-in that has already loaded. In this case, <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;or <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span> displays an error message indicating the problem.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>You cloned your project from an existing plug-in project that uses a .def file and forgot to change the <span class="FM_Courier">LIBRARY</span> entry in the .def file.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>The DLL is bad. This can occur even if the plug-in compiled and linked without errors. Generally, rebuilding the plug-in completely (doing a Rebuild All) solves the problem.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Macros_and_project"></a><a name="IX_PlugInMain_symbol_1"></a>Macros and project settings&#160;</p>
  <p dir="ltr" class="FM_Body">The following macros must be defined or set in your preprocessor definitions:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span><span class="FM_Courier">WIN_ENV</span>&#160;</p>
  <p dir="ltr" class="FM_Bullet1" style="margin-top  : 4.000pt; margin-bottom : 4.000pt; font-family : 'Courier Std'; font-size  : 10.0pt;"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span><span class="FM_Courier">WIN_PLATFORM (preferred)</span></p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span><span class="FM_Courier">WIN32</span>&#160;</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span><span class="FM_Courier">WINDOWS</span>&#160;</p>
  <p dir="ltr" class="FM_Body">For a plug-in to be loaded, it must export the symbol <span class="FM_Courier">PlugInMain</span>. This task can be accomplished by including a .def file in the project for the plug-in or by including the line <span class="FM_Courier">/EXPORT:PlugInMain</span>&#160;in the project settings for the plug-in. If you are developing an <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span>&#160;plug-in, you also must define a macro to access HFTs available to <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span>. </p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Interapplication"></a><a name="IX_interapplication"></a><a name="IX_ActiveX"></a>Interapplication communication</p>
  <p dir="ltr" class="FM_Body">Plug-ins can add their own DDE messages to those supported by <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;or <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span>&#160;by registering to receive DDE messages directly. The DDEClnt sample in the <span data-name="AcrobatSDKProd" data-val="Acrobat&nbsp;SDK" data-showval="TRUE" data-format="AcrobatSDKProd">Acrobat&nbsp;SDK</span> shows how to do this.</p>
  <p dir="ltr" class="FM_Body">A plug-in cannot implement OLE automation or be an ActiveX server through the use of MFC. This is because <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;or <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span>&#160;uses MFC to implement its OLE automation and there cannot be two MFC-based OLE automation servers in the same process. OLE or ActiveX server plug-ins must be implemented using the ActiveX Template Library. Plug-ins should use the DDEML library to handle DDE messages. Problems may arise if they do not.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Debugging"></a><a name="IX_breakpoints"></a><a name="IX_debugging"></a>Debugging</p>
  <p dir="ltr" class="FM_Body">Generally, the debugger built into Visual C++ is adequate to debug plug-ins. Debugging a Windows plug-in compiled with Visual C++ is quite simple if you remember a few things:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Specify the <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span> plug-in directory under the link | output tab in the Project Settings dialog box.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Specify the <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;or <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span>&#160;executable under the executable for debug session in the Project Settings dialog box.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>The first time you build a plug-in, do a Rebuild All.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Set breakpoints in your source code by selecting the line and clicking the hand icon or pressing the F9 key.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>After setting breakpoints, press the F5 key to have Microsoft Visual Studio start <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;or <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span>. </p>
  <p dir="ltr" class="FM_Body">Two common reasons why breakpoints may not be hit are:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>You started <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;or <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span>&#160;from the File Manager or Program Manager. <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;or <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span> must be started from within Microsoft Visual Studio to debug plug-ins.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>You copied your plug-in into <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>’s plug-in directory, instead of specifying the plug-in directory in the Link | Output dialog box.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Handling_the_thread"></a><a name="IX_thread_local_storage"></a>Handling the thread local storage (TLS) limit</p>
  <p dir="ltr" class="FM_Body">There is a limit to the number of plug-ins that <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;or <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span>&#160;can load at any given time. This is due to a limitation of the multi-threading model used by the Win32 API and is dependent on the code generation settings of the plug-ins being loaded. </p>
  <p dir="ltr" class="FM_Body">The following information can help maximize the ability of <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;and <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span> to load plug-ins.</p>
  <p dir="ltr" class="FM_Body">When a process is created, an array of bit flags is allocated for the management of thread-specific data. In the current Win32 implementation, this array is limited to 64 members or TLS slots. Every DLL/plug-in that uses thread local storage is allocated at least one slot when loaded using LoadLibrary. This includes system DLLs, plug-ins, and all the DLLs they load. When all of the TLS slots have been occupied for a process, LoadLibrary will fail for any DLL requiring a TLS slot.</p>
  <p dir="ltr" class="FM_Body">The following guidelines will minimize the TLS slots occupied by plug-ins:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Plug-ins that are not multi-threaded should only link with the single-threaded run-time libraries that do not occupy a TLS slot.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>If your plug-in is multi-threaded, consider linking it with the multi-threaded DLL run-time library. Both the DLL and static versions of the run-time libraries occupy a TLS slot. However, many plug-ins shipped with <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;or <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span>&#160;use the DLL version so the run-time DLL does not occupy another TLS slot after it is loaded by the process.</p>
  <p dir="ltr" class="FM_Note"><span class="FM_Z_NoteCaution">Note:<span style="padding-left: 4pt;" class="FMAutoNumber_1"></span></span><span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;and <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span>&#160;do not currently generate an error when a plug-in fails to load due to the TLS limit.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Using_modal_dialog_boxes"></a><a name="IX_modal_dialog_boxes"></a><a name="IX_dialog_boxes"></a>Using modal dialog boxes</p>
  <p dir="ltr" class="FM_Body">If you write plug-ins that contain modal dialog boxes on the Windows platform, you need to perform the following steps:</p>
  <p dir="ltr" class="FM_StepReset"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>1.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>When you are creating your dialog box, get the parent <span class="FM_Courier">HWND</span>&#160;of the dialog box using the <span class="FM_Courier">WinAppGetModalParent</span>&#160;method. Then use this <span class="FM_Courier">HWND</span>&#160;when creating the dialog box. </p>
  <p dir="ltr" class="FM_Indent1">Ensure that you get the mouse capture before putting up your dialog box so that <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;or <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span>&#160;does not receive the mouse clicks. After your dialog box returns, set the mouse capture back.</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>HWND CapturehWnd, hParent;</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>CapturehWnd = GetCapture();</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>if ( CapturehWnd != NULL )</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ReleaseCapture();</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>hParent = WinAppGetModalParent(AVAppGetActiveDoc());</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>nRetVal = DialogBox(gHINSTANCE, MAKEINTRESOURCE(IDD_PROPS), hParent,</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>PropsDialogProc);</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>if ( CapturehWnd != NULL )</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>SetCapture( CapturehWnd );</p>
  <p dir="ltr" class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>2.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>As soon as you have an <span class="FM_Courier">HWND</span>&#160;for the dialog box itself, usually in response to the <span class="FM_Courier">WM_INITDIALOG</span>&#160;message, you should acquire a new <span class="FM_Courier">AVWindow</span>&#160;using the <span class="FM_Courier">AVWindowNewFromPlatformThing</span>&#160;method. Save this <span class="FM_Courier">AVWindow</span>&#160;in some place where you can access it when the dialog box is destroyed. Then pass the <span class="FM_Courier">AVWindow</span>&#160;to the <span class="FM_Courier">AVAppBeginModal</span> method.</p>
  <p dir="ltr" class="FM_Indent1">Here is code that is called in response to a <span class="FM_Courier">WM_INITDIALOG</span> message:</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>static AVWindow sAVWin;</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>.....</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>// hWnd is the window handle of the dialog box window</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>sAVWin = AVWindowNewFromPlatformThing(AVWLmodal, 0, NULL,</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>gExtensionID, hWnd);</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>AVAppBeginModal(sAVWin);</p>
  <p dir="ltr" class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>3.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>At the time the dialog box is destroyed, usually in response to a <span class="FM_Courier">WM_DESTROY</span>&#160;message, end the modal operations using <span class="FM_Courier">AVAppEndModal</span>. If you are not using MFC, destroy the AVWindow for which you saved the handle with <span class="FM_Courier">AVWindowDestroy</span>. Here is a section of code called in response to a <span class="FM_Courier">WM_DESTROY</span> message:</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>AVAppEndModal();</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>AVWindowDestroy(sAVWin);</p>
  <p dir="ltr" class="FM_Body">If you are using MFC to put up your dialog box, do not call<span class="FM_Courier"> AVWindowDestroy</span>&#160;in the <span class="FM_Courier">WM_DESTROY</span>&#160;message. MFC will cause <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;or <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span> to destroy the AVWindow automatically.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Mac_OS_techniques"></a><a name="XREF_58130_Macintosh"></a>Mac OS techniques </p>
  <p dir="ltr" class="FM_Body">This section contains information necessary to implement plug-ins for Mac OS X. If you are upgrading your plug-in, see <a href="Upgrading_existing_plug-ins.htm#XREF_59825_Upgrading_Plug_ins"><span class="FM_HyperText">Upgrading plug-in projects on Mac OS (Acrobat 7 to Acrobat 8)</span></a>.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Developing_a_Mac_OS_plug"></a>Developing a Mac OS plug-in</p>
  <p dir="ltr" class="FM_Body">For <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;9.0 and later, plug-ins must be built as Carbon or Cocoa bundles (not frameworks). Apple Xcode 2.4.1 is the currently-supported development environment for developing plug-ins. Apple developer tools contain the correct frameworks and libraries in addition to extensive documentation on making plug-ins (and applications) Mach-O and Carbon compliant. </p>
  <p dir="ltr" class="FM_Note"><span class="FM_Z_NoteCaution">Note:<span style="padding-left: 4pt;" class="FMAutoNumber_1"></span></span><span data-name="AcrobatSDKProd" data-val="Acrobat&nbsp;SDK" data-showval="TRUE" data-format="AcrobatSDKProd">Acrobat&nbsp;SDK</span> samples are built against the MacOSX10.6.sdk as universal binaries.</p>
  <p dir="ltr" class="FM_5Head">Using the samples</p>
  <p dir="ltr" class="FM_Body">You are encouraged to use the Starter plug-in sample as a basis for developing your plug-ins. This sample contains the appropriate project settings as defined in the supplied Xcode project configuration files. The Starter sample does nothing other than build a loadable plug-in. In addition, other plug-ins that could be useful as a starting point for developing plug-ins are available.</p>
  <p dir="ltr" class="FM_Body">The Info.plist file contains a list of properties used by the package. Adobe provides a common info.plist file. It uses project settings to define properties appropriately for each plug-in.</p>
  <p dir="ltr" class="FM_5Head"><a name="IX_carbon_compliance"></a>Establishing Carbon or Cocoa compliance </p>
  <p dir="ltr" class="FM_Body">Carbon and Cocoa are application environments of the Mac OS X operating system. Each includes programming interfaces that include header files, a library, and a runtime. </p>
  <p dir="ltr" class="FM_Body"><span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;9.0 uses property lists (Info.plists), which are stored with the executable files and resources that make up an application, known as an application bundle. For more information about converting existing Mac OS applications into Carbon , see <span class="FM_HyperText"><a href="http://developer.apple.com/library/mac/index.html">http://developer.apple.com/documentation/Carbon/Conceptual/carbon_porting_guide/</a></span>.</p>
  <p dir="ltr" class="FM_Note"><span class="FM_Z_NoteCaution">Note:<span style="padding-left: 4pt;" class="FMAutoNumber_1"></span></span>To prevent problems with older style event handling, plug-ins must replace calls to <span class="FM_Courier">WaitNextEvent</span>&#160;with calls to <span class="FM_Courier">RunCurrentEventQueue</span>&#160;or <span class="FM_Courier">ReceiveNextEvent</span>. </p>
  <p dir="ltr" class="FM_5Head"><a name="IX_Xcode_configuration_files"></a>Xcode configuration files</p>
  <p dir="ltr" class="FM_Body">Mac OS plug-in sample build settings are defined in SDK and project-level configuration files and not within the projects themselves. Xcode configuration files include lists of build settings definitions that can be applied to multiple projects and/or multiple targets.</p>
  <p dir="ltr" class="FM_Body">The configuration files and settings have a hierarchical structure modeled after Apple Developer documentation located at the following URL:</p>
  <p dir="ltr" class="FM_Indent1"><span class="FM_HyperText"><a href="http://developer.apple.com/library/mac/index.html">http://developer.apple.com/documentation/DeveloperTools/Conceptual/XcodeUserGuide/Contents/Resources/en.lproj/05_05_build_configs/chapter_33_section_6.html</a></span>&#160;</p>
  <p dir="ltr" class="FM_Body">Each project is based on a project-level build settings file(s) that includes SDK-level settings.</p>
  <p dir="ltr" class="FM_Body">At the SDK level, there are separate configuration files for SDK plug-in settings (Default.xcconfig), environmental variables (Environment.xcconfig) and resource settings (Resources.xcconfig). Global target settings for _debug and _release targets are stored in Debug.xcconfig and Release.xcconfig, respectively.</p>
  <p dir="ltr" class="FM_Body">At the project level, there are four configuration files:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>ProjectDefault.xcconfig</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>ProjectResources.xcconfig</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Project_debug.xcconfig</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Project_release.xcconfig.</p>
  <p dir="ltr" class="FM_Body">Each project level configuration file includes the settings from its related (parent) SDK configuration file (for example, ProjectDefault.xconfig includes Default.xcconfig and ProjectResources.xcconfig includes Resources.xcconfig). Generally, SDK-level setting definitions are not included directly, but rather are included through project-level configuration files.</p>
  <p dir="ltr" class="FM_Body">Each SDK plug-in project includes a single (Default) configuration based on the ProjectDefault.xcconfig build settings which include the SDK-level Default.xcconfig build settings. Each project has two targets: a _debug target and a _release target. The targets’ build settings are based on Project_debug.xcconfig and Project_release.xconfig, respectively. Similar to the project configuration files, each target configuration settings include its parent SDK configuration file; for instance, Project_debug includes Debug.xcconfig settings.</p>
  <p dir="ltr" class="FM_Body">Project-level configuration files whose names begins with Project are the default project settings included with most SDK plug-in samples. Project-level configuration files that are prefixed with a specific sample’s name include settings specific to that sample. The build settings for most SDK projects are extremely similar with most definitions residing in the SDK configuration files.</p>
  <p dir="ltr" class="FM_5Head">Using SetGWorld rather than SetPort</p>
  <p dir="ltr" class="FM_Body">With the move to carbonization and double buffering, you should use GetGWorld rather than the toolbox call SetPort. Using both calls in the same plug-in can cause the current port to get out of sync with the current device. Using only GetGWorld maintains the correct port and device settings.</p>
  <p dir="ltr" class="FM_Body">In all cases, you should pass <span class="FM_Courier">GetMainDevice</span>&#160;unless you have a particular device in mind or you are restoring the GWorld to its original state. The following code is an example.</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ACCB void ACCB2 foo(AVPageView pageView)</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>{</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>CGrafPtr oldGWorld, pagePort = NULL;</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>GDHandle oldDevice;</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>pagePort = (CGrafPtr)AVPageViewAcquireMachinePort(pageView);</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>if (pagePort){</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>GetGWorld(&amp;oldGWorld, &amp;oldDevice);</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>SetGWorld(pagePort, GetMainDevice());</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>//Draw to the port here</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>SetGWorld(oldGWorld, oldDevice);</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>AVPageViewReleaseMachinePort(pageView, pagePort);</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Locating_and_loading1"></a>Locating and loading plug-ins</p>
  <p dir="ltr" class="FM_Body">When <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;or <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span>&#160;starts, it scans the plug-in folder to locate and load plug-ins with the acroplugin file extension. PowerPC plug-ins must have creator <span class="FM_Courier">CARO</span>&#160;(CFBundleSignature) and type <span class="FM_Courier">XTND</span>&#160;(CFBundlePackageType). Each plug-in exports a single main entry point, <span class="FM_Courier">AcroPluginMain</span>. When loading a plug-in, <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;or <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span>&#160;jumps to the plug-in’s entry point to begin handshaking. (See <a href="../Understanding_Plug-ins/About_plug-in_initialization.htm#XREF_89824_Handshaking_and"><span class="FM_HyperText">Handshaking</span></a>.)</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Using_memory"></a><a name="IX_memory_usage"></a>Using memory</p>
  <p dir="ltr" class="FM_Body">The <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;or <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span>&#160;memory allocator gets its memory from the system and not from the application's memory partition. (See <a href="../Understanding_Plug-ins/Acquiring_and_releasing_objects.htm#XREF_68646_Acquiring_and"><span class="FM_HyperText">Acquiring and releasing objects</span></a>.)</p>
  <p dir="ltr" class="FM_Body">Memory allocation guidelines are particularly important in Mac OS to ensure that memory is allocated from the system rather than from the application partition. Otherwise, your plug-in is very likely to cause <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;or <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span> to run out of memory.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Resource_file"></a><a name="IX_resource_files"></a>Resource file considerations</p>
  <p dir="ltr" class="FM_Body"><span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;or <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span>&#160;open a plug-in’s resource file with read-only permissions. In addition, plug-ins cannot assume that their resource file is on top of the resource chain each time they are entered by using an <span class="FM_Courier">ASCallback</span>. Plug-ins must explicitly move their resource file to the top of the resource chain before accessing resources in it. As a result, all code that directly or indirectly invokes <span class="FM_Courier">GetResource</span>&#160;must be modified. This can be accomplished either directly or by using the SafeResources routines in the <span data-name="AcrobatSDKProd" data-val="Acrobat&nbsp;SDK" data-showval="TRUE" data-format="AcrobatSDKProd">Acrobat&nbsp;SDK</span>.</p>
  <p dir="ltr" class="FM_5Head">Using SafeResources</p>
  <p dir="ltr" class="FM_Body">The recommended way to access resources in the plug-in file is to use the functions declared in the header file SafeResources.h in the SDK. These functions are direct replacements for each Toolbox function that directly or indirectly calls <span class="FM_Courier">GetResource</span>. The replacement functions automatically place the plug-in file on top of the resource chain before accessing the resource, and restore the old resource chain after accessing the resource.</p>
  <p dir="ltr" class="FM_5Head">Manipulating the resource chain directly</p>
  <p dir="ltr" class="FM_Body">If you choose to manipulate the resource chain directly, you must modify all code that directly or indirectly calls GetResource. The list of such Toolbox calls can be determined from SafeResources.h, by removing the prefix Safe from the names of the calls. Before calling each such Toolbox function, you must put the plug-in’s resource file on top of the resource chain, and after such calls, you must restore the old resource chain. For example:</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>DialogPtr myDialog = GetNewDialog(23, NULL, (Ptr) -1);</p>
  <p dir="ltr" class="FM_Body">must be rewritten as:</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>short oldResFile;</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>DialogPtr myDialog;</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>oldResFile = CurResFile();</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>UseResFile(gResFile);</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>myDialog = GetNewDialog(23, NULL, (Ptr) -1);</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>useResFile(oldResFile);</p>
  <p dir="ltr" class="FM_Body">The global variable <span class="FM_Courier">gResFile</span> is automatically set up during handshaking and is declared in PICommon.h.</p>
  <p dir="ltr" class="FM_5Head">Macros</p>
  <p dir="ltr" class="FM_Body">The following macros must be defined:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span><span class="FM_Courier">POWER_PC</span> must be defined</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span><span class="FM_Courier">PLATFORM</span> must be defined as MacPlatform.h</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span><span class="FM_Courier">PRODUCT</span> must be defined as Plugin.h</p>
  <p dir="ltr" class="FM_Body">These macros are automatically defined correctly for the platform and development environment by the header file PIPrefix.h. You are encouraged to use this header file.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Mac_OS_only_methods"></a>Mac OS-only methods</p>
  <p dir="ltr" class="FM_Body">Plug-ins should not use the <span class="FM_Courier">ASPathFromPlatformPath</span>&#160;method in Mac OS. Instead, they should invoke <span class="FM_Courier">ASFileSysCreatePathName</span>. The <span class="FM_Courier">AVAppDidOrWillSwitchForDialog</span>&#160;method is only useful to plug-ins in Mac OS.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Interapplication1"></a>Interapplication communication</p>
  <p dir="ltr" class="FM_Body">Plug-ins can add their own Apple events to those supported by <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;or <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span>&#160;by hooking into the Apple event handling loop for <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;or <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span>. This is done by replacing the <span class="FM_Courier">AVAppHandleAppleEvent</span>&#160;method in the API. If the plug-in receives an Apple event it does not want to handle, it should invoke the implementation of the method it replaced, allowing other plug-ins or <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;or <span data-name="AdobeReaderProd" data-val="Adobe&nbsp;Reader" data-showval="TRUE" data-format="AdobeReaderProd">Adobe&nbsp;Reader</span> the opportunity to handle the Apple event.</p>
  </div>
<!-- Body place holder ends here-->

    <!-- Footer place holder starts here-->
    <div style="padding:0.4em 0;text-align:center;width:100%;position:relative;">
    	<hr/>
		<p style="font-size:0.7em;margin:0; font-family:adobe-clean, sans-serif"><a target="_blank" href="http://help.adobe.com/en_US/legalnotices/index.html">Legal Notices</a> | <a target="_blank" href="http://www.adobe.com/privacy.html">Online Privacy Policy</a></p>
	</div>
	<!-- Footer place holder ends here-->

</body>
</html>