<!DOCTYPE HTML>
<html>
<head><meta http-equiv="refresh" content="2;url=https://opensource.adobe.com/dc-acrobat-sdk-docs/pdflsdk/" /><meta name="robots" content="noindex, nofollow">

 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
 <title>About security handlers</title>

 

 <link rel="stylesheet" href="Document_Security.css" />
 <link rel="stylesheet" href="../../HTMLStyling.css" />


 <script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>
 <meta name="generator" content="Adobe FrameMaker 2017" />
<script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
<script type="text/javascript" src="../../template/scripts/common.min.js"></script>
<script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
<script type="text/javascript" src="../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = "../..";
gCommonRootRelPath = "../..";
gTopicId = "3.11.1";
</script>
 <meta name="brsprev" value="PDFL_MasterBook/Document_Security/About_document_security.htm">
 <meta name="brsnext" value="PDFL_MasterBook/Document_Security/Setting_security_for_a_document.htm">
 <meta name="topic-breadcrumbs" content="Developing Plug-ins and Applications > Working with Document Security" />
</head>

<body dir="ltr">
<script type="text/javascript" src="../../ehlpdhtm.js"></script>

   
	<!-- Body place holder starts here-->
    <div dir="ltr">
  <p dir="ltr" class="FM_3Head"><a name="XREF_55517_About_security"></a>About security handlers</p>
  <p dir="ltr" class="FM_Body">Application logic that performs user authorization and sets permissions is known as a security handler. <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;has these built-in security handlers: password, Adobe LiveCycle Rights Management ES, and public key security handler. (See the <span class="FM_HyperText"><a href="../../API_References/PDFL_API_Reference/index.html">PDF Library API Reference</a></span>.)</p>
  <p dir="ltr" class="FM_Body">A security handler supports two passwords:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>A user password that enables a user to open and read a protected document with whatever permissions the owner chose</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>An owner password that allows a document’s owner to also change the permissions granted to users</p>
  <p dir="ltr" class="FM_Body">You can use the <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;core API’s built-in security handler or write your own security handlers to perform user authorization (for example, by the presence of a specific hardware key or file, or by reading a magnetic card reader). </p>
  <p dir="ltr" class="FM_Body">Security handlers are responsible for performing the following tasks:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Setting permissions on a file</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Authorizing access to a file</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Setting up a file’s encryption and decryption keys</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Maintaining the encryption dictionary of the PDF file containing the document</p>
  <p dir="ltr" class="FM_Body">Security handlers are used in the following situations:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>A document is opened. The security handler determines whether a user is authorized to open the file and sets up the decryption key that is used to decrypt the PDF file.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>A document is saved. The security handler sets up the encryption key and writes extra security-related information into the PDF file’s encryption dictionary. </p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>A user attempts to change a document’s security settings. The security handler determines whether the user is permitted to perform this task.</p>
  <p dir="ltr" class="FM_Body">A document may have zero, one, or two security handlers associated with it. A document has zero security handlers if no security is used on the file. When security is applied to a file, or the user selects a different security handler for a secured file, the newly-chosen security handler is not put in place immediately. Instead this new security handler is simply associated with the document; it is a pending security handler until the document is saved.</p>
  <p dir="ltr" class="FM_Body">The new security handler is not put in place immediately because it is responsible for decrypting the contents of the document’s encryption dictionary, and that dictionary is re-encrypted in the correct format for the new security handler only when the document is saved. As a result, a document may have both a current and a new security handler associated with it.</p>
  <p dir="ltr" class="FM_Body">A security handler has two names: one that is placed in each PDF file that is saved by the handler (for example, ADBE_Crypt), and another name that <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;can use in any user interface items in which the security handler appears (for example, Acrobat Developer Technologies default encryption). This is similar to the two-name scheme used for menu items: a language-independent name that the application logic can refer to regardless of the user interface language, and another name that appears in the user interface. </p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Adding_a_security_handler"></a>Adding a security handler</p>
  <p dir="ltr" class="FM_Body">You can add a security handler by performing the following tasks:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Writing a set of callback routines to perform security-related functions.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Specifying the callbacks in a <span class="FM_Courier">PDCryptHandlerRec</span>&#160;structure. </p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Registering the handler by passing the structure to <span class="FM_Courier">PDRegisterCryptHandlerEx</span>.</p>
  <p dir="ltr" class="FM_4Head_NoTOC">Security handlers data</p>
  <p dir="ltr" class="FM_Body">The following list describes three types of data used by security handlers:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Authorization data is the data the security handler needs to determine the user’s authorization level for a particular file (for example, not authorized to open the file, authorized to access the file with user permissions, authorized to access the file with owner permissions). Passwords are a common type of authorization data.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Security data is whatever internal data the security handler uses. It includes security information, internal flag values, seed values, and so on.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Security information is a subset of the security data. Specifically, it is a collection of flags that contains the information that <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;uses to display the current permissions to the user. This information includes permissions and the user’s authorization level (user or owner).</p>
  <p dir="ltr" class="FM_4Head_NoTOC">Security handler callbacks</p>
  <p dir="ltr" class="FM_Body">A security handler must provide callbacks that performs the following tasks:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Determines whether a user is authorized to open a particular file and what permissions the user has once the file is open (<span class="FM_Courier">PDCryptAuthorizeExProc</span>).</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Creates and fills an authorization data structure, using whatever user interface is needed to obtain the data. For example, displaying a dialog box into which the user can type a password (<span class="FM_Courier">PDCryptGetAuthDataExProc</span>).</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Creates, fills, and verifies a security data structure (<span class="FM_Courier">PDCryptNewSecurityDataProc</span>).</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Extracts security information from the security data structure (<span class="FM_Courier">PDCryptGetSecurityInfoProc</span>).</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Allows the user to request different security settings, usually by displaying a dialog box. (<span class="FM_Courier">PDCryptDisplaySecurityDataProc</span>)</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Sets up the encryption key used to encrypt the file (<span class="FM_Courier">PDCryptNewCryptDataProc</span>).</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Fills or reads the PDF filefs encryption dictionary (<span class="FM_Courier">PDCryptFillEncryptDictProc</span>).</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Displays the current document’s permissions (required with <span class="FM_Courier">PDCryptAuthorizeExProc</span>&#160;and <span class="FM_Courier">PDCryptGetAuthDataExProc</span> callbacks).</p>
  <p dir="ltr" class="FM_Body">With <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;5.0 and later, a finer granularity of permissions has been predefined for objects supported by a PDF document. Plug-ins can invoke the <span class="FM_Courier">PDDocPermRequest</span>&#160;method to request whether a particular operation is authorized to be performed on a specified object in a document.</p>
  <p dir="ltr" class="FM_Body">To support the <span class="FM_Courier">PDDocPermRequest</span>&#160;method, there are two new callback methods: <span class="FM_Courier">PDCryptAuthorizeExProc</span>&#160;and <span class="FM_Courier">PDCryptGetAuthDataExProc</span>. <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;5.0 and later also includes optional security handling for batch operations (operations on one or more files). There are a number of callbacks (indicated by PDCryptBatch... ) that a security handler must provide to support batch processing. These callbacks are part of a <span class="FM_Courier">PDCryptBatchHandler</span>&#160;structure. The <span class="FM_Courier">PDCryptHandlerRec</span>&#160;structure contains a new member <span class="FM_Courier">CryptBatchHandler</span>, which points to this structure.</p>
  <p dir="ltr" class="FM_Body">To support batch processing, a security handler should provide a non-NULL value for <span class="FM_Courier">CryptBatchHandler</span>&#160;and implement the batch callbacks. Prior to <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;5.0, the maximum length of the encryption key that <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;accepted was 40 bits. <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;version 5.0 or later accommodates an encryption key length of 128 bits. These length limitations are imposed to comply with export restrictions.</p>
  <p dir="ltr" class="FM_4Head_NoTOC"><span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>’s authorization procedure</p>
  <p dir="ltr" class="FM_Body"><span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>’s built-in authorization procedure works as follows:</p>
  <p dir="ltr" class="FM_StepReset"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>1.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span><span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;invokes the security handler’s authorize callback (which is either <span class="FM_Courier">PDCryptAuthorizeExProc</span>, introduced with <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;5.0, or the older <span class="FM_Courier">PDCryptAuthorizeProc</span>) to determine whether the user is allowed to open the file. It passes NULL authorization data, to handle the case where no authorization data is needed. <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span> also passes the following values:</p>
  <p dir="ltr" class="FM_Bullet2"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span><span class="FM_Courier">PDPermReqObjDoc</span>&#160;and <span class="FM_Courier">PDPermReqOprOpen</span> when invoking<span class="FM_Courier"> PDCryptAuthorizeExProc</span>.</p>
  <p dir="ltr" class="FM_Bullet2"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span><span class="FM_Courier">pdPermOpen</span>&#160;when calling <span class="FM_Courier">PDCryptAuthorizeProc</span>.</p>
  <p dir="ltr" class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>2.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>If the authorize callback returns <span class="FM_Courier">true</span>, the file is opened. Otherwise, the authorization procedure executes the following steps up to three times, to give the user three chances to enter a password, or whatever authorization the security handler uses.</p>
  <p dir="ltr" class="FM_Bullet2"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>It calls the security handler’s get authorization data callback (<span class="FM_Courier">PDCryptGetAuthDataExProc</span>&#160;or the older <span class="FM_Courier">PDCryptGetAuthDataProc)</span>. This callback should obtain the authorization data using whatever user interface (for example, a dialog box used to obtain a password) or other means necessary, and then creates and fills the authorization data structure.</p>
  <p dir="ltr" class="FM_Bullet2"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>It calls the security handler’s authorize callback, passing the authorization data returned by the get authorization data callback. If the authorization succeeds, the authorize callback returns the permissions granted to the user, and the authorization procedure returns.</p>
  <p dir="ltr" class="FM_Body">The authorize callback can access the encrypted PDF document, allowing it to encrypt the authorization data using a mechanism that depends on the document’s contents. By doing this, someone who knows a document’s password cannot easily find out which other documents use the same password. The authorize callback can return permissions that depend on the password as well as the permissions specified when encryption was set up. This allows, for example, more rights to be granted to someone who knows a document’s owner password than to someone who knows the document’s user password.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Opening_a_secured_file"></a>Opening a secured file</p>
  <p dir="ltr" class="FM_Body">The <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;core API has several methods for opening files. The <span class="FM_Courier">PDDocOpen</span>&#160;(or <span class="FM_Courier">PDDocOpenEx</span>) method is used to open PDF files, even when a plug-in calls AV layer methods such as <span class="FM_Courier">AVDocOpenFromASFileWithParams</span>. As a result, the sequence of operations is largely the same regardless of whether the document is being opened from the PD&nbsp;layer or from the AV layer. The difference is that if you call <span class="FM_Courier">PDDocOpen</span>&#160;directly, you must pass your own authorization procedure (<span class="FM_Courier">PDAuthProc</span>), while AV layer methods always use <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>’s built-in authorization procedure.</p>
  <p dir="ltr" class="FM_Body">The authorization procedure must implement the authorization strategy, such as giving the user three chances to enter a password. The <span class="FM_Courier">PDAuthProc</span>&#160;is not part of a security handler, but it must call the security handler’s methods to authorize the user (for example, to get the password from the user and to check whether or not the password is valid).</p>
  <p dir="ltr" class="FM_Body"><span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span> performs the following steps to open a secured PDF file:</p>
  <p dir="ltr" class="FM_StepReset"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>1.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Searches for an Encrypt key in the PDF document’s trailer, to determine whether or not the document is encrypted. If there is no Encrypt key, <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span> opens the document immediately.</p>
  <p dir="ltr" class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>2.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>If there is an Encrypt key, its value is an encryption dictionary. <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;gets the value of the Filter key in the dictionary to determine which security handler was used when the file was saved. It looks in the list of registered security handlers (which contains <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>’s built-in handler and any handlers that plug-ins or applications have registered) for one whose name matches the name found in the PDF file. For information about a dictionary, see <a href="../Working_with_Cos_Objects/Working_with_Cos_dictionaries.htm#XREF_96656_Working_with_Cos"><span class="FM_HyperText">Working with Cos dictionaries</span></a>.</p>
  <p dir="ltr" class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>3.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>If <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;finds no match, indicating that the necessary handler could not be found, it does not open the document. If it finds a matching security handler, it invokes that handler’s P<span class="FM_Courier">DCryptNewSecurityDataProc</span>&#160;callback to extract and decrypt information from the PDF file’s encryption dictionary.</p>
  <p dir="ltr" class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>4.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span><span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span> invokes the security handler’s authorize callback (<span class="FM_Courier">PDCryptAuthorizeExProc</span>) with NULL authorization data, and with the requested permissions set to <span class="FM_Courier">PDPermReqOprOpen</span>&#160;or <span class="FM_Courier">pdPermOpen</span>&#160;(requesting that the user be allowed to open the file). This allows support for authorization schemes that do not need authorization data. </p>
  <p dir="ltr" class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>5.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>If authorization succeeds, the handler’s authorization callback must return the <span class="FM_Courier">PDPermReqStatus</span>&#160;(when the callback is <span class="FM_Courier">PDCryptAuthorizeExProc</span>) or <span class="FM_Courier">pdPermOpen</span>&#160;(when the callback is <span class="FM_Courier">PDCryptAuthorizeProc</span>) indicating that the user is permitted to open the file.</p>
  <p dir="ltr" class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>6.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>If authorization fails, the authorization procedure passed in the call to open the <span class="FM_Courier">PDDoc</span> is called.</p>
  <p dir="ltr" class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>7.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>If authorization still fails, the file is not opened.</p>
  <p dir="ltr" class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>8.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>If authorization succeeds, <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;calls the security handler’s <span class="FM_Courier">PDCryptNewCryptDataProc</span>&#160;callback to create the decryption key that is used to decrypt the file. The <span class="FM_Courier">PDCryptNewCryptDataProc</span>&#160;callback can construct the decryption key in any way it chooses, but generally performs some calculation based on the contents of the security data structure filled previously by the handler’s <span class="FM_Courier">PDCryptNewSecurityDataProc</span> callback.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Saving_a_secured_file"></a>Saving a secured file</p>
  <p dir="ltr" class="FM_Body">When saving a file, it is important to remember the following information:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>When a user selects document encryption for the first time or has selected a different security handler for an already encrypted file, the newly-selected handler does not take effect until the document is saved.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>To be allowed to save a file, the user must have <span class="FM_Courier">PDPermReqOprModify</span>&#160;or either <span class="FM_Courier">pdPermEdit</span>&#160;or <span class="FM_Courier">pdPermEditNotes</span> permission.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>In <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span> 5.0, a save operation forces a complete encrypted copy of the file to be written.</p>
  <p dir="ltr" class="FM_Body">The following information is applicable to when a secured file is saved:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>If the file is being saved in an encrypted form for the first time or if a different security handler is selected, <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;calls the new security handler’s <span class="FM_Courier">PDCryptNewSecurityDataProc</span>&#160;callback. This action creates a new copy of the new security handler’s security data structure.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>If the file is saved in an encrypted form for the first time or if a different security handler is selected, <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;calls the new security handlerfs <span class="FM_Courier">PDCryptUpdateSecurityDataProc</span>&#160;callback. This presents whatever user interface the security handler has for enabling the user to set permissions.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span><span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;invokes the new security handler’s <span class="FM_Courier">PDCryptFillEncryptDictProc</span>&#160;callback to encrypt and write into the PDF file’s encryption dictionary whatever data the security handler wants to save in the PDF file.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span><span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span> writes out the encrypted file.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span><span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span> sets the new security handler as the document’s current security handler.</p>
  </div>
<!-- Body place holder ends here-->

    <!-- Footer place holder starts here-->
    <div style="padding:0.4em 0;text-align:center;width:100%;position:relative;">
    	<hr/>
		<p style="font-size:0.7em;margin:0; font-family:adobe-clean, sans-serif"><a target="_blank" href="http://help.adobe.com/en_US/legalnotices/index.html">Legal Notices</a> | <a target="_blank" href="http://www.adobe.com/privacy.html">Online Privacy Policy</a></p>
	</div>
	<!-- Footer place holder ends here-->

</body>
</html>