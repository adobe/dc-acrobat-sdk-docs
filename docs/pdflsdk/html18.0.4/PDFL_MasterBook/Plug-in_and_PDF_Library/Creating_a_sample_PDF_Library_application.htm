<!DOCTYPE HTML>
<html>
<head><meta http-equiv="refresh" content="2;url=https://opensource.adobe.com/dc-acrobat-sdk-docs/pdflsdk/" /><meta name="robots" content="noindex, nofollow">

 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
 <title>Creating a sample PDF Library application</title>

 

 <link rel="stylesheet" href="Plug-in_and_PDF_Library.css" />
 <link rel="stylesheet" href="../../HTMLStyling.css" />


 <script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>
 <meta name="generator" content="Adobe FrameMaker 2017" />
<script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
<script type="text/javascript" src="../../template/scripts/common.min.js"></script>
<script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
<script type="text/javascript" src="../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = "../..";
gCommonRootRelPath = "../..";
gTopicId = "3.3.3";
</script>
 <meta name="brsprev" value="PDFL_MasterBook/Plug-in_and_PDF_Library/Creating_a_sample_plug-in.htm">
 <meta name="brsnext" value="PDFL_MasterBook/Plug-in_and_PDF_Library/Upgrading_existing_plug-ins.htm">
 <meta name="topic-breadcrumbs" content="Developing Plug-ins and Applications > Creating Plug-in and PDF Library Applications" />
</head>

<body dir="ltr">
<script type="text/javascript" src="../../ehlpdhtm.js"></script>

   
	<!-- Body place holder starts here-->
    <div dir="ltr">
  <p dir="ltr" class="FM_3Head"><a name="XREF_55076_Creating_a_sample"></a>Creating a sample PDF Library application</p>
  <p dir="ltr" class="FM_Body">A PDF Library application does not have the same overhead as a plug-in. That is, unlike a plug-in, a PDF Library project does not require handshaking and initialization methods. A PDF Library application is a standard C/C++ project with PDF Library files included.</p>
  <p dir="ltr" class="FM_Body">This section helps you get started with development using the Adobe PDF Library Software Developers Kit (SDK). It describes the contents of each directory in the PDF Library SDK installation, lists available code samples, and provides platform-specific information on how to set up the development environment.</p>
  <p dir="ltr" class="FM_Note"><span class="FM_Z_NoteCaution">Note:<span style="padding-left: 4pt;" class="FMAutoNumber_1"></span></span>For a detailed discussion about using the PDF Library API, see <a href="../Inserting_Text_into_PDF_Documents/Inserting_Text_into_PDF_Documents.htm#XREF_44849_Inserting_text"><span class="FM_HyperText">Inserting Text into PDF Documents</span></a>.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Contents_of_the_PDF"></a>Contents of the PDF Library SDK</p>
  <p dir="ltr" class="FM_Body">The Adobe PDF Library SDK consists of the following components:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Core libraries that provide PDF Library functionality </p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Header files that provide access to the libraries</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Fonts used in the library’s basic operations</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Sample applications and code snippets showing how to use the library for a variety of purposes</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Documentation discussing development techniques and the PDF Library APIs.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Including_library_files"></a>Including library files</p>
  <p dir="ltr" class="FM_Body">The following components are shipped with the PDF Library SDK:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span><span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span> PDF Library</p>
  <p dir="ltr" class="FM_Indent1">These are DLLs on the Windows platform and a shared object library on UNIX and Mac OS. In Windows, an interface library must be included in your Microsoft Visual Studio project. The following are the file names of these libraries:</p>
  <p dir="ltr" class="FM_Indent2"><span class="FM_Bold">AdobePDFL.lib</span>: The interface library for the Windows PDF Library DLL.</p>
  <p dir="ltr" class="FM_Indent2"><span class="FM_Bold">AdobePDFL.dll</span>: The Windows PDF Library DLL.</p>
  <p dir="ltr" class="FM_Indent2"><span class="FM_Bold">libpdfl.so</span>: The shared object library for supported UNIX platforms.</p>
  <p dir="ltr" class="FM_Indent2"><span class="FM_Bold">AdobePDFL framework</span>: The framework for Mac OS.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>PDF Library SDK header files</p>
  <p dir="ltr" class="FM_Indent1">The PDF Library SDK include directory contains headers for accessing the API methods. You can link to these library files from within your development environment. Consult the documentation that accompanies your development environment for information about linking to library files.</p>
  <p dir="ltr" class="FM_Indent1">These files perform the same task in the PDF Library SDK as in the <span data-name="AcrobatSDKProd" data-val="Acrobat&nbsp;SDK" data-showval="TRUE" data-format="AcrobatSDKProd">Acrobat&nbsp;SDK</span>. For example, the PDCalls.h provides HFT functionality for PD layer functions. (See <a href="Creating_a_sample_plug-in.htm#XREF_78469_Including_Acrobat"><span class="FM_HyperText">Including Acrobat&nbsp;SDK library files</span></a>.) </p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Sample_code"></a>Sample code</p>
  <p dir="ltr" class="FM_Body">Samples are provided for the Windows, Mac OS, and UNIX, platforms in two forms:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Stand-alone sample programs</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>The SnippetRunner, an environment and infrastructure for code snippets that illustrate specific functions or techniques.</p>
  <p dir="ltr" class="FM_Body">Sample code is intended to demonstrate the use of the PDF Library API and is not necessarily robust enough for a final implementation. The sample code itself is platform-independent, as is the majority of the PDF Library API; the only difference between the sample source code for different platforms is the line-endings.</p>
  <p dir="ltr" class="FM_Body">The Mac OS samples are provided as application packages. This format is normal for double-clickable applications, but they can also be run from the command line. To run them from the command line, you can either specify the command line arguments in the Xcode project file and execute within the IDE, or you can target the actual executable, which is in the Contents/MacOS folder inside the package. For example, from the Terminal window:</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>$ cd helowrld.app/Contents/MacOS/</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>$ helowrld</p>
  <p dir="ltr" class="FM_Body">The MT (multithreading) samples require command line arguments (a default set is added to the project files). Therefore, execution from within the IDE is preferred. Also, for those samples you must use absolute paths for the command line arguments.</p>
  <p dir="ltr" class="FM_5Head">Stand-alone samples</p>
  <p dir="ltr" class="FM_Body">The following table lists the stand-alone sample applications that accompany the PDF Library SDK.</p>
    <div width="100%" align="left">
  <table border-spacing="0" dir="ltr" class="table65" border-collapse="collapse" style="max-width: 100% ;height: auto">
   <tr class="tr10">
   <th class="td52">
   <p dir="ltr" class="FM_TableHead">Sample application</p>
</th>
   <th class="td66">
   <p dir="ltr" class="FM_TableHead">Description</p>
</th>
</tr>
   <tr class="tr15">
   <td class="td54">
   <p dir="ltr" class="FM_CodeReference">addelem</p>
</td>
   <td class="td67">
   <p dir="ltr" class="FM_TableBody">Shows how to modify existing pages in a PDF file. It adds a footer to each page and shifts the first line of each text run.</p>
</td>
</tr>
   <tr class="tr15">
   <td class="td54">
   <p dir="ltr" class="FM_CodeReference">all</p>
</td>
   <td class="td67">
   <p dir="ltr" class="FM_TableBody">Used to compile all samples at the same time. Available for Windows and Mac OS only.</p>
</td>
</tr>
   <tr class="tr10">
   <td class="td54">
   <p dir="ltr" class="FM_CodeReference">CreatePattern</p>
</td>
   <td class="td67">
   <p dir="ltr" class="FM_TableBody">Shows how to create tiling patterns in a PDF document.</p>
</td>
</tr>
   <tr class="tr15">
   <td class="td54">
   <p dir="ltr" class="FM_CodeReference">Decryption</p>
</td>
   <td class="td67">
   <p dir="ltr" class="FM_TableBody">Shows how to programmatically decrypt a PDF document encrypted with <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span> standard security options.</p>
</td>
</tr>
   <tr class="tr22">
   <td class="td54">
   <p dir="ltr" class="FM_CodeReference">drawtomemory</p>
</td>
   <td class="td67">
   <p dir="ltr" class="FM_TableBody">Shows how to render a page to memory using the <span class="FM_Courier">PDPageDrawContentsToMemory</span>&#160;PDF Library method, and creates a PDF file with a bitmap image rendered on the page.</p>
</td>
</tr>
   <tr class="tr10">
   <td class="td54">
   <p dir="ltr" class="FM_CodeReference">fontembd</p>
</td>
   <td class="td67">
   <p dir="ltr" class="FM_TableBody">Shows font enumeration and font embedding.</p>
</td>
</tr>
   <tr class="tr10">
   <td class="td54">
   <p dir="ltr" class="FM_CodeReference">helowrld</p>
</td>
   <td class="td67">
   <p dir="ltr" class="FM_TableBody">Shows the basics of creating a PDF document.</p>
</td>
</tr>
   <tr class="tr15">
   <td class="td54">
   <p dir="ltr" class="FM_CodeReference">JPXEncode</p>
</td>
   <td class="td67">
   <p dir="ltr" class="FM_TableBody">Re-encodes PDF embedded images with the JPX filter and writes out a new PDF file with the re-encoded images embedded.</p>
</td>
</tr>
   <tr class="tr10">
   <td class="td54">
   <p dir="ltr" class="FM_CodeReference">mergepdf</p>
</td>
   <td class="td67">
   <p dir="ltr" class="FM_TableBody">Shows how to merge two PDF files.</p>
</td>
</tr>
   <tr class="tr15">
   <td class="td54">
   <p dir="ltr" class="FM_CodeReference">MTInMemFS</p>
</td>
   <td class="td67">
   <p dir="ltr" class="FM_TableBody">Demonstrates use of an in-memory file system for a simple workflow within a multithreaded context.</p>
</td>
</tr>
   <tr class="tr15">
   <td class="td54">
   <p dir="ltr" class="FM_CodeReference">MTSerialNums</p>
</td>
   <td class="td67">
   <p dir="ltr" class="FM_TableBody">Demonstrates creation of multiple threads to simultaneously generate multiple PDFs.</p>
</td>
</tr>
   <tr class="tr15">
   <td class="td54">
   <p dir="ltr" class="FM_CodeReference">MTTextExtract</p>
</td>
   <td class="td67">
   <p dir="ltr" class="FM_TableBody">Demonstrates multiple threads concurrently processing multiple PDF documents.</p>
</td>
</tr>
   <tr class="tr15">
   <td class="td54">
   <p dir="ltr" class="FM_CodeReference">Peddler</p>
</td>
   <td class="td67">
   <p dir="ltr" class="FM_TableBody">Shows how to add hyperlinking (specifically targeting URIs) capabilities to an existing PDF document.</p>
</td>
</tr>
   <tr class="tr15">
   <td class="td54">
   <p dir="ltr" class="FM_CodeReference">printpdf</p>
</td>
   <td class="td67">
   <p dir="ltr" class="FM_TableBody">Shows how to print a PDF file to a printer or to a file using the PDF Library method PDFLPrintDoc.</p>
</td>
</tr>
  </table>
    </div>
  <p dir="ltr" class="FM_5Head"><a name="IX_SnippetRunner_application"></a>SnippetRunner application</p>
  <p dir="ltr" class="FM_Body">SnippetRunner allows you to quickly prototype code containing PDF Library API calls without the overhead of writing and verifying a complete application. It provides an infrastructure and utility functions to support execution and testing of code snippets, which are small but complete portions of PDF Library application code.</p>
  <p dir="ltr" class="FM_Body">SnippetRunner consists of these major components:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>An application that acts as a back-end server and that provides the basic functionality, including a parameter input mechanism, debug support, and exception handling.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>A graphical user interface that acts as a client to the back-end server. (This user interface, called the Common User Interface, is also provided with the <span data-name="AcrobatSDKProd" data-val="Acrobat&nbsp;SDK" data-showval="TRUE" data-format="AcrobatSDKProd">Acrobat&nbsp;SDK</span>, which uses an <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;plug-in for its back end.)</p>
  <p dir="ltr" class="FM_Body">For more information about SnippetRunner, see the <a href="../Introduction_Snippets/Introduction_Snippets.htm#XREF_64751_Snippet_Runner"><span class="FM_HyperText">Snippet Runner Cookbook</span></a>. </p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Developing_applications"></a>Developing applications with the Adobe PDF Library</p>
  <p dir="ltr" class="FM_Body">This section details the compiler environment variables (macros) required to build applications against the Adobe PDF Library. On all platforms, you must define the PRODUCT macro for the preprocessor.</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>PRODUCT=\&quot;HFTLibrary.h\&quot;</p>
  <p dir="ltr" class="FM_Body">This macro is used as a trigger for conditional compilation and allows the same headers to be used for both the <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span> core API and the Adobe PDF Library.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Windows1"></a>Windows</p>
  <p dir="ltr" class="FM_Body">The following macros must also be defined in the IDE project settings for applications to compile correctly on the Windows platform:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span><span class="FM_Courier">WIN_ENV</span>&#160;</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span><span class="FM_Courier">WIN32</span>&#160;</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span><span class="FM_Courier">WIN_PLATFORM</span>&#160;</p>
  <p dir="ltr" class="FM_Body">The Adobe PDF Library is compiled with code generation set to Multithreaded. Applications linking with the Adobe PDF Library must have code generation settings that match or there will be conflicts between the Microsoft libraries <span class="FM_Courier">MSVCRT</span>&#160;and <span class="FM_Courier">LIBCMT</span>. </p>
  <p dir="ltr" class="FM_Body">In Visual Studio, the Ignore Libraries settings (click Project Settings &gt;&#160;Link &gt;&#160;Input &gt; Ignore libraries) should not ignore LIBCMT (other versions of PDF Library do ignore it).</p>
  <p dir="ltr" class="FM_Body">The Adobe PDF Library is distributed as an interface library (AdobePDFL.lib) and matching DLL (AdobePDFL.dll). You should link the interface library into your application.</p>
  <p dir="ltr" class="FM_Body">The operating system must be able to access the Adobe PDF Library at runtime. It does so by searching the paths specified by the PATH environment variable, as well as the folder in which the application was launched.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Mac_OS1"></a>Mac OS</p>
  <p dir="ltr" class="FM_Body">The Mac OS libraries use a precompiled header and prefix file to define the appropriate macros. See Precompile.pch in the Samples:utils directory of the Adobe PDF Library SDK for the macros required to successfully compile the samples.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_LINUX1"></a>LINUX</p>
  <p dir="ltr" class="FM_Body">The following macros must be defined for the headers to compile correctly on the LINUX platform:</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>UNIX_ENV=1</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>UNIX PLATFORM=1</p>
  <p dir="ltr" class="FM_Body">Before you can compile the samples, you must point the makefiles to your CLANG compiler. Ensure that the permissions on all libraries are set so that the dynamic loader can find and load the libraries.</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>chmod o+x libraryname</p>
  <p dir="ltr" class="FM_Body">Shared objects are provided for Linux. Alter the common makefile for each individual platform/os (i.e., linux.mak) under the samples/utils directory to specify the CLANG and static library access path.</p>
  <p dir="ltr" class="FM_Body">You will need to set the environment variable <span class="FM_Courier">LD_LIBRARY_PATH</span>&#160;to the location of the libraries so that the application will find the shared object libraries at run time. This can be accomplished with the command</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>setenv LD_LIBRARY_PATH path</p>
  <p dir="ltr" class="FM_Body">Before you run your application, set the <span class="FM_Courier">PSRESOURCEPATH</span>&#160;and <span class="FM_Courier">ACRO_RES_PATH</span>&#160;environment variables to point to your fonts. For example, to set these environment variables manually before you run your application:</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>setenv PSRESOURCEPATH /user/yourname/PSFont</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>setenv ACRO_RES_PATH /user/yourname/PSFont</p>
  <p dir="ltr" class="FM_Body">Alternatively, you can define the environment variables within the application using the <span class="FM_Courier">putenv</span>&#160;system call.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Initialization_and"></a>Initialization and termination</p>
  <p dir="ltr" class="FM_Body">Applications must initialize and terminate the Adobe PDF Library appropriately:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Call <span class="FM_Courier">PDFLInit</span>&#160;to set up internal data structures, locate required resources such as fonts, and perform initialization (such as setting client-provided memory allocation routines). Calling most library functions without successfully initializing the library results in error conditions. The rest of this section provides details on using PDFLInit.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Call <span class="FM_Courier">PDFLTerm</span>&#160;to clean up before an application terminates or when access to PDF Library functionality is no longer needed.</p>
  <p dir="ltr" class="FM_Body">Since the PDF Library supports thread-safety (since version 6.1.2), initialization and termination are handled on a per-thread basis.</p>
  <p dir="ltr" class="FM_Body">The <span class="FM_Courier">PDFLInit</span>&#160;function takes as a parameter a <span class="FM_Courier">PDFLData</span>&#160;structure, defined in the API header file PDFInit.h. You must provide valid values for the following members of the structure before passing it to <span class="FM_Courier">PDFLInit</span>:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>size denotes the size of the structure and can be obtained with <span class="FM_Courier">sizeof(PDFLDataRec)</span>.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>listLen is the number of directories listed in dirList.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>dirList is an array of directories that contain font resources. The following discussion explains how to use this member on each of the supported platforms.</p>
  <p dir="ltr" class="FM_Body">In Windows and Mac OS, the PDF Library searches for fonts in the default system and in their subdirectories (to 99 levels). You can specify additional font directories to search (also to 99 levels) in the dirList array. (Note that this can affect performance.)</p>
  <p dir="ltr" class="FM_Body">Here is an example showing how to pass the font paths to dirList for Windows:</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>pdflLibData.dirList[0]= strdup(&quot;C:\\Myfontfolder\\CMap&quot;);</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>pdflLibData.dirList[1]= strdup(&quot;C:\\Myfontfolder\\CIDFont&quot;);</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>pdflLibData.dirList[2]= strdup(&quot;C:\\Myfontfolder\\Font&quot;);</p>
  <p dir="ltr" class="FM_Body">The paths can be either full paths or paths relative to the directory from which the executable linking in the Adobe PDF Library was started. You can set the value <span class="FM_Courier">kPDFLInitIgnoreDefaultDirectories</span>&#160;in the flags field of the<span class="FM_Courier"> PDFLData</span>&#160;structure to indicate that the default font directories should not be searched but only the directories provided in dirList.</p>
  <p dir="ltr" class="FM_Body">For more details, see the functions <span class="FM_Courier">PDFLGetDirList_Win</span>&#160;and <span class="FM_Courier">PDFLGetDirList_Mac</span>&#160;in the MyPDFLibUtils.cpp file in the <span class="FM_Courier">Samples/utils</span> directory.</p>
  <p dir="ltr" class="FM_Body">In UNIX, the PDF Library searches by default for fonts in the directory from which the application was started. Use dirList member to specify additional locations of font resources.</p>
  <p dir="ltr" class="FM_Body">For more details, see the function <span class="FM_Courier">PDFLGetDirList_Unx </span>in the MyPDFLibUtils.cpp file in the <span class="FM_Courier">Samples/utils</span> directory.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Multithreading"></a>Multithreading</p>
  <p dir="ltr" class="FM_Body">When using the thread-safe PDF Library, initialization and termination now additionally need to be performed for each thread that calls into the library, as well as at the process level. The interfaces for per-thread initialization/termination are the same as before.</p>
  <p dir="ltr" class="FM_Body">Since each thread acquires an independent PDF Library memory context, you should not share PDF Library data and resources among threads. This includes sharing the same PDF file.</p>
  <p dir="ltr" class="FM_Body">The Adobe PDF libraries are thread-safe. To use threads, simply make the appropriate system call (<span class="FM_Courier">beginthreadex</span>&#160;on Windows, and <span class="FM_Courier">pthread_create</span>&#160;on UNIX). Multiple threads cannot share PDF Library data types. However, they share the same process heap; therefore, an application can share generic data types between threads. Multiple threads can open the same file read-only; however, multiple threads should not attempt to write to the same PDF document.</p>
  <p dir="ltr" class="FM_Body">In Windows, <span class="FM_Courier">CreateThread</span>&#160;is not recommended if the application is using most stdio.h-defined functions, including file I/O and string manipulation. It is best to <span class="FM_Courier">use _beginthreadex</span>&#160;on Windows, which performs extra bookkeeping to ensure thread safety.</p>
  </div>
<!-- Body place holder ends here-->

    <!-- Footer place holder starts here-->
    <div style="padding:0.4em 0;text-align:center;width:100%;position:relative;">
    	<hr/>
		<p style="font-size:0.7em;margin:0; font-family:adobe-clean, sans-serif"><a target="_blank" href="http://help.adobe.com/en_US/legalnotices/index.html">Legal Notices</a> | <a target="_blank" href="http://www.adobe.com/privacy.html">Online Privacy Policy</a></p>
	</div>
	<!-- Footer place holder ends here-->

</body>
</html>