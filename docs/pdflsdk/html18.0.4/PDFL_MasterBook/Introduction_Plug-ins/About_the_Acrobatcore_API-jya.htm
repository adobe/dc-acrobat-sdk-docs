<!DOCTYPE HTML>
<html>
<head><meta http-equiv="refresh" content="2;url=https://opensource.adobe.com/dc-acrobat-sdk-docs/pdflsdk/" /><meta name="robots" content="noindex, nofollow">

 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
 <title>About the Acrobat&#160;core API</title>

 

 <link rel="stylesheet" href="Introduction_Plug-ins.css" />
 <link rel="stylesheet" href="../../HTMLStyling.css" />


 <script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>
 <meta name="generator" content="Adobe FrameMaker 2017" />
<script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
<script type="text/javascript" src="../../template/scripts/common.min.js"></script>
<script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
<script type="text/javascript" src="../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = "../..";
gCommonRootRelPath = "../..";
gTopicId = "3.1.1";
</script>
 <meta name="brsprev" value="PDFL_MasterBook/Introduction_Plug-ins/About_plug-ins.htm">
 <meta name="brsnext" value="PDFL_MasterBook/Introduction_Plug-ins/About_PDF_Library_and_plug-in_applications.htm">
 <meta name="topic-breadcrumbs" content="Developing Plug-ins and Applications > Introduction" />
</head>

<body dir="ltr">
<script type="text/javascript" src="../../ehlpdhtm.js"></script>

   
	<!-- Body place holder starts here-->
    <div dir="ltr">
  <p dir="ltr" class="FM_3Head"><a name="IX_ANSI"></a><a name="IX_C_language"></a><a name="XREF_53557_About_the_Acrobat"></a>About the <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;core API</p>
  <p dir="ltr" class="FM_Body">The <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;core API consists of methods that operate on objects located within PDF documents. The <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;core API is implemented as a standard ANSI C programming library where methods are C functions and objects are opaque data types that encapsulate their data. The <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;core API is supported on Windows (32- and 64-bit), Mac OS, Linux®, and some UNIX® platforms like Solaris™, HP-UX, and AIX®.</p>
  <p dir="ltr" class="FM_Body">The following diagram illustrates the hierarchy of the <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span> core API.</p>
  <p dir="ltr" class="FM_GraphicBody" style="display:inline"><img alt="inset_000082.jpg" id="image1" src="../../assets/inset_000082.jpg" style="max-width: 100% ;height: auto" />&nbsp;</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Acrobat_Viewer_layer"></a><a name="IX_AV_layer"></a><a name="IX_Acrobat_Viewer_layer"></a><a name="XREF_82715_Acrobat_viewer"></a><span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span> Viewer layer</p>
  <p dir="ltr" class="FM_Body">The <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;Viewer (AV) layer enables plug-ins to control <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;and modify its user interface. Using AV methods, you can, for example, add menus and menu commands, add buttons to toolbars, open and close files, display simple dialog boxes, and perform many other application-level tasks.</p>
  <p dir="ltr" class="FM_Note"><span class="FM_Z_NoteCaution">Note:<span style="padding-left: 4pt;" class="FMAutoNumber_1"></span></span>AV layer methods are not available through the PDF Library API.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Portable_Document_layer"></a><a name="IX_Portable_Document_layer"></a><a name="XREF_55631_Portable_document"></a>Portable Document layer</p>
  <p dir="ltr" class="FM_Body">The Portable Document (PD) layer provides access to PDF document components such as pages and annotations. Closely related to the PD layer are two method groups, each of which controls a different aspect of a PDF document:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>PDFEdit methods deal with the physical representation of a PDF document. More specifically, PDFEdit methods handle page content as a list of objects whose values and attributes are modifiable. These methods allow your plug-in or PDF Library application to read, write, edit, and create page contents and page resources, which may contain fonts, images, and so on.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>PDSEdit methods deal with the logical structure of a PDF document. A PDF document’s logical structure is built independent of its physical representation, with pointers from the logical structure to the physical representation, and the reverse. PDSEdit methods store the logical structure information. They enable your plug-in or PDF Library application to access PDF files by means of a structure tree. Having logical structure in PDF files facilitates navigating, searching, and extracting data from PDF documents. For example, PDSEdit methods can obtain logically-ordered content, independently of the drawing order.</p>
  <p dir="ltr" class="FM_4Head_NoTOC"><a name="IX_Acrobat_Support_layer"></a><a name="XREF_20071_Acrobat_Support"></a><span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span> Support layer</p>
  <p dir="ltr" class="FM_Body">The <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;Support (AS) layer provides a variety of utility methods, including platform-independent memory allocation and fixed-point math utilities. In addition, it allows plug-ins to replace low-level file system routines used by <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;(including read, write, reopen, remove file, rename file, and other directory operations). This enables <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span> to be used with other file systems, such as on-line systems.</p>
  <p dir="ltr" class="FM_4Head_NoTOC"><a name="IX_Cos_layer"></a>Cos layer</p>
  <p dir="ltr" class="FM_Body">The Cos Object System (Cos) layer provides access to the building blocks used to construct PDF documents. Cos methods allow plug-ins and PDF Library applications to manipulate low-level data in a PDF file, such as dictionary and data streams. (See <a href="../Working_with_Cos_Objects/Working_with_Cos_Objects.htm#XREF_86959_Working_with_COS"><span class="FM_HyperText">Working with Cos Objects</span></a>.)</p>
  <p dir="ltr" class="FM_4Head_NoTOC"><a name="IX_platform_specific_methods"></a>Platform-specific methods</p>
  <p dir="ltr" class="FM_Body">In addition to the method groups represented in the previous diagram, the <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;core API includes platform-specific plug-in utilities to handle issues that are unique to Windows, Mac OS, and Linux platforms. For information about these methods, see the <span class="FM_HyperText"><a href="../../API_References/PDFL_API_Reference/index.html">PDF Library API Reference</a></span>.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Acrobat_core_API_objects"></a><span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span> core API objects</p>
  <p dir="ltr" class="FM_Body">Most objects accessible through AV and PD layer methods are opaque. That is, they are neither pointers nor pointers to pointers. They provide equivalent functionality in that they reference an object’s data rather than storing it. If you assign one object to another variable, both variables affect the same internal object.</p>
  <p dir="ltr" class="FM_Body">Objects are typically named using the following conventions:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>The name of the concrete definition for a complex type ends in <span class="FM_Courier">Rec</span> (for record).</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>A pointer to a simple or complex type ends in <span class="FM_Courier">P</span> (for pointer).</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Opaque types do not contain a <span class="FM_Courier">P</span>&#160;suffix. For example, a <span class="FM_Courier">PDDoc</span> object references a PDF document.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Three names identify complex types that provide callback methods:</p>
  <p dir="ltr" class="FM_Indent1"><span class="FM_Bold">Monitor</span>: A set of callbacks for an enumeration method.</p>
  <p dir="ltr" class="FM_Indent1"><span class="FM_Bold">Server</span>: An implementation of a service added by a plug-in.</p>
  <p dir="ltr" class="FM_Indent1"><span class="FM_Bold">Handler</span>: An implementation for a subtype of object handled by a plug-in</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Callback method names typically contain the suffix <span class="FM_Courier">Proc</span> (for procedure).</p>
  <p dir="ltr" class="FM_5Head"><a name="IX_file_object"></a>File object interrelationships</p>
  <p dir="ltr" class="FM_Body">The following diagram shows file object interrelationships and how certain objects can be obtained by using other objects.</p>
  <p dir="ltr" class="FM_GraphicBody"><img alt="Objects1.jpg" id="image2" src="../../assets/Objects1.jpg" style="max-width: 100% ;height: auto" />&nbsp;</p>
  <p dir="ltr" class="FM_5Head"><a name="IX_document_object"></a>Document object interrelationships</p>
  <p dir="ltr" class="FM_Body">The following diagram shows document object interrelationships and how certain objects can be obtained by using other objects.</p>
  <p dir="ltr" class="FM_GraphicBody" style="display:inline"><img alt="Objects2.jpg" id="image3" src="../../assets/Objects2.jpg" style="max-width: 100% ;height: auto" />&nbsp;</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Acrobat_core_API_methods"></a><span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span> core API methods</p>
  <p dir="ltr" class="FM_Body"><span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span> core API method names typically conform to the following syntax:</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>&lt;layer&gt;&lt;object&gt;&lt;verb&gt;&lt;thing&gt;</p>
  <p dir="ltr" class="FM_Indent1"><span class="FM_Bold">layer</span>: identifies the method’s layer (for example, AV for <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;Viewer layer). </p>
  <p dir="ltr" class="FM_Indent1"><span class="FM_Bold">object</span>: identifies the object upon which the method acts (for example, menu). </p>
  <p dir="ltr" class="FM_Indent1"><span class="FM_Bold">verb</span>: specifies an action that the method performs (for example, get or set). See the table that follows this list for the most commonly used verbs in method names.</p>
  <p dir="ltr" class="FM_Indent1"><span class="FM_Bold">thing</span>: specific to each method, usually an object of the operation. May not always be present.</p>
  <p dir="ltr" class="FM_Body">The following table lists some common verbs that are used in method names and describes their meaning.</p>
    <div width="100%" align="left">
  <table border-spacing="0" dir="ltr" class="table27" border-collapse="collapse" style="max-width: 100% ;height: auto">
   <tr class="tr10">
   <th class="td28">
   <p dir="ltr" class="FM_TableHead">Verb</p>
</th>
   <th class="td29">
   <p dir="ltr" class="FM_TableHead">Description</p>
</th>
</tr>
   <tr class="tr22">
   <td class="td30">
   <p dir="ltr" class="FM_TableBody">Acquire</p>
</td>
   <td class="td31">
   <p dir="ltr" class="FM_TableBody">Obtains a shareable resource from a parent object or increments a reference counter for an object. The shared object is not destroyed until all acquires have released it. <br />Example: <span class="FM_Courier">AVMenuItemAcquire</span></p>
</td>
</tr>
   <tr class="tr15">
   <td class="td30">
   <p dir="ltr" class="FM_TableBody">Add</p>
</td>
   <td class="td31">
   <p dir="ltr" class="FM_TableBody">Adds an object as a child to the current object. <br />Example: <span class="FM_Courier">PDBookmarkAddChild</span></p>
</td>
</tr>
   <tr class="tr22">
   <td class="td30">
   <p dir="ltr" class="FM_TableBody">AddNew</p>
</td>
   <td class="td31">
   <p dir="ltr" class="FM_TableBody">Creates a new object using the specified parameters and adds the new object to the current object.<br />Example: <span class="FM_Courier">PDBookmarkAddNewChild</span></p>
</td>
</tr>
   <tr class="tr15">
   <td class="td30">
   <p dir="ltr" class="FM_TableBody">Close</p>
</td>
   <td class="td31">
   <p dir="ltr" class="FM_TableBody">Destroys an object that was opened and closes the underlying storage or stream. <br />Example: <span class="FM_Courier">ASFileClose</span></p>
</td>
</tr>
   <tr class="tr15">
   <td class="td30">
   <p dir="ltr" class="FM_TableBody">Create</p>
</td>
   <td class="td31">
   <p dir="ltr" class="FM_TableBody">Creates a new object of a given type. <br />Example: <span class="FM_Courier">PDDocCreatePage</span>.</p>
</td>
</tr>
   <tr class="tr15">
   <td class="td30">
   <p dir="ltr" class="FM_TableBody">Delete</p>
</td>
   <td class="td31">
   <p dir="ltr" class="FM_TableBody">Removes the second object from the current object and destroys the second object. <br />Example: <span class="FM_Courier">PDDocDeletePages</span></p>
</td>
</tr>
   <tr class="tr15">
   <td class="td30">
   <p dir="ltr" class="FM_TableBody">Destroy</p>
</td>
   <td class="td31">
   <p dir="ltr" class="FM_TableBody">Destroys the specified object and releases its resources immediately. <br />Example: <span class="FM_Courier">PDBookmarkDestroy</span></p>
</td>
</tr>
   <tr class="tr15">
   <td class="td30">
   <p dir="ltr" class="FM_TableBody">Enum</p>
</td>
   <td class="td31">
   <p dir="ltr" class="FM_TableBody">Enumerates the specified descendant objects of the current object.<br />Example: <span class="FM_Courier">PDDocEnumFonts</span></p>
</td>
</tr>
   <tr class="tr15">
   <td class="td30">
   <p dir="ltr" class="FM_TableBody">Get</p>
</td>
   <td class="td31">
   <p dir="ltr" class="FM_TableBody">Retrieves a specific object attribute. <br />Example: <span class="FM_Courier">AVWindowGetTitle</span></p>
</td>
</tr>
   <tr class="tr15">
   <td class="td30">
   <p dir="ltr" class="FM_TableBody">Is</p>
</td>
   <td class="td31">
   <p dir="ltr" class="FM_TableBody">Retrieves a Boolean attribute of the object. <br />Example: <span class="FM_Courier">PDBookmarkIsOpen</span></p>
</td>
</tr>
   <tr class="tr15">
   <td class="td30">
   <p dir="ltr" class="FM_TableBody">New</p>
</td>
   <td class="td31">
   <p dir="ltr" class="FM_TableBody">Creates a new unattached object.<br />Example: <span class="FM_Courier">AVMenuNew</span></p>
</td>
</tr>
   <tr class="tr15">
   <td class="td30">
   <p dir="ltr" class="FM_TableBody">Open</p>
</td>
   <td class="td31">
   <p dir="ltr" class="FM_TableBody">Opens an object from storage or a stream. <br />Example: <span class="FM_Courier">AVDocOpenFromFile</span></p>
</td>
</tr>
   <tr class="tr15">
   <td class="td30">
   <p dir="ltr" class="FM_TableBody">Release</p>
</td>
   <td class="td31">
   <p dir="ltr" class="FM_TableBody">Releases a shared object. <br />Example: <span class="FM_Courier">PDPageRelease</span></p>
</td>
</tr>
   <tr class="tr15">
   <td class="td30">
   <p dir="ltr" class="FM_TableBody">Remove</p>
</td>
   <td class="td31">
   <p dir="ltr" class="FM_TableBody">Removes the second object from the current object but does not destroy it.<br />Example: <span class="FM_Courier">AVMenuRemove</span></p>
</td>
</tr>
   <tr class="tr22">
   <td class="td30">
   <p dir="ltr" class="FM_TableBody">Set</p>
</td>
   <td class="td31">
   <p dir="ltr" class="FM_TableBody">Sets an attribute of the object. <br />Example: <span class="FM_Courier">PDAnnotSetFlags<br /></span>Note: Cos methods uses the verb Put.</p>
</td>
</tr>
  </table>
    </div>
  <p dir="ltr" class="FM_Body">While many API method names follow the syntax specified in this section, there are exceptions. For example, conversion methods conform to the following syntax:</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>&lt;layer&gt;&lt;object&gt;&lt;source_object&gt;to&lt;dest_object&gt;</p>
  <p dir="ltr" class="FM_Body">An example is the <span class="FM_Courier">AVPageViewPointToDevice</span>&#160;method. (See the <span class="FM_HyperText"><a href="../../API_References/PDFL_API_Reference/index.html">PDF Library API Reference</a></span>.)</p>
  <p dir="ltr" class="FM_Body">Get and Set methods are used for getting and setting object attributes. Each object type has zero or more attributes. For example, an annotation object (<span class="FM_Courier">PDAnnot</span>) contains attributes such as color and date. You can obtain and modify attribute values by using methods such as <span class="FM_Courier">PDAnnotGetColor</span>&#160;and <span class="FM_Courier">PDAnnotSetDate</span>.</p>
  <p dir="ltr" class="FM_Body">In some cases, the return value of a Get method is another object. For example, the <span class="FM_Courier">AVDocGetAVWindow </span>method returns an <span class="FM_Courier">AVWindow</span>&#160;object corresponding to the specified <span class="FM_Courier">AVDoc</span> object.</p>
  <p dir="ltr" class="FM_Body">Other methods that return objects have the word Acquire in their name. These methods are always paired with a corresponding Release method, and have the additional side effect of incrementing or decrementing a reference count. The <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;core API uses <span class="FM_Courier">Acquire</span>&#160;and <span class="FM_Courier">Release</span>&#160;methods to perform various tasks such as determining whether it is safe to free a memory structure representing an object. Failure to match <span class="FM_Courier">Acquire</span>&#160;and <span class="FM_Courier">Release</span>&#160;method pairs can result in <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;complaining that a document cannot be closed due to non-zero reference counts. For more information, see <a href="../Understanding_Plug-ins/Acquiring_and_releasing_objects.htm#XREF_68646_Acquiring_and"><span class="FM_HyperText">Acquiring and releasing objects</span></a>.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Data_types"></a><a name="IX_data_types"></a>Data types</p>
  <p dir="ltr" class="FM_Body">The <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span> core API consists of the following data types:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Scalar </p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Simple</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Complex</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Opaque</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>Cos</p>
  <p dir="ltr" class="FM_4Head_NoTOC"><a name="IX_scalar_data_type"></a>Scalar types</p>
  <p dir="ltr" class="FM_Body">Scalar (non-pointer) types are based on underlying C language types, but have platform-independent sizes. They are defined in the header file CoreExpT.h. All scalar types are AS layer types. For portability, enumerated types are defined using a type of known size, such as <span class="FM_Courier">ASEnum16</span>. </p>
  <p dir="ltr" class="FM_Body">The following table describes scalar types.</p>
    <div width="100%" align="left">
  <table border-spacing="0" dir="ltr" class="table32" border-collapse="collapse" style="max-width: 100% ;height: auto">
   <tr class="tr10">
   <th class="td33">
   <p dir="ltr" class="FM_TableHead">Type</p>
</th>
   <th class="td34">
   <p dir="ltr" class="FM_TableHead">Byte Size</p>
</th>
   <th class="td35">
   <p dir="ltr" class="FM_TableHead">Description</p>
</th>
</tr>
   <tr class="tr10">
   <td class="td36">
   <p dir="ltr" class="FM_CodeReference">ASBool</p>
</td>
   <td class="td37">
   <p dir="ltr" class="FM_TableBody">2</p>
</td>
   <td class="td38">
   <p dir="ltr" class="FM_TableBody">Boolean</p>
</td>
</tr>
   <tr class="tr10">
   <td class="td36">
   <p dir="ltr" class="FM_CodeReference">ASUns8</p>
</td>
   <td class="td37">
   <p dir="ltr" class="FM_TableBody">1</p>
</td>
   <td class="td38">
   <p dir="ltr" class="FM_TableBody">unsigned char</p>
</td>
</tr>
   <tr class="tr10">
   <td class="td36">
   <p dir="ltr" class="FM_CodeReference">ASUns16</p>
</td>
   <td class="td37">
   <p dir="ltr" class="FM_TableBody">2</p>
</td>
   <td class="td38">
   <p dir="ltr" class="FM_TableBody">unsigned short</p>
</td>
</tr>
   <tr class="tr10">
   <td class="td36">
   <p dir="ltr" class="FM_CodeReference">ASUns32</p>
</td>
   <td class="td37">
   <p dir="ltr" class="FM_TableBody">4</p>
</td>
   <td class="td38">
   <p dir="ltr" class="FM_TableBody">unsigned long</p>
</td>
</tr>
   <tr class="tr10">
   <td class="td36">
   <p dir="ltr" class="FM_CodeReference">ASInt8</p>
</td>
   <td class="td37">
   <p dir="ltr" class="FM_TableBody">1</p>
</td>
   <td class="td38">
   <p dir="ltr" class="FM_TableBody">char</p>
</td>
</tr>
   <tr class="tr10">
   <td class="td36">
   <p dir="ltr" class="FM_CodeReference">ASInt16</p>
</td>
   <td class="td37">
   <p dir="ltr" class="FM_TableBody">2</p>
</td>
   <td class="td38">
   <p dir="ltr" class="FM_TableBody">signed short</p>
</td>
</tr>
   <tr class="tr10">
   <td class="td36">
   <p dir="ltr" class="FM_CodeReference">ASInt32</p>
</td>
   <td class="td37">
   <p dir="ltr" class="FM_TableBody">4</p>
</td>
   <td class="td38">
   <p dir="ltr" class="FM_TableBody">signed long</p>
</td>
</tr>
   <tr class="tr10">
   <td class="td36">
   <p dir="ltr" class="FM_CodeReference">ASInt64</p>
</td>
   <td class="td37">
   <p dir="ltr" class="FM_TableBody">8</p>
</td>
   <td class="td38">
   <p dir="ltr" class="FM_TableBody">signed long</p>
</td>
</tr>
   <tr class="tr10">
   <td class="td36">
   <p dir="ltr" class="FM_CodeReference">ASEnum8</p>
</td>
   <td class="td37">
   <p dir="ltr" class="FM_TableBody">1</p>
</td>
   <td class="td38">
   <p dir="ltr" class="FM_TableBody">enum (127 values)</p>
</td>
</tr>
   <tr class="tr10">
   <td class="td36">
   <p dir="ltr" class="FM_CodeReference">ASEnum16</p>
</td>
   <td class="td37">
   <p dir="ltr" class="FM_TableBody">2</p>
</td>
   <td class="td38">
   <p dir="ltr" class="FM_TableBody">enum (32767 values)</p>
</td>
</tr>
   <tr class="tr10">
   <td class="td36">
   <p dir="ltr" class="FM_CodeReference">ASFixed</p>
</td>
   <td class="td37">
   <p dir="ltr" class="FM_TableBody">4</p>
</td>
   <td class="td38">
   <p dir="ltr" class="FM_TableBody">fixed point integer</p>
</td>
</tr>
   <tr class="tr10">
   <td class="td36">
   <p dir="ltr" class="FM_CodeReference">ASSize_t</p>
</td>
   <td class="td37">
   <p dir="ltr" class="FM_TableBody">4</p>
</td>
   <td class="td38">
   <p dir="ltr" class="FM_TableBody">size of objects (as in size_t)</p>
</td>
</tr>
  </table>
    </div>
  <p dir="ltr" class="FM_4Head_NoTOC"><a name="IX_simple_data_type"></a>Simple types</p>
  <p dir="ltr" class="FM_Body">Simple types represent abstractions such as a rectangle or matrix. These objects have fields that do not change. The following are examples of simple data types:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span><span class="FM_Courier">ASFixedRect</span>&#160;</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span><span class="FM_Courier">ASFixedMatrix</span>&#160;</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span><span class="FM_Courier">AVRect32</span>&#160;</p>
  <p dir="ltr" class="FM_4Head_NoTOC"><a name="IX_complex_data_type"></a>Complex types</p>
  <p dir="ltr" class="FM_Body">Complex types are structures that contain one or more fields. They are used in the following situations:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>To transfer a large number of parameters to or from a method. For example, the <span class="FM_Courier">PDFontGetMetrics</span>&#160;method returns font metrics by filling out a complex structure (<span class="FM_Courier">PDFontMetrics</span>).</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">•<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>To define a data handler or server. For example, your plug-in must provide a complex structure populated with callback methods (<span class="FM_Courier">AVAnnotHandlerRec</span>) when it registers an annotation handler.</p>
  <p dir="ltr" class="FM_4Head_NoTOC"><a name="IX_opaque_data_type"></a>Opaque types</p>
  <p dir="ltr" class="FM_Body">Many methods hide the concrete C-language representation of data structures. Most methods accept an object and then perform an action on the object. Examples of opaque objects are <span class="FM_Courier">PDDoc</span>&#160;and <span class="FM_Courier">AVPageView</span> objects.</p>
  <p dir="ltr" class="FM_4Head_NoTOC">Cos types</p>
  <p dir="ltr" class="FM_Body">A Cos object refers to its corresponding Cos object in the PDF document. Cos objects are represented as opaque 8-byte structures. They have subtypes of boolean, integer, real, name, string, array, dict, and stream. (See <a href="../Working_with_Cos_Objects/Working_with_Cos_Objects.htm#XREF_86959_Working_with_COS"><span class="FM_HyperText">Working with Cos Objects</span></a>.)</p>
  </div>
<!-- Body place holder ends here-->

    <!-- Footer place holder starts here-->
    <div style="padding:0.4em 0;text-align:center;width:100%;position:relative;">
    	<hr/>
		<p style="font-size:0.7em;margin:0; font-family:adobe-clean, sans-serif"><a target="_blank" href="http://help.adobe.com/en_US/legalnotices/index.html">Legal Notices</a> | <a target="_blank" href="http://www.adobe.com/privacy.html">Online Privacy Policy</a></p>
	</div>
	<!-- Footer place holder ends here-->

</body>
</html>