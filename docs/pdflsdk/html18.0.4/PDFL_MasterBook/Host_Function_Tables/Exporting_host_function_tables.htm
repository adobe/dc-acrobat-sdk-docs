<!DOCTYPE HTML>
<html>
<head><meta http-equiv="refresh" content="2;url=https://opensource.adobe.com/dc-acrobat-sdk-docs/pdflsdk/" /><meta name="robots" content="noindex, nofollow">

 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
 <title>Exporting host function tables</title>

 

 <link rel="stylesheet" href="Host_Function_Tables.css" />
 <link rel="stylesheet" href="../../HTMLStyling.css" />


 <script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>
 <meta name="generator" content="Adobe FrameMaker 2017" />
<script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
<script type="text/javascript" src="../../template/scripts/common.min.js"></script>
<script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
<script type="text/javascript" src="../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = "../..";
gCommonRootRelPath = "../..";
gTopicId = "3.13.1";
</script>
 <meta name="brsprev" value="PDFL_MasterBook/Host_Function_Tables/About_host_function_tables.htm">
 <meta name="brsnext" value="PDFL_MasterBook/Host_Function_Tables/Importing_an_existing_HFT.htm">
 <meta name="topic-breadcrumbs" content="Developing Plug-ins and Applications > Working with Host Function Tables" />
</head>

<body dir="ltr">
<script type="text/javascript" src="../../ehlpdhtm.js"></script>

   
	<!-- Body place holder starts here-->
    <div dir="ltr">
  <p dir="ltr" class="FM_3Head"><a name="IX_host_function_tables"></a><a name="XREF_31298_Exporting_host"></a>Exporting host function tables</p>
  <p dir="ltr" class="FM_Body">You can use the <span data-name="AcrobatProd" data-val="Acrobat" data-showval="TRUE" data-format="AcrobatProd">Acrobat</span>&#160;core API to export HFTs that result in a plug-inâ€™s methods being available to other plug-ins. To export an HFT, perform the following tasks:</p>
  <p dir="ltr" class="FM_StepReset"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>1.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Create the HFT methods that you want to make available to other plug-ins. </p>
  <p dir="ltr" class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>2.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Create HFT method definitions.</p>
  <p dir="ltr" class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>3.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Create HFT callback functions.</p>
  <p dir="ltr" class="FM_Step"><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>4.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Create new HFTs.</p>
  <p dir="ltr" class="FM_Note"><span class="FM_Z_NoteCaution">Note:<span style="padding-left: 4pt;" class="FMAutoNumber_1"></span></span>The remaining parts of this section examine each task in detail. </p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Creating_HFT_methods"></a>Creating HFT methods</p>
  <p dir="ltr" class="FM_Body">The first step in exporting HFTs is to create the methods that will be exported and made available to other plug-ins. For the purpose of this discussion, assume that the following three methods exist.</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ACCB1 void ACCB2 BeepOnceImplementation()</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>{</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>AVSysBeep (0);</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>AVAlertNote (&quot;In the BeepOnce method.&quot;);</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ACCB1 void ACCB2 BeepTwiceImplementation()</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>{</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>AVSysBeep (0);</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>AVSysBeep (0);</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>AVAlertNote (&quot;In the BeepTwice method.&quot;);</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ACCB1 void ACCB2 BeepNTimesImplementation(ASInt32 numtimes)</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>{</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ASInt32 i;</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>for (i=0; i &lt; numtimes; i++)</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>AVSysBeep (0);</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>AVAlertNote (&quot;In the BeepNTimes method.&quot;);</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Creating_HFT_method"></a><a name="XREF_49266_Defining_HFT"></a>Creating HFT method definitions</p>
  <p dir="ltr" class="FM_Body">When you invoke a method in an HFT, the methods are accessed through a function pointer. Part of the process of defining a function pointer through which HFT methods are accessed is to create an enumeration that specifies the index of each method that you want to include within an HFT. The following enumeration enables indexing into the HFT. Note that the first element is not used.</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>enum</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>{</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>DUMMYBLANKSELECTOR, /* 0 */</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>BeepOnceSEL, <span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>/* 1 */</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>BeepTwiceSEL, /* 2 */</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>BeepNTimesSEL, /* 3 */</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>NUMSELECTORSPlusOne /* 4 */</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>};</p>
  <p dir="ltr" class="FM_Body">The indexes are called selectors, hence the <span class="FM_Courier">SEL</span>&#160;at the end of the method names. <span class="FM_Courier">BeepOnce</span>&#160;is at index 1; <span class="FM_Courier">BeepTwice</span>, at index 2; and <span class="FM_Courier">BeepNTimes</span>, at index 3. You can specify the number of indexes in the HFT by defining the following statement:</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>#define NUMSELECTORS (NUMSELECTORSPlusOne - 1);</p>
  <p dir="ltr" class="FM_Body">Also declare a global <span class="FM_Courier">HFT</span> object that is used in various tasks:</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>extern HFT gMyHFT</p>
  <p dir="ltr" class="FM_Body">For example, to define an HFT method name, you must specify an HFT object. (See <a href="#XREF_60887_Define_a_HFT"><span class="FM_HyperText">Defining an HFT method name</span></a>.)</p>
  <p dir="ltr" class="FM_5Head">Defining function prototypes</p>
  <p dir="ltr" class="FM_Body">After you define an enumeration and an HFT object, you can define a function pointer for each method by using the following syntax:</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>typdef ACCBPROTO1 return_type (ACCBPROTO2 <span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>*function_nameSELPROTO)(parameters);</p>
  <p dir="ltr" class="FM_Body">The following table describes this syntax.</p>
    <div width="100%" align="left">
  <table border-spacing="0" dir="ltr" class="table121" border-collapse="collapse" style="max-width: 100% ;height: auto">
   <tr class="tr1">
   <td class="td122">
   <p dir="ltr" class="FM_CodeReference">return_type</p>
</td>
   <td class="td123">
   <p dir="ltr" class="FM_TableBody">The return type of the HFT method</p>
</td>
</tr>
   <tr class="tr1">
   <td class="td124">
   <p dir="ltr" class="FM_CodeReference">function_name</p>
</td>
   <td class="td125">
   <p dir="ltr" class="FM_TableBody">The name of the HFT method</p>
</td>
</tr>
   <tr class="tr1">
   <td class="td126">
   <p dir="ltr" class="FM_CodeReference">parameters</p>
</td>
   <td class="td127">
   <p dir="ltr" class="FM_TableBody">The HFT methodâ€™s parameters with their types </p>
</td>
</tr>
  </table>
    </div>
  <p dir="ltr" class="FM_Body">For example, to define a function pointer to the <span class="FM_Courier">BeepNTimes</span> method, specify the following syntax:</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>typedef ACCBPROTO1 void (ACCBPROTO2 *BeepNTimesSELPROTO)(ASInt32 numtimes);</p>
  <p dir="ltr" class="FM_Body"><span class="FM_Courier">ACCBPROTO1</span>&#160;and <span class="FM_Courier">ACCBPROTO2</span>&#160;are macros whose definitions are platform-specific (for example, in Mac OS, <span class="FM_Courier">ACCBPROTO1</span>&#160;is defined as <span class="FM_Courier">pascal</span>). <span class="FM_Courier">BeepNTimesSELPROTO</span>&#160;specifies a pointer to the <span class="FM_Courier">BeepNTimes</span>&#160;method. Without using these macros, you would have to use the following syntax:</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>typedef void (*func)(ASInt32 numtimes);</p>
  <p dir="ltr" class="FM_5Head"><a name="XREF_60887_Define_a_HFT"></a>Defining an HFT method name </p>
  <p dir="ltr" class="FM_Body">You must specify a name for each method that is used to invoke the HFT method from other plug-ins. You can define an HFT method name by using the following syntax:</p>
  <p dir="ltr" class="FM_CodeReference"><span class="FM_Courier"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>#define method_name (*((method_nameSELPROTO)(HFTname [method_nameSEL])))</span></p>
  <p dir="ltr" class="FM_Body">The following table describes this syntax.</p>
    <div width="100%" align="left">
  <table border-spacing="0" dir="ltr" class="table121" border-collapse="collapse" style="max-width: 100% ;height: auto">
   <tr class="tr4">
   <td class="td122">
   <p dir="ltr" class="FM_CodeReference">method_name</p>
</td>
   <td class="td123">
   <p dir="ltr" class="FM_TableBody">The name of the HFT method that is used to invoke the method from external plug-ins</p>
</td>
</tr>
   <tr class="tr1">
   <td class="td126">
   <p dir="ltr" class="FM_CodeReference">HFTname</p>
</td>
   <td class="td127">
   <p dir="ltr" class="FM_TableBody">The name of the HFT object</p>
</td>
</tr>
  </table>
    </div>
  <p dir="ltr" class="FM_Body">For example, to define a method name for the <span class="FM_Courier">BeepNTimesImplementation</span>&#160;method, specify the following:</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>#define BeepNTimes (*((BeepNTimesSELPROTO)(gMyHFT[BeepNTimesSEL])))</p>
  <p dir="ltr" class="FM_Body">This macro defines the symbol <span class="FM_Courier">BeepNTimes</span>, which is the HFT method name.<span class="FM_Courier">&#160;gMyHFT[BeepNTimesSEL]</span>&#160;is the function pointer obtained by indexing the HFT and <span class="FM_Courier">BeepNTimesSELPROTO</span>&#160;casts the pointer to the right type. The end result is that the method can be invoked by specifying the HFT method name:</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>BeepNTimes(3);</p>
  <p dir="ltr" class="FM_Body">HFT method names and the implementation method names must be different to avoid conflict between the <span class="FM_Courier">#define</span> statement and the corresponding method name.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Creating_HFT_callback"></a><a name="XREF_88064_Creating_HTF"></a>Creating HFT callback functions</p>
  <p dir="ltr" class="FM_Body">You must create an HFT callback function in order to successfully export an HFT. It is recommended that you place the application logic to create an HFT callback in the <span class="FM_Courier">PluginExportHFTs</span>&#160;method. This is a handshaking method that enables your plug-in to export an HFT. For information about handshaking, see <a href="../Understanding_Plug-ins/About_plug-in_initialization.htm#XREF_89824_Handshaking_and"><span class="FM_HyperText">Handshaking</span></a>.</p>
  <p dir="ltr" class="FM_Body">To create an HFT callback function, declare an HFT <span class="FM_Courier">ServerProvideHFTProc</span>&#160;object that represents the callback:</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>HFTServerProvideHFTProc provideMyHFTCallback</p>
  <p dir="ltr" class="FM_Body"><span class="FM_Courier">HFTServerProvideHFTProc</span>&#160;is a callback for an HFT server. After you create an <span class="FM_Courier">HFTServerProvideHFTProc</span>&#160;object, you can invoke the <span class="FM_Courier">ASCallbackCreateProto</span>&#160;macro to convert a user-defined function to an HFT callback function. For example, you can invoke <span class="FM_Courier">ASCallbackCreateProto</span>&#160;to convert a user-defined function named <span class="FM_Courier">ProvideMyHFT</span>&#160;to a callback function.</p>
  <p dir="ltr" class="FM_Body">The <span class="FM_Courier">ASCallbackCreateProto</span> macro requires the following arguments:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">â€¢<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>The callback type. In this situation, specify <span class="FM_Courier">HFTServerProvideHFTProc</span>.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">â€¢<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>The address of the user-defined function that you want to convert to a callback function. </p>
  <p dir="ltr" class="FM_Body">The <span class="FM_Courier">ASCallbackCreateProto</span>&#160;macro returns a callback of the specified type that invokes the user-defined function whose address was passed as the second argument. The following lines of code show the <span class="FM_Courier">ASCallbackCreateProto</span>&#160;macro converting the <span class="FM_Courier">ProvideMyHFT</span>&#160;user-defined function to a <span class="FM_Courier">PDWordProc</span> callback.</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>HFTServerProvideHFTProc provideMyHFTCallback =</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ASCallbackCreateProto(HFTServerProvideHFTProc, &amp;ProvideMyHFT);</p>
  <p dir="ltr" class="FM_Body"><a name="IX_HFTServerNew"></a><a name="IX_HFTServerNew_method"></a>The callback function is invoked when another plug-in attempts to use the HFT. After you create an HFT callback function, you can invoke the <span class="FM_Courier">HFTServerNew</span>&#160;method to obtain an HFT <span class="FM_Courier">Server</span>&#160;object, which is responsible for handling requests to obtain or destroy its HFT. An <span class="FM_Courier">HFTServe</span>r object is required in order to create a new <span class="FM_Courier">HFT</span> object.</p>
  <p dir="ltr" class="FM_Body">The <span class="FM_Courier">HFTServerNew</span> method requires the following arguments:</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">â€¢<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>A character pointer that specifies the name of the HFT server. An HFT server name is used to import the HFT. (See <a href="Importing_an_existing_HFT.htm#XREF_72145_Importing_an"><span class="FM_HyperText">Importing an existing HFT</span></a>.)</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">â€¢<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>An <span class="FM_Courier">HFTServerProvideHFTProc</span> object that specifies the HFT callback function.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">â€¢<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>An <span class="FM_Courier">HFTServerDestroyProc</span>&#160;object that specifies the HFT callback function that releases memory from the HFT. This argument is optional and you can specify <span class="FM_Courier">NULL</span>.</p>
  <p dir="ltr" class="FM_Bullet1"><span class="FM_Z_Bullet">â€¢<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>A pointer to user-supplied data to pass to the HFT server. This argument is optional and you can specify <span class="FM_Courier">NULL</span>.</p>
  <p dir="ltr" class="FM_Body">The following code example creates an HFT callback function within the <span class="FM_Courier">PluginExportHFTs</span>&#160;method. After the <span class="FM_Courier">HFTServerProvideHFTProc</span>&#160;object is created, the <span class="FM_Courier">HFTServerNew</span>&#160;method is invoked which creates an <span class="FM_Courier">HFTServer</span>&#160;object. </p>
  <p dir="ltr" class="FM_5Head_Example"><span class="FM_Z_Example">Example:&nbsp;</span>Creating an HFT callback function</p>
  <p dir="ltr" class="FM_CodeReference">ACCB1 ASBool ACCB2 PluginExportHFTs(void)</p>
  <p dir="ltr" class="FM_CodeReference">{</p>
  <p dir="ltr" class="FM_CodeReference">gMyHFT = NULL;</p>
  <p dir="ltr" class="FM_CodeReference">gMyHFTServer = NULL;</p>
  <p dir="ltr" class="FM_CodeReference">DURING</p>
  <p dir="ltr" class="FM_CodeComment"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>//Create an HFT callback function</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>provideMyHFTCallback = ASCallbackCreateProto(HFTServerProvideHFTProc,</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>&amp;ProvideMyHFT);</p>
  <p dir="ltr" class="FM_CodeReference">&nbsp;</p>
  <p dir="ltr" class="FM_CodeComment"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>//Create an HFT server</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>gMyHFTServer = HFTServerNew(&quot;MyHFT&quot;, provideMyHFTCallback,</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>NULL, NULL);</p>
  <p dir="ltr" class="FM_CodeReference">HANDLER</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>gSomethingWentWrong=1; </p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>return false;</p>
  <p dir="ltr" class="FM_CodeReference">END_HANDLER</p>
  <p dir="ltr" class="FM_CodeReference">return true;</p>
  <p dir="ltr" class="FM_CodeReference">}</p>
  <p dir="ltr" class="FM_Note"><span class="FM_Z_NoteCaution">Note:<span style="padding-left: 4pt;" class="FMAutoNumber_1"></span></span>In the previous code example, the <span class="FM_Courier">gMyHFT</span>, <span class="FM_Courier">gMyHFTServer</span>, and <span class="FM_Courier">gSomethingWentWrong</span>&#160;variables are declared as global variables. To view the complete code example, including the location of where these global variables are declared, see <a href="#XREF_55636_Examining_HFT"><span class="FM_HyperText">Examining HFT header and source files</span></a>.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Creating_new_Host"></a><a name="IX_host_functions_tables"></a>Creating new Host Function Tables</p>
  <p dir="ltr" class="FM_Body">You can create a new HFT by performing the following tasks within the HFT callback function that you define:</p>
  <p dir="ltr" class="FM_StepReset"><a name="IX_HFTNew"></a><a name="IX_HFTNew_method"></a><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>1.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Cre<span style="font-style : italic; "></span>ate an <span class="FM_Courier">HFT</span>&#160;object by invoking the <span class="FM_Courier">HFTNew</span>&#160;method. This method requires an <span class="FM_Courier">HFTServer</span>&#160;object and the number of entries in the new HFT as arguments. The number of entries determines how many methods that the HFT contains. Each method occupies one entry.</p>
  <p dir="ltr" class="FM_Step"><a name="IX_HFTReplaceEntry"></a><a name="IX_HFTReplaceEntry_method"></a><span style="padding-left: 66pt;" class="FMAutoNumber_1"></span>2.<span style="padding-left: 2pt;" class="FMAutoNumber_2"></span>Invoke the <span class="FM_Courier">HFTReplaceEntry</span>&#160;method to populate the entries in the <span class="FM_Courier">HFT</span>&#160;object with pointers to the HFT methods. This method requires the following arguments:</p>
  <p dir="ltr" class="FM_Bullet2"><span class="FM_Z_Bullet">â€¢<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>An HFT object that you want to populate.</p>
  <p dir="ltr" class="FM_Bullet2"><span class="FM_Z_Bullet">â€¢<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>The entry in the <span class="FM_Courier">HFT</span>&#160;object to replace. You can specify an index value that is specified in the enumeration that you created. For example, you can specify <span class="FM_Courier">BeepTwiceSEL</span>. (See <a href="#XREF_49266_Defining_HFT"><span class="FM_HyperText">Creating HFT method definitions</span></a>.)</p>
  <p dir="ltr" class="FM_Bullet2"><span class="FM_Z_Bullet">â€¢<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>An <span class="FM_Courier">HFTEntry</span>&#160;object that represents a method that will become available through the HFT. You can, for example, reference the <span class="FM_Courier">BeepTwiceImplementation</span>&#160;method by passing the <span class="FM_Courier">ASCallbackCreateReplacement</span> method, as shown in the following example:</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ASCallbackCreateReplacement(BeepTwiceSEL,&amp;BeepTwiceImplementation)</p>
  <p dir="ltr" class="FM_Bullet2"><span class="FM_Z_Bullet">â€¢<span style="padding-left: 12pt;" class="FMAutoNumber_1"></span></span>The new entry's properties. Currently, only <span class="FM_Courier">HFTEntryReplaceable</span> is defined.</p>
  <p dir="ltr" class="FM_Body">You must invoke the <span class="FM_Courier">HFTReplaceEntry</span>&#160;method for each method that you expose through the HFT. For example, if you expose three methods through the HFT, then you invoke the <span class="FM_Courier">HFTReplaceEntry</span>&#160;method three times.</p>
  <p dir="ltr" class="FM_Body">The following code example shows the syntax of the <span class="FM_Courier">ProvideMyHFT</span>&#160;method, which is the HFT callback function defined in the previous section. Within this method, a new HFT is created. For information about HFT callback methods, see <a href="#XREF_88064_Creating_HTF"><span class="FM_HyperText">Creating HFT callback functions</span></a>.</p>
  <p dir="ltr" class="FM_5Head_Example"><span class="FM_Z_Example">Example:&nbsp;</span>Creating new Host Table Functions</p>
  <p dir="ltr" class="FM_CodeReference">ACCB1 HFT ACCB2 ProvideMyHFT(HFTServer server, ASUns32 version,void *rock)</p>
  <p dir="ltr" class="FM_CodeReference">{</p>
  <p dir="ltr" class="FM_CodeComment"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>//Ensure version is 1</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>if (version != 1)</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>return NULL;</p>
  <p dir="ltr" class="FM_CodeReference">&nbsp;</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>DURING</p>
  <p dir="ltr" class="FM_CodeReference">&nbsp;</p>
  <p dir="ltr" class="FM_CodeComment"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>//Create a new HFT</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>gMyHFT = HFTNew(gMyHFTServer, NUMSELECTORS);</p>
  <p dir="ltr" class="FM_CodeReference">&nbsp;</p>
  <p dir="ltr" class="FM_CodeComment"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>/*</p>
  <p dir="ltr" class="FM_CodeComment"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>** Replace the entries in the HFT</p>
  <p dir="ltr" class="FM_CodeComment"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>** with the methods that you want to make available.</p>
  <p dir="ltr" class="FM_CodeComment"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>*/</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>HFTReplaceEntry (gMyHFT,<br />BeepOnceSEL,ASCallbackCreateReplacement(BeepOnceSEL,&amp;BeepOnce<br />Implementation), 0);</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>HFTReplaceEntry (gMyHFT,<br />BeepTwiceSEL,ASCallbackCreateReplacement(BeepTwiceSEL,&amp;BeepTwice<br />Implementation), 0);</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>HFTReplaceEntry (gMyHFT,<br />BeepNTimesSEL,ASCallbackCreateReplacement(BeepNTimesSEL,&amp;BeepNTimes<br />Implementation), 0);</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>HANDLER</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>return NULL;</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>END_HANDLER</p>
  <p dir="ltr" class="FM_CodeReference">return gMyHFT;</p>
  <p dir="ltr" class="FM_CodeReference">}</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Examining_HFT_header_and"></a><a name="XREF_55636_Examining_HFT"></a>Examining HFT header and source files</p>
  <p dir="ltr" class="FM_Body">To make it clear how to create HFTs, this section shows a typical header and source file that is used to create an HFT. All concepts that are discussed up to this point are shown.</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Examining_an_HFT_header"></a>Examining an HFT header file</p>
  <p dir="ltr" class="FM_Body">The following code example shows the syntax of a header file named myhft.h that is used to define HFT constructs. </p>
  <p dir="ltr" class="FM_5Head_Example"><span class="FM_Z_Example">Example:&nbsp;</span>Examining an HFT header file</p>
  <p dir="ltr" class="FM_CodeReference">#include &quot;corcalls.h&quot;</p>
  <p dir="ltr" class="FM_CodeReference">#include &quot;avcalls.h&quot;</p>
  <p dir="ltr" class="FM_CodeReference">#include &quot;coscalls.h&quot;</p>
  <p dir="ltr" class="FM_CodeReference">#include &quot;pdcalls.h&quot;</p>
  <p dir="ltr" class="FM_CodeReference">#include &quot;ascalls.h&quot;</p>
  <p dir="ltr" class="FM_CodeReference">&nbsp;</p>
  <p dir="ltr" class="FM_CodeReference">enum</p>
  <p dir="ltr" class="FM_CodeReference">{</p>
  <p dir="ltr" class="FM_CodeReference">DUMMYBLANKSELECTOR,</p>
  <p dir="ltr" class="FM_CodeReference">BeepOnceSEL,</p>
  <p dir="ltr" class="FM_CodeReference">BeepTwiceSEL,</p>
  <p dir="ltr" class="FM_CodeReference">BeepNTimesSEL,</p>
  <p dir="ltr" class="FM_CodeReference">NUMSELECTORSPlusOne</p>
  <p dir="ltr" class="FM_CodeReference">};</p>
  <p dir="ltr" class="FM_CodeReference">extern HFT gMyHFT;</p>
  <p dir="ltr" class="FM_CodeReference">&nbsp;</p>
  <p dir="ltr" class="FM_CodeReference">#define NUMSELECTORS (NUMSELECTORSPlusOne - 1)</p>
  <p dir="ltr" class="FM_CodeReference">&nbsp;</p>
  <p dir="ltr" class="FM_CodeReference">typedef ACCBPROTO1 void (ACCBPROTO2 *BeepOnceSELPROTO)(void);</p>
  <p dir="ltr" class="FM_CodeReference">&nbsp;</p>
  <p dir="ltr" class="FM_CodeReference">#define BeepOnce (*((BeepOnceSELPROTO)(gMyHFT[BeepOnceSEL])))</p>
  <p dir="ltr" class="FM_CodeReference">&nbsp;</p>
  <p dir="ltr" class="FM_CodeReference">typedef ACCBPROTO1 void (ACCBPROTO2 *BeepTwiceSELPROTO)(void);</p>
  <p dir="ltr" class="FM_CodeReference">&nbsp;</p>
  <p dir="ltr" class="FM_CodeReference">#define BeepTwice (*((BeepTwiceSELPROTO)(gMyHFT[BeepTwiceSEL])))</p>
  <p dir="ltr" class="FM_CodeReference">&nbsp;</p>
  <p dir="ltr" class="FM_CodeReference">typedef ACCBPROTO1 void (ACCBPROTO2 *BeepNTimesSELPROTO)(ASInt32 numtimes);</p>
  <p dir="ltr" class="FM_CodeReference">&nbsp;</p>
  <p dir="ltr" class="FM_CodeReference">#define BeepNTimes (*((BeepNTimesSELPROTO)(gMyHFT[BeepNTimesSEL])))</p>
  <p dir="ltr" class="FM_CodeReference">/* End of MyHFT.h */</p>
  <p dir="ltr" class="FM_4Head"><a name="TOC_Examining_an_HFT_source"></a>Examining an HFT source file</p>
  <p dir="ltr" class="FM_Body">The following code example shows the syntax of a source file used to create an HFT. Notice that the methods (<span class="FM_Courier">BeepOnceImplementation</span>, <span class="FM_Courier">BeepTwiceImplementation</span>, and <span class="FM_Courier">BeepNTimesImplementation</span>) that the HFT will make available to other plug-ins are defined. Also notice that the <span class="FM_Courier">PluginExportHFTs</span>&#160;method is defined. For information about this method, see <a href="../Understanding_Plug-ins/About_plug-in_initialization.htm#XREF_19533_8_3_3_Pre"><span class="FM_HyperText">Importing HFTs and registering for notifications</span></a>.</p>
  <p dir="ltr" class="FM_5Head_Example"><span class="FM_Z_Example">Example:&nbsp;</span>Examining an HFT source file</p>
  <p dir="ltr" class="FM_CodeReference">#include &quot;corcalls.h&quot;</p>
  <p dir="ltr" class="FM_CodeReference">#include &quot;avcalls.h&quot;</p>
  <p dir="ltr" class="FM_CodeReference">#include &quot;coscalls.h&quot;</p>
  <p dir="ltr" class="FM_CodeReference">#include &quot;pdcalls.h&quot;</p>
  <p dir="ltr" class="FM_CodeReference">#include &quot;ascalls.h&quot;</p>
  <p dir="ltr" class="FM_CodeReference">#include &quot;myhft.h&quot;</p>
  <p dir="ltr" class="FM_CodeReference">&nbsp;</p>
  <p dir="ltr" class="FM_CodeComment">//Declare global variables</p>
  <p dir="ltr" class="FM_CodeReference">HFTServer gMyHFTServer = NULL;</p>
  <p dir="ltr" class="FM_CodeReference">HFT gMyHFT = NULL;</p>
  <p dir="ltr" class="FM_CodeComment">/*</p>
  <p dir="ltr" class="FM_CodeComment">** The implementation for the BeepOnce() function. Note it</p>
  <p dir="ltr" class="FM_CodeComment">** has a different name than the #define for the function</p>
  <p dir="ltr" class="FM_CodeComment">** in MyHFT.h</p>
  <p dir="ltr" class="FM_CodeComment">*/</p>
  <p dir="ltr" class="FM_CodeReference"><span class="FM_Bold">ACCB1 void ACCB2 BeepOnceImplementation ()</span>&#160;</p>
  <p dir="ltr" class="FM_CodeReference">{</p>
  <p dir="ltr" class="FM_CodeReference">AVSysBeep (0);</p>
  <p dir="ltr" class="FM_CodeReference">AVAlertNote (&quot;In BeepOnceImplementation function.&quot;);</p>
  <p dir="ltr" class="FM_CodeReference">}</p>
  <p dir="ltr" class="FM_CodeComment">/* The implementation for the BeepTwice() function. Note it has a</p>
  <p dir="ltr" class="FM_CodeComment">** different name than the #define for the function in MyHFT.h</p>
  <p dir="ltr" class="FM_CodeComment">*/</p>
  <p dir="ltr" class="FM_CodeReference"><span class="FM_Bold">ACCB1 void ACCB2 BeepTwiceImplementation()</span>&#160;</p>
  <p dir="ltr" class="FM_CodeReference">{</p>
  <p dir="ltr" class="FM_CodeReference">AVSysBeep (0);</p>
  <p dir="ltr" class="FM_CodeReference">AVSysBeep (0);</p>
  <p dir="ltr" class="FM_CodeReference">AVAlertNote (&quot;In BeepTwiceImplementation function.&quot;);</p>
  <p dir="ltr" class="FM_CodeReference">}</p>
  <p dir="ltr" class="FM_CodeComment">/* The implementation for the BeepNTimes() function. Note it has a</p>
  <p dir="ltr" class="FM_CodeComment">** different name than the #define for the function in MyHFT.h</p>
  <p dir="ltr" class="FM_CodeComment">*/</p>
  <p dir="ltr" class="FM_CodeReference"><span class="FM_Bold">ACCB1 void ACCB2 BeepNTimesImplementation (ASInt32 numtimes)</span>&#160;</p>
  <p dir="ltr" class="FM_CodeReference">{</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ASInt32 i;</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>for (i=0; i &lt; numtimes; i++)</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>AVSysBeep (0);</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>AVAlertNote (&quot;In BeepNTimesImplementation function.&quot;);</p>
  <p dir="ltr" class="FM_CodeReference">}</p>
  <p dir="ltr" class="FM_CodeComment">/*</p>
  <p dir="ltr" class="FM_CodeComment">** Create a new HFT of NUMSELECTORS entries</p>
  <p dir="ltr" class="FM_CodeComment">** Then put the methods into the table via HFTReplaceEntry</p>
  <p dir="ltr" class="FM_CodeComment">*/</p>
  <p dir="ltr" class="FM_CodeReference"><span class="FM_Bold">ACCB1 HFT ACCB2 ProvideMyHFT(HFTServer server, ASUns32 version,void *rock)</span>&#160;</p>
  <p dir="ltr" class="FM_CodeReference">{</p>
  <p dir="ltr" class="FM_CodeReference">ACCB1 HFT ACCB2 ProvideMyHFT(HFTServer server, ASUns32 version,void *rock)</p>
  <p dir="ltr" class="FM_CodeReference">{</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>//Ensure version is 1</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>if (version != 1)</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>return NULL;</p>
  <p dir="ltr" class="FM_CodeReference">&nbsp;</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>DURING</p>
  <p dir="ltr" class="FM_CodeReference">&nbsp;</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>//Create a new HFT</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>gMyHFT = HFTNew(gMyHFTServer, NUMSELECTORS);</p>
  <p dir="ltr" class="FM_CodeReference">&nbsp;</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>/*</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>** Replace the entries in the HFT</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>** with the methods that you want to make available.</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>*/</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>HFTReplaceEntry (gMyHFT,<br />BeepOnceSEL,ASCallbackCreateReplacement(BeepOnceSEL,&amp;BeepOnce<br />Implementation), 0);</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>HFTReplaceEntry (gMyHFT,<br />BeepTwiceSEL,ASCallbackCreateReplacement(BeepTwiceSEL,&amp;BeepTwice<br />Implementation), 0);</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>HFTReplaceEntry (gMyHFT,<br />BeepNTimesSEL,ASCallbackCreateReplacement(BeepNTimesSEL,&amp;BeepNTimes<br />Implementation), 0);</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>HANDLER</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>return NULL;</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>END_HANDLER</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>return gMyHFT;</p>
  <p dir="ltr" class="FM_CodeReference">}</p>
  <p dir="ltr" class="FM_CodeComment">/*</p>
  <p dir="ltr" class="FM_CodeComment">** Called by viewer to set up for exporting an HFT. This method</p>
  <p dir="ltr" class="FM_CodeComment">** creates a new HFT server and provides a callback that</p>
  <p dir="ltr" class="FM_CodeComment">** provides the HFT.</p>
  <p dir="ltr" class="FM_CodeComment">*/</p>
  <p dir="ltr" class="FM_CodeReference"><span class="FM_Bold">ACCB1 ASBool ACCB2 PluginExportHFTs(void)</span>&#160;</p>
  <p dir="ltr" class="FM_CodeReference">{</p>
  <p dir="ltr" class="FM_CodeReference">gMyHFTServer = NULL;</p>
  <p dir="ltr" class="FM_CodeReference">DURING</p>
  <p dir="ltr" class="FM_CodeReference">&nbsp;</p>
  <p dir="ltr" class="FM_CodeComment"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>//Create an HFT callback function</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>HFTServerProvideHFTProc provideMyHFTCallback =</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ASCallbackCreateProto(HFTServerProvideHFTProc, &amp;ProvideMyHFT);</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></p>
  <p dir="ltr" class="FM_CodeComment"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>//Create an HFT server</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>gMyHFTServer = HFTServerNew(&quot;MyHFT&quot;, provideMyHFTCallback,NULL, NULL);</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span></p>
  <p dir="ltr" class="FM_CodeReference">HANDLER</p>
  <p dir="ltr" class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>return false;</p>
  <p dir="ltr" class="FM_CodeReference">END_HANDLER</p>
  <p dir="ltr" class="FM_CodeReference">return true;</p>
  <p dir="ltr" class="FM_CodeReference">}</p>
  </div>
<!-- Body place holder ends here-->

    <!-- Footer place holder starts here-->
    <div style="padding:0.4em 0;text-align:center;width:100%;position:relative;">
    	<hr/>
		<p style="font-size:0.7em;margin:0; font-family:adobe-clean, sans-serif"><a target="_blank" href="http://help.adobe.com/en_US/legalnotices/index.html">Legal Notices</a> | <a target="_blank" href="http://www.adobe.com/privacy.html">Online Privacy Policy</a></p>
	</div>
	<!-- Footer place holder ends here-->

</body>
</html>