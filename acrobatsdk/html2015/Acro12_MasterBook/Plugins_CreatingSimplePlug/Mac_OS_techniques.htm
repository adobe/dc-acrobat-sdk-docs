<!DOCTYPE HTML>
<html>
<head>

 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
 <title>Mac OS techniques</title>

 <meta name="generator" content="Adobe FrameMaker 2015" />
 <meta name="Originator" content="ImportMif" />
 <meta name="OriginalFile" content="C:\Users\Perforce\Work\Groups\SDK\main\Documents\Common\docs_fm\PluginAppsDeveloperGuide\Plugins_CreatingSimplePlug.fm" />
 <link rel="stylesheet" href="Plugins_CreatingSimplePlug.css" type="text/css" />


<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>

<script type="text/javascript" src="../../template/scripts/rh.min.js"></script>
<script type="text/javascript" src="../../template/scripts/common.min.js"></script>
<script type="text/javascript" src="../../template/scripts/topic.min.js"></script>
<script type="text/javascript" src="../../template/scripts/constants.js"></script>
<script type="text/javascript" src="../../template/scripts/utils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhutils.js"></script>
<script type="text/javascript" src="../../template/scripts/mhlang.js"></script>
<script type="text/javascript" src="../../template/scripts/mhver.js"></script>
<script type="text/javascript" src="../../template/scripts/settings.js"></script>
<script type="text/javascript" src="../../template/scripts/XmlJsReader.js"></script>
<script type="text/javascript" src="../../template/scripts/loadparentdata.js"></script>
<script type="text/javascript" src="../../template/scripts/loadscreen.js"></script>
<script type="text/javascript" src="../../template/scripts/loadprojdata.js"></script>
<script type="text/javascript" src="../../template/scripts/mhtopic.js"></script>
 <link rel="stylesheet" type="text/css" href="../../template/styles/topic.min.css">
<script type="text/javascript" >
gRootRelPath = "../..";
gCommonRootRelPath = "../..";
gTopicId = "2.1.3.1.2";
</script>
 <meta name="brsprev" value="Acro12_MasterBook/Plugins_CreatingSimplePlug/Windows_techniques.htm">
 <meta name="brsnext" value="Acro12_MasterBook/Plugins_CreatingSimplePlug/Creating_a_sample_plug-in.htm">
 <meta name="topic-breadcrumbs" content="Plug-ins and Applications > Overview > Creating Plug-in and PDF Library Applications > Working with platform-specific techniques" />
</head>

<body dir="ltr">
<script type="text/javascript" src="../../ehlpdhtm.js"></script>
<div dir="ltr">
  <h3><a name="XREF_58130_Macintosh"></a>Mac OS techniques </h3>
  <p class="BodyLevel1">This section contains information necessary to implement plug-ins for Mac OS X. If you are upgrading your plug-in, see <a href="Upgrading_plug-in_projects_on_Mac_OS_Acrobat_7_to_Acrobat_8.htm#XREF_59825_Upgrading_Plug_ins">Upgrading plug-in projects on Mac OS (Acrobat 7 to Acrobat 8)</a>.</p>
  <h4><a name="TOC_Developing_a_Mac_OS_plug"></a>Developing a Mac OS plug-in</h4>
  <p class="BodyLevel1">For <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;9.0 and later, plug-ins must be built as Carbon or Cocoa bundles (not frameworks). Apple Xcode 2.4.1 is the currently-supported development environment for developing plug-ins. Apple developer tools contain the correct frameworks and libraries in addition to extensive documentation on making plug-ins (and applications) Mach-O and Carbon compliant. </p>
  <p class="FM_Note"><span class="FM_Z_NoteCaution">Note:<span style="padding-left: 4pt;" class="FMAutoNumber_1"></span></span><uservariable x-value="Acrobat&nbsp;DC&nbsp;SDK" x-showvalue="TRUE" name="AcrobatSDKProd" x-format="AcrobatSDKProd">Acrobat&nbsp;DC&nbsp;SDK</uservariable> samples are built against the MacOSX10.6.sdk as universal binaries.</p>
  <h5>Using the samples</h5>
  <p class="BodyLevel1">You are encouraged to use the Starter plug-in sample as a basis for developing your plug-ins. This sample contains the appropriate project settings as defined in the supplied Xcode project configuration files. The Starter sample does nothing other than build a loadable plug-in. In addition, other plug-ins that could be useful as a starting point for developing plug-ins are available.</p>
  <p class="BodyLevel1">The Info.plist file contains a list of properties used by the package. Adobe provides a common info.plist file. It uses project settings to define properties appropriately for each plug-in.</p>
  <h5><a name="IX_carbon_compliance"></a>Establishing Carbon or Cocoa compliance </h5>
  <p class="BodyLevel1">Carbon and Cocoa are application environments of the Mac OS X operating system. Each includes programming interfaces that include header files, a library, and a runtime. </p>
  <p class="BodyLevel1"><uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;9.0 uses property lists (Info.plists), which are stored with the executable files and resources that make up an application, known as an application bundle. For more information about converting existing Mac OS applications into Carbon , see <span class="FM_HyperText"><a href="http://developer.apple.com/documentation/Carbon/Conceptual/carbon_porting_guide/">http://developer.apple.com/documentation/Carbon/Conceptual/carbon_porting_guide/</a></span>.</p>
  <p class="FM_Note"><span class="FM_Z_NoteCaution">Note:<span style="padding-left: 4pt;" class="FMAutoNumber_1"></span></span>To prevent problems with older style event handling, plug-ins must replace calls to <span class="FM_Courier">WaitNextEvent</span>&#160;with calls to <span class="FM_Courier">RunCurrentEventQueue</span>&#160;or <span class="FM_Courier">ReceiveNextEvent</span>. </p>
  <h5><a name="IX_Xcode_configuration_files"></a>Xcode configuration files</h5>
  <p class="BodyLevel1">Mac OS plug-in sample build settings are defined in SDK and project-level configuration files and not within the projects themselves. Xcode configuration files include lists of build settings definitions that can be applied to multiple projects and/or multiple targets.</p>
  <p class="BodyLevel1">The configuration files and settings have a hierarchical structure modeled after Apple Developer documentation located at the following URL:</p>
  <p class="FM_Indent1"><span class="FM_HyperText"><a href="http://developer.apple.com/documentation/DeveloperTools/Conceptual/XcodeUserGuide/Contents/Resources/en.lproj/05_05_build_configs/chapter_33_section_6.html">http://developer.apple.com/documentation/DeveloperTools/Conceptual/XcodeUserGuide/Contents/Resources/en.lproj/05_05_build_configs/chapter_33_section_6.html</a></span>&#160;</p>
  <p class="BodyLevel1">Each project is based on a project-level build settings file(s) that includes SDK-level settings.</p>
  <p class="BodyLevel1">At the SDK level, there are separate configuration files for SDK plug-in settings (Default.xcconfig), environmental variables (Environment.xcconfig) and resource settings (Resources.xcconfig). Global target settings for _debug and _release targets are stored in Debug.xcconfig and Release.xcconfig, respectively.</p>
  <p class="BodyLevel1">At the project level, there are four configuration files:</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1">ProjectDefault.xcconfig</p>
</li>
   <li>
   <p class="FM_Bullet1">ProjectResources.xcconfig</p>
</li>
   <li>
   <p class="FM_Bullet1">Project_debug.xcconfig</p>
</li>
   <li>
   <p class="FM_Bullet1">Project_release.xcconfig.</p>
</li>
  </ul>
  <p class="BodyLevel1">Each project level configuration file includes the settings from its related (parent) SDK configuration file (for example, ProjectDefault.xconfig includes Default.xcconfig and ProjectResources.xcconfig includes Resources.xcconfig). Generally, SDK-level setting definitions are not included directly, but rather are included through project-level configuration files.</p>
  <p class="BodyLevel1">Each SDK plug-in project includes a single (Default) configuration based on the ProjectDefault.xcconfig build settings which include the SDK-level Default.xcconfig build settings. Each project has two targets: a _debug target and a _release target. The targets’ build settings are based on Project_debug.xcconfig and Project_release.xconfig, respectively. Similar to the project configuration files, each target configuration settings include its parent SDK configuration file; for instance, Project_debug includes Debug.xcconfig settings.</p>
  <p class="BodyLevel1">Project-level configuration files whose names begins with Project are the default project settings included with most SDK plug-in samples. Project-level configuration files that are prefixed with a specific sample’s name include settings specific to that sample. The build settings for most SDK projects are extremely similar with most definitions residing in the SDK configuration files.</p>
  <h5>Using SetGWorld rather than SetPort</h5>
  <p class="BodyLevel1">With the move to carbonization and double buffering, you should use GetGWorld rather than the toolbox call SetPort. Using both calls in the same plug-in can cause the current port to get out of sync with the current device. Using only GetGWorld maintains the correct port and device settings.</p>
  <p class="BodyLevel1">In all cases, you should pass <span class="FM_Courier">GetMainDevice</span>&#160;unless you have a particular device in mind or you are restoring the GWorld to its original state. The following code is an example.</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>ACCB void ACCB2 foo(AVPageView pageView)</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>{</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>CGrafPtr oldGWorld, pagePort = NULL;</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>GDHandle oldDevice;</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>pagePort = (CGrafPtr)AVPageViewAcquireMachinePort(pageView);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>if (pagePort){</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>GetGWorld(&amp;oldGWorld, &amp;oldDevice);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>SetGWorld(pagePort, GetMainDevice());</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>//Draw to the port here</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>SetGWorld(oldGWorld, oldDevice);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>AVPageViewReleaseMachinePort(pageView, pagePort);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>}</p>
  <h4><a name="TOC_Locating_and_loading1"></a>Locating and loading plug-ins</h4>
  <p class="BodyLevel1">When <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>&#160;starts, it scans the plug-in folder to locate and load plug-ins with the acroplugin file extension. PowerPC plug-ins must have creator <span class="FM_Courier">CARO</span>&#160;(CFBundleSignature) and type <span class="FM_Courier">XTND</span>&#160;(CFBundlePackageType). Each plug-in exports a single main entry point, <span class="FM_Courier">AcroPluginMain</span>. When loading a plug-in, <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>&#160;jumps to the plug-in’s entry point to begin handshaking. (See <a href="../Plugins_Pimech/Handshaking.htm#XREF_89824_Handshaking_and">Handshaking </a>.)</p>
  <h4><a name="TOC_Using_memory"></a><a name="IX_memory_usage"></a>Using memory</h4>
  <p class="BodyLevel1">The <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>&#160;memory allocator gets its memory from the system and not from the application's memory partition. (See <a href="../Plugins_Pimech/Acquiring_and_releasing_objects.htm#XREF_68646_Acquiring_and">Acquiring and releasing objects</a>.)</p>
  <p class="BodyLevel1">Memory allocation guidelines are particularly important in Mac OS to ensure that memory is allocated from the system rather than from the application partition. Otherwise, your plug-in is very likely to cause <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable> to run out of memory.</p>
  <h4><a name="TOC_Resource_file"></a><a name="IX_resource_files"></a>Resource file considerations</h4>
  <p class="BodyLevel1"><uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>&#160;open a plug-in’s resource file with read-only permissions. In addition, plug-ins cannot assume that their resource file is on top of the resource chain each time they are entered by using an <span class="FM_Courier">ASCallback</span>. Plug-ins must explicitly move their resource file to the top of the resource chain before accessing resources in it. As a result, all code that directly or indirectly invokes <span class="FM_Courier">GetResource</span>&#160;must be modified. This can be accomplished either directly or by using the SafeResources routines in the <uservariable x-value="Acrobat&nbsp;DC&nbsp;SDK" x-showvalue="TRUE" name="AcrobatSDKProd" x-format="AcrobatSDKProd">Acrobat&nbsp;DC&nbsp;SDK</uservariable>.</p>
  <h5>Using SafeResources</h5>
  <p class="BodyLevel1">The recommended way to access resources in the plug-in file is to use the functions declared in the header file SafeResources.h in the SDK. These functions are direct replacements for each Toolbox function that directly or indirectly calls <span class="FM_Courier">GetResource</span>. The replacement functions automatically place the plug-in file on top of the resource chain before accessing the resource, and restore the old resource chain after accessing the resource.</p>
  <h5>Manipulating the resource chain directly</h5>
  <p class="BodyLevel1">If you choose to manipulate the resource chain directly, you must modify all code that directly or indirectly calls GetResource. The list of such Toolbox calls can be determined from SafeResources.h, by removing the prefix Safe from the names of the calls. Before calling each such Toolbox function, you must put the plug-in’s resource file on top of the resource chain, and after such calls, you must restore the old resource chain. For example:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>DialogPtr myDialog = GetNewDialog(23, NULL, (Ptr) -1);</p>
  <p class="BodyLevel1">must be rewritten as:</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>short oldResFile;</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>DialogPtr myDialog;</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>oldResFile = CurResFile();</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>UseResFile(gResFile);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>myDialog = GetNewDialog(23, NULL, (Ptr) -1);</p>
  <p class="FM_CodeReference"><span style="font-family:'Times New Roman'; font-size:7.0pt">&nbsp;&nbsp;&nbsp;</span>useResFile(oldResFile);</p>
  <p class="BodyLevel1">The global variable <span class="FM_Courier">gResFile</span> is automatically set up during handshaking and is declared in PICommon.h.</p>
  <h5>Macros</h5>
  <p class="BodyLevel1">The following macros must be defined:</p>
  <ul type="disc" style="Direction:Direction:ltr;
;
">
   <li>
   <p class="FM_Bullet1"><span class="FM_Courier">POWER_PC</span> must be defined</p>
</li>
   <li>
   <p class="FM_Bullet1"><span class="FM_Courier">PLATFORM</span> must be defined as MacPlatform.h</p>
</li>
   <li>
   <p class="FM_Bullet1"><span class="FM_Courier">PRODUCT</span> must be defined as Plugin.h</p>
</li>
  </ul>
  <p class="BodyLevel1">These macros are automatically defined correctly for the platform and development environment by the header file PIPrefix.h. You are encouraged to use this header file.</p>
  <h4><a name="TOC_Mac_OS_only_methods"></a>Mac OS-only methods</h4>
  <p class="BodyLevel1">Plug-ins should not use the <span class="FM_Courier">ASPathFromPlatformPath</span>&#160;method in Mac OS. Instead, they should invoke <span class="FM_Courier">ASFileSysCreatePathName</span>. The <span class="FM_Courier">AVAppDidOrWillSwitchForDialog</span>&#160;method is only useful to plug-ins in Mac OS.</p>
  <h4><a name="TOC_Interapplication4"></a>Interapplication communication</h4>
  <p class="BodyLevel1">Plug-ins can add their own Apple events to those supported by <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>&#160;by hooking into the Apple event handling loop for <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable>. This is done by replacing the <span class="FM_Courier">AVAppHandleAppleEvent</span>&#160;method in the API. If the plug-in receives an Apple event it does not want to handle, it should invoke the implementation of the method it replaced, allowing other plug-ins or <uservariable x-value="Acrobat" x-showvalue="TRUE" name="AcrobatProd" x-format="AcrobatProd">Acrobat</uservariable>&#160;or <uservariable x-value="Acrobat&nbsp;Reader" x-showvalue="TRUE" name="AdobeReaderProd" x-format="AdobeReaderProd">Acrobat&nbsp;Reader</uservariable> the opportunity to handle the Apple event.</p>
  </div>
</body>
</html>